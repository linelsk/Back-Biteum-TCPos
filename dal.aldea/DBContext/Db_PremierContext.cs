// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using biz.premier.Entities;

namespace dal.premier.DBContext
{
    public partial class Db_PremierContext : DbContext
    {
        public Db_PremierContext()
        {
        }

        public Db_PremierContext(DbContextOptions<Db_PremierContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ActivityLog> ActivityLogs { get; set; }
        public virtual DbSet<AdditionalExpense> AdditionalExpenses { get; set; }
        public virtual DbSet<AdministrativeContactsConsultant> AdministrativeContactsConsultants { get; set; }
        public virtual DbSet<AdministrativeContactsService> AdministrativeContactsServices { get; set; }
        public virtual DbSet<AirportTransportationService> AirportTransportationServices { get; set; }
        public virtual DbSet<AmenitiesHousingList> AmenitiesHousingLists { get; set; }
        public virtual DbSet<Answer> Answers { get; set; }
        public virtual DbSet<Appointment> Appointments { get; set; }
        public virtual DbSet<AppointmentWorkOrderService> AppointmentWorkOrderServices { get; set; }
        public virtual DbSet<AreaOrientation> AreaOrientations { get; set; }
        public virtual DbSet<AreasCoverageConsultant> AreasCoverageConsultants { get; set; }
        public virtual DbSet<AreasCoverageService> AreasCoverageServices { get; set; }
        public virtual DbSet<AssigmentInformation> AssigmentInformations { get; set; }
        public virtual DbSet<AssignedPhoto> AssignedPhotos { get; set; }
        public virtual DbSet<AssignedServiceSuplier> AssignedServiceSupliers { get; set; }
        public virtual DbSet<AssignedTeam> AssignedTeams { get; set; }
        public virtual DbSet<AssigneeFeedback> AssigneeFeedbacks { get; set; }
        public virtual DbSet<AssigneeInformation> AssigneeInformations { get; set; }
        public virtual DbSet<Attendee> Attendees { get; set; }
        public virtual DbSet<BundledService> BundledServices { get; set; }
        public virtual DbSet<BundledServicesWorkOrder> BundledServicesWorkOrders { get; set; }
        public virtual DbSet<CalendarConsultantContactsConsultant> CalendarConsultantContactsConsultants { get; set; }
        public virtual DbSet<Call> Calls { get; set; }
        public virtual DbSet<CallAssistant> CallAssistants { get; set; }
        public virtual DbSet<Campus> Campuses { get; set; }
        public virtual DbSet<CatActionType> CatActionTypes { get; set; }
        public virtual DbSet<CatAmenitie> CatAmenities { get; set; }
        public virtual DbSet<CatApplicant> CatApplicants { get; set; }
        public virtual DbSet<CatAreaCoverageType> CatAreaCoverageTypes { get; set; }
        public virtual DbSet<CatAssignedService> CatAssignedServices { get; set; }
        public virtual DbSet<CatAssitanceWith> CatAssitanceWiths { get; set; }
        public virtual DbSet<CatAuthorizedBy> CatAuthorizedBies { get; set; }
        public virtual DbSet<CatBankAccountType> CatBankAccountTypes { get; set; }
        public virtual DbSet<CatBenefit> CatBenefits { get; set; }
        public virtual DbSet<CatBillType> CatBillTypes { get; set; }
        public virtual DbSet<CatBreed> CatBreeds { get; set; }
        public virtual DbSet<CatCatalog> CatCatalogs { get; set; }
        public virtual DbSet<CatCategory> CatCategories { get; set; }
        public virtual DbSet<CatCity> CatCities { get; set; }
        public virtual DbSet<CatClient> CatClients { get; set; }
        public virtual DbSet<CatColumnsReport> CatColumnsReports { get; set; }
        public virtual DbSet<CatConsularService> CatConsularServices { get; set; }
        public virtual DbSet<CatContactType> CatContactTypes { get; set; }
        public virtual DbSet<CatContentType> CatContentTypes { get; set; }
        public virtual DbSet<CatContractType> CatContractTypes { get; set; }
        public virtual DbSet<CatCoordinator> CatCoordinators { get; set; }
        public virtual DbSet<CatCoordinatorType> CatCoordinatorTypes { get; set; }
        public virtual DbSet<CatCostType> CatCostTypes { get; set; }
        public virtual DbSet<CatCountry> CatCountries { get; set; }
        public virtual DbSet<CatCreditCard> CatCreditCards { get; set; }
        public virtual DbSet<CatCreditTerm> CatCreditTerms { get; set; }
        public virtual DbSet<CatCurrency> CatCurrencies { get; set; }
        public virtual DbSet<CatDay> CatDays { get; set; }
        public virtual DbSet<CatDeliviredIn> CatDeliviredIns { get; set; }
        public virtual DbSet<CatDepartment> CatDepartments { get; set; }
        public virtual DbSet<CatDocumentStatus> CatDocumentStatuses { get; set; }
        public virtual DbSet<CatDocumentType> CatDocumentTypes { get; set; }
        public virtual DbSet<CatDuration> CatDurations { get; set; }
        public virtual DbSet<CatElement> CatElements { get; set; }
        public virtual DbSet<CatEmailSend> CatEmailSends { get; set; }
        public virtual DbSet<CatEvent> CatEvents { get; set; }
        public virtual DbSet<CatExpense> CatExpenses { get; set; }
        public virtual DbSet<CatFilterReport> CatFilterReports { get; set; }
        public virtual DbSet<CatGradeSchooling> CatGradeSchoolings { get; set; }
        public virtual DbSet<CatHighestLevelEducation> CatHighestLevelEducations { get; set; }
        public virtual DbSet<CatIndustry> CatIndustries { get; set; }
        public virtual DbSet<CatInvoiceType> CatInvoiceTypes { get; set; }
        public virtual DbSet<CatLanguage> CatLanguages { get; set; }
        public virtual DbSet<CatLeaseGuarantee> CatLeaseGuarantees { get; set; }
        public virtual DbSet<CatLeaseTemplate> CatLeaseTemplates { get; set; }
        public virtual DbSet<CatLibrary> CatLibraries { get; set; }
        public virtual DbSet<CatLocationType> CatLocationTypes { get; set; }
        public virtual DbSet<CatMaritalstatus> CatMaritalstatuses { get; set; }
        public virtual DbSet<CatMenu> CatMenus { get; set; }
        public virtual DbSet<CatMetric> CatMetrics { get; set; }
        public virtual DbSet<CatNotification> CatNotifications { get; set; }
        public virtual DbSet<CatNotificationSystemType> CatNotificationSystemTypes { get; set; }
        public virtual DbSet<CatNotificationType> CatNotificationTypes { get; set; }
        public virtual DbSet<CatOffice> CatOffices { get; set; }
        public virtual DbSet<CatParticipantStatus> CatParticipantStatuses { get; set; }
        public virtual DbSet<CatPartner> CatPartners { get; set; }
        public virtual DbSet<CatPaymentRecurrence> CatPaymentRecurrences { get; set; }
        public virtual DbSet<CatPaymentType> CatPaymentTypes { get; set; }
        public virtual DbSet<CatPaymentTypeStatus> CatPaymentTypeStatuses { get; set; }
        public virtual DbSet<CatPaymetMethod> CatPaymetMethods { get; set; }
        public virtual DbSet<CatPetType> CatPetTypes { get; set; }
        public virtual DbSet<CatPolicyType> CatPolicyTypes { get; set; }
        public virtual DbSet<CatPriceTermsDeal> CatPriceTermsDeals { get; set; }
        public virtual DbSet<CatPrivacy> CatPrivacies { get; set; }
        public virtual DbSet<CatProficiency> CatProficiencies { get; set; }
        public virtual DbSet<CatProperty> CatProperties { get; set; }
        public virtual DbSet<CatPropertyInspection> CatPropertyInspections { get; set; }
        public virtual DbSet<CatPropertySection> CatPropertySections { get; set; }
        public virtual DbSet<CatPropertyType> CatPropertyTypes { get; set; }
        public virtual DbSet<CatPropertyTypeHousing> CatPropertyTypeHousings { get; set; }
        public virtual DbSet<CatPurchaseStatus> CatPurchaseStatuses { get; set; }
        public virtual DbSet<CatRelationship> CatRelationships { get; set; }
        public virtual DbSet<CatRepairType> CatRepairTypes { get; set; }
        public virtual DbSet<CatReport> CatReports { get; set; }
        public virtual DbSet<CatReportType> CatReportTypes { get; set; }
        public virtual DbSet<CatRequestPaymentStatus> CatRequestPaymentStatuses { get; set; }
        public virtual DbSet<CatRequestType> CatRequestTypes { get; set; }
        public virtual DbSet<CatReservationType> CatReservationTypes { get; set; }
        public virtual DbSet<CatResponsablePayment> CatResponsablePayments { get; set; }
        public virtual DbSet<CatRole> CatRoles { get; set; }
        public virtual DbSet<CatSchoolStatus> CatSchoolStatuses { get; set; }
        public virtual DbSet<CatSection> CatSections { get; set; }
        public virtual DbSet<CatService> CatServices { get; set; }
        public virtual DbSet<CatServiceLine> CatServiceLines { get; set; }
        public virtual DbSet<CatServiceScoreAward> CatServiceScoreAwards { get; set; }
        public virtual DbSet<CatSeverity> CatSeverities { get; set; }
        public virtual DbSet<CatSex> CatSexes { get; set; }
        public virtual DbSet<CatSize> CatSizes { get; set; }
        public virtual DbSet<CatStatus> CatStatuses { get; set; }
        public virtual DbSet<CatStatusHomePurchase> CatStatusHomePurchases { get; set; }
        public virtual DbSet<CatStatusHousing> CatStatusHousings { get; set; }
        public virtual DbSet<CatStatusInvoice> CatStatusInvoices { get; set; }
        public virtual DbSet<CatStatusPropertySection> CatStatusPropertySections { get; set; }
        public virtual DbSet<CatStatusReportAnEvent> CatStatusReportAnEvents { get; set; }
        public virtual DbSet<CatStatusReportIssue> CatStatusReportIssues { get; set; }
        public virtual DbSet<CatStatusSale> CatStatusSales { get; set; }
        public virtual DbSet<CatStatusSupplierCoordinator> CatStatusSupplierCoordinators { get; set; }
        public virtual DbSet<CatStatusWorkOrder> CatStatusWorkOrders { get; set; }
        public virtual DbSet<CatSubMenu> CatSubMenus { get; set; }
        public virtual DbSet<CatSupplier> CatSuppliers { get; set; }
        public virtual DbSet<CatSupplierCompany> CatSupplierCompanies { get; set; }
        public virtual DbSet<CatSupplierPartnerProfileStatus> CatSupplierPartnerProfileStatuses { get; set; }
        public virtual DbSet<CatSupplierPartnerProfileType> CatSupplierPartnerProfileTypes { get; set; }
        public virtual DbSet<CatSupplierPartnerType> CatSupplierPartnerTypes { get; set; }
        public virtual DbSet<CatSupplierType> CatSupplierTypes { get; set; }
        public virtual DbSet<CatTaxePercentage> CatTaxePercentages { get; set; }
        public virtual DbSet<CatTimeZone> CatTimeZones { get; set; }
        public virtual DbSet<CatTitle> CatTitles { get; set; }
        public virtual DbSet<CatTrainingGroup> CatTrainingGroups { get; set; }
        public virtual DbSet<CatTrainingType> CatTrainingTypes { get; set; }
        public virtual DbSet<CatTransportType> CatTransportTypes { get; set; }
        public virtual DbSet<CatType> CatTypes { get; set; }
        public virtual DbSet<CatTypeCatalog> CatTypeCatalogs { get; set; }
        public virtual DbSet<CatTypeHousing> CatTypeHousings { get; set; }
        public virtual DbSet<CatTypeService> CatTypeServices { get; set; }
        public virtual DbSet<CatUserType> CatUserTypes { get; set; }
        public virtual DbSet<CatVehicleType> CatVehicleTypes { get; set; }
        public virtual DbSet<CatVisaCategory> CatVisaCategories { get; set; }
        public virtual DbSet<CatVisaType> CatVisaTypes { get; set; }
        public virtual DbSet<CatWeightMeasure> CatWeightMeasures { get; set; }
        public virtual DbSet<ChatConversationImmigrationRelocation> ChatConversationImmigrationRelocations { get; set; }
        public virtual DbSet<ChatDocumentImmigrationRelocation> ChatDocumentImmigrationRelocations { get; set; }
        public virtual DbSet<ChatImmigrationRelocation> ChatImmigrationRelocations { get; set; }
        public virtual DbSet<CityAbout> CityAbouts { get; set; }
        public virtual DbSet<CityAreasCoverageConsultant> CityAreasCoverageConsultants { get; set; }
        public virtual DbSet<CityAreasCoverageService> CityAreasCoverageServices { get; set; }
        public virtual DbSet<CityAttraction> CityAttractions { get; set; }
        public virtual DbSet<CityEmergency> CityEmergencies { get; set; }
        public virtual DbSet<CityWhatToDo> CityWhatToDos { get; set; }
        public virtual DbSet<CityWhereEat> CityWhereEats { get; set; }
        public virtual DbSet<ClientPartnerProfile> ClientPartnerProfiles { get; set; }
        public virtual DbSet<ClientPartnerProfileClient> ClientPartnerProfileClients { get; set; }
        public virtual DbSet<ClientPartnerProfileExperienceTeam> ClientPartnerProfileExperienceTeams { get; set; }
        public virtual DbSet<ColaboratorMember> ColaboratorMembers { get; set; }
        public virtual DbSet<Column> Columns { get; set; }
        public virtual DbSet<CommentAirportTransportationService> CommentAirportTransportationServices { get; set; }
        public virtual DbSet<CommentAreaOrientation> CommentAreaOrientations { get; set; }
        public virtual DbSet<CommentCorporateAssistance> CommentCorporateAssistances { get; set; }
        public virtual DbSet<CommentDeparture> CommentDepartures { get; set; }
        public virtual DbSet<CommentDocumentManagement> CommentDocumentManagements { get; set; }
        public virtual DbSet<CommentHomeFinding> CommentHomeFindings { get; set; }
        public virtual DbSet<CommentHomePurchase> CommentHomePurchases { get; set; }
        public virtual DbSet<CommentHomeSale> CommentHomeSales { get; set; }
        public virtual DbSet<CommentHousing> CommentHousings { get; set; }
        public virtual DbSet<CommentInvoice> CommentInvoices { get; set; }
        public virtual DbSet<CommentLeaseRenewal> CommentLeaseRenewals { get; set; }
        public virtual DbSet<CommentLegalReview> CommentLegalReviews { get; set; }
        public virtual DbSet<CommentLocalDocumentation> CommentLocalDocumentations { get; set; }
        public virtual DbSet<CommentNotification> CommentNotifications { get; set; }
        public virtual DbSet<CommentOther> CommentOthers { get; set; }
        public virtual DbSet<CommentPaymentConcept> CommentPaymentConcepts { get; set; }
        public virtual DbSet<CommentPredecisionOrientation> CommentPredecisionOrientations { get; set; }
        public virtual DbSet<CommentPropertyManagement> CommentPropertyManagements { get; set; }
        public virtual DbSet<CommentRenewal> CommentRenewals { get; set; }
        public virtual DbSet<CommentRentalFurnitureCoordination> CommentRentalFurnitureCoordinations { get; set; }
        public virtual DbSet<CommentReportAnEvent> CommentReportAnEvents { get; set; }
        public virtual DbSet<CommentRequestPayment> CommentRequestPayments { get; set; }
        public virtual DbSet<CommentResidencyPermit> CommentResidencyPermits { get; set; }
        public virtual DbSet<CommentSchoolingSearch> CommentSchoolingSearches { get; set; }
        public virtual DbSet<CommentSettlingIn> CommentSettlingIns { get; set; }
        public virtual DbSet<CommentTemporaryHosuing> CommentTemporaryHosuings { get; set; }
        public virtual DbSet<CommentTenancyManagement> CommentTenancyManagements { get; set; }
        public virtual DbSet<CommentTransportation> CommentTransportations { get; set; }
        public virtual DbSet<CommentVisaDeregistration> CommentVisaDeregistrations { get; set; }
        public virtual DbSet<CommentsEntryVisa> CommentsEntryVisas { get; set; }
        public virtual DbSet<CommentsWorkPermit> CommentsWorkPermits { get; set; }
        public virtual DbSet<CompanyType> CompanyTypes { get; set; }
        public virtual DbSet<CompesationBenefit> CompesationBenefits { get; set; }
        public virtual DbSet<Concept> Concepts { get; set; }
        public virtual DbSet<ConclusionServiceReportDay> ConclusionServiceReportDays { get; set; }
        public virtual DbSet<ConsultantContactsService> ConsultantContactsServices { get; set; }
        public virtual DbSet<Content> Contents { get; set; }
        public virtual DbSet<ContractDetail> ContractDetails { get; set; }
        public virtual DbSet<Conversation> Conversations { get; set; }
        public virtual DbSet<Coordinator> Coordinators { get; set; }
        public virtual DbSet<CorporateAssistance> CorporateAssistances { get; set; }
        public virtual DbSet<CostSaving> CostSavings { get; set; }
        public virtual DbSet<CostSavingDetail> CostSavingDetails { get; set; }
        public virtual DbSet<CostSavingHome> CostSavingHomes { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<CountryDocument> CountryDocuments { get; set; }
        public virtual DbSet<CountryDocumentGroup> CountryDocumentGroups { get; set; }
        public virtual DbSet<CountryGallery> CountryGalleries { get; set; }
        public virtual DbSet<CountryLeader> CountryLeaders { get; set; }
        public virtual DbSet<CountryPhoneCode> CountryPhoneCodes { get; set; }
        public virtual DbSet<CountryService> CountryServices { get; set; }
        public virtual DbSet<CreditCardLandLordDetail> CreditCardLandLordDetails { get; set; }
        public virtual DbSet<CreditCardPaymentInformationConsultant> CreditCardPaymentInformationConsultants { get; set; }
        public virtual DbSet<CreditCardPaymentInformationService> CreditCardPaymentInformationServices { get; set; }
        public virtual DbSet<Departure> Departures { get; set; }
        public virtual DbSet<DepartureAssistanceWith> DepartureAssistanceWiths { get; set; }
        public virtual DbSet<DepartureCostSaving> DepartureCostSavings { get; set; }
        public virtual DbSet<DepartureDetail> DepartureDetails { get; set; }
        public virtual DbSet<DepartureDetailsHome> DepartureDetailsHomes { get; set; }
        public virtual DbSet<DeparturePayment> DeparturePayments { get; set; }
        public virtual DbSet<DependentImmigrationInfo> DependentImmigrationInfos { get; set; }
        public virtual DbSet<DependentInformation> DependentInformations { get; set; }
        public virtual DbSet<DocumentAdministrativeContactsConsultant> DocumentAdministrativeContactsConsultants { get; set; }
        public virtual DbSet<DocumentAdministrativeContactsService> DocumentAdministrativeContactsServices { get; set; }
        public virtual DbSet<DocumentAirportTransportationService> DocumentAirportTransportationServices { get; set; }
        public virtual DbSet<DocumentAppointment> DocumentAppointments { get; set; }
        public virtual DbSet<DocumentAreaOrientation> DocumentAreaOrientations { get; set; }
        public virtual DbSet<DocumentAreasCoverageConsultant> DocumentAreasCoverageConsultants { get; set; }
        public virtual DbSet<DocumentAreasCoverageService> DocumentAreasCoverageServices { get; set; }
        public virtual DbSet<DocumentClientPartnerProfile> DocumentClientPartnerProfiles { get; set; }
        public virtual DbSet<DocumentConsultantContactsConsultant> DocumentConsultantContactsConsultants { get; set; }
        public virtual DbSet<DocumentConsultantContactsService> DocumentConsultantContactsServices { get; set; }
        public virtual DbSet<DocumentCorporateAssistance> DocumentCorporateAssistances { get; set; }
        public virtual DbSet<DocumentDeparture> DocumentDepartures { get; set; }
        public virtual DbSet<DocumentDependentInformation> DocumentDependentInformations { get; set; }
        public virtual DbSet<DocumentDocumentManagement> DocumentDocumentManagements { get; set; }
        public virtual DbSet<DocumentEntryVisa> DocumentEntryVisas { get; set; }
        public virtual DbSet<DocumentGeneralContractPricingInfo> DocumentGeneralContractPricingInfos { get; set; }
        public virtual DbSet<DocumentHomeFinding> DocumentHomeFindings { get; set; }
        public virtual DbSet<DocumentHomePurchase> DocumentHomePurchases { get; set; }
        public virtual DbSet<DocumentHomeSale> DocumentHomeSales { get; set; }
        public virtual DbSet<DocumentHousing> DocumentHousings { get; set; }
        public virtual DbSet<DocumentInvoice> DocumentInvoices { get; set; }
        public virtual DbSet<DocumentLeaseRenewal> DocumentLeaseRenewals { get; set; }
        public virtual DbSet<DocumentLegalReview> DocumentLegalReviews { get; set; }
        public virtual DbSet<DocumentLocalDocumentation> DocumentLocalDocumentations { get; set; }
        public virtual DbSet<DocumentLocationCountry> DocumentLocationCountries { get; set; }
        public virtual DbSet<DocumentManagement> DocumentManagements { get; set; }
        public virtual DbSet<DocumentMessage> DocumentMessages { get; set; }
        public virtual DbSet<DocumentNotification> DocumentNotifications { get; set; }
        public virtual DbSet<DocumentOfficeInformation> DocumentOfficeInformations { get; set; }
        public virtual DbSet<DocumentOther> DocumentOthers { get; set; }
        public virtual DbSet<DocumentPaymentConcept> DocumentPaymentConcepts { get; set; }
        public virtual DbSet<DocumentPredecisionOrientation> DocumentPredecisionOrientations { get; set; }
        public virtual DbSet<DocumentPropertyManagement> DocumentPropertyManagements { get; set; }
        public virtual DbSet<DocumentRenewal> DocumentRenewals { get; set; }
        public virtual DbSet<DocumentRentalFurnitureCoordination> DocumentRentalFurnitureCoordinations { get; set; }
        public virtual DbSet<DocumentRepair> DocumentRepairs { get; set; }
        public virtual DbSet<DocumentRepairHomeFinding> DocumentRepairHomeFindings { get; set; }
        public virtual DbSet<DocumentReportIssuePropertyManagement> DocumentReportIssuePropertyManagements { get; set; }
        public virtual DbSet<DocumentRequestPayment> DocumentRequestPayments { get; set; }
        public virtual DbSet<DocumentResidencyPermit> DocumentResidencyPermits { get; set; }
        public virtual DbSet<DocumentSchoolingSearch> DocumentSchoolingSearches { get; set; }
        public virtual DbSet<DocumentServiceCountry> DocumentServiceCountries { get; set; }
        public virtual DbSet<DocumentSettlingIn> DocumentSettlingIns { get; set; }
        public virtual DbSet<DocumentTemporaryHousingCoordinaton> DocumentTemporaryHousingCoordinatons { get; set; }
        public virtual DbSet<DocumentTenancyManagement> DocumentTenancyManagements { get; set; }
        public virtual DbSet<DocumentTransportation> DocumentTransportations { get; set; }
        public virtual DbSet<DocumentVehicleConsultant> DocumentVehicleConsultants { get; set; }
        public virtual DbSet<DocumentVehicleService> DocumentVehicleServices { get; set; }
        public virtual DbSet<DocumentVisaDeregistration> DocumentVisaDeregistrations { get; set; }
        public virtual DbSet<DocumentWorkPermit> DocumentWorkPermits { get; set; }
        public virtual DbSet<EducationalBackground> EducationalBackgrounds { get; set; }
        public virtual DbSet<Email> Emails { get; set; }
        public virtual DbSet<EmailSend> EmailSends { get; set; }
        public virtual DbSet<EmailServiceRecord> EmailServiceRecords { get; set; }
        public virtual DbSet<EmergencyContact> EmergencyContacts { get; set; }
        public virtual DbSet<EntryVisa> EntryVisas { get; set; }
        public virtual DbSet<Evaluation> Evaluations { get; set; }
        public virtual DbSet<ExperienceSurvey> ExperienceSurveys { get; set; }
        public virtual DbSet<ExperienceSurveySupplier> ExperienceSurveySuppliers { get; set; }
        public virtual DbSet<ExtensionAirportTransportationService> ExtensionAirportTransportationServices { get; set; }
        public virtual DbSet<ExtensionAreaOrientation> ExtensionAreaOrientations { get; set; }
        public virtual DbSet<ExtensionDeparture> ExtensionDepartures { get; set; }
        public virtual DbSet<ExtensionEntryVisa> ExtensionEntryVisas { get; set; }
        public virtual DbSet<ExtensionHomeFinding> ExtensionHomeFindings { get; set; }
        public virtual DbSet<ExtensionPredecisionOrientation> ExtensionPredecisionOrientations { get; set; }
        public virtual DbSet<ExtensionRentalFurnitureCoordination> ExtensionRentalFurnitureCoordinations { get; set; }
        public virtual DbSet<ExtensionSchoolingSearch> ExtensionSchoolingSearches { get; set; }
        public virtual DbSet<ExtensionSettlingIn> ExtensionSettlingIns { get; set; }
        public virtual DbSet<ExtensionTemporaryHousingCoordinaton> ExtensionTemporaryHousingCoordinatons { get; set; }
        public virtual DbSet<ExtensionTransportation> ExtensionTransportations { get; set; }
        public virtual DbSet<FamilyMemberTransportService> FamilyMemberTransportServices { get; set; }
        public virtual DbSet<FamilyMemberTransportation> FamilyMemberTransportations { get; set; }
        public virtual DbSet<File> Files { get; set; }
        public virtual DbSet<Filter> Filters { get; set; }
        public virtual DbSet<Follow> Follows { get; set; }
        public virtual DbSet<GeneralContractPricingInfo> GeneralContractPricingInfos { get; set; }
        public virtual DbSet<HomeFinding> HomeFindings { get; set; }
        public virtual DbSet<HomeFindingRepair> HomeFindingRepairs { get; set; }
        public virtual DbSet<HomePurchase> HomePurchases { get; set; }
        public virtual DbSet<HomeSale> HomeSales { get; set; }
        public virtual DbSet<HousingList> HousingLists { get; set; }
        public virtual DbSet<HousingReport> HousingReports { get; set; }
        public virtual DbSet<HousingSpecification> HousingSpecifications { get; set; }
        public virtual DbSet<HousingStatusHistory> HousingStatusHistories { get; set; }
        public virtual DbSet<ImmigrationCoodinator> ImmigrationCoodinators { get; set; }
        public virtual DbSet<ImmigrationProfile> ImmigrationProfiles { get; set; }
        public virtual DbSet<ImmigrationSupplierPartner> ImmigrationSupplierPartners { get; set; }
        public virtual DbSet<IncludedRent> IncludedRents { get; set; }
        public virtual DbSet<Inspection> Inspections { get; set; }
        public virtual DbSet<InspectionHomeFinding> InspectionHomeFindings { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<KeyInventory> KeyInventories { get; set; }
        public virtual DbSet<LandLordBank> LandLordBanks { get; set; }
        public virtual DbSet<LandLordBankDetail> LandLordBankDetails { get; set; }
        public virtual DbSet<LandlordDetail> LandlordDetails { get; set; }
        public virtual DbSet<LandlordDetailsHome> LandlordDetailsHomes { get; set; }
        public virtual DbSet<LanguageDependentInformation> LanguageDependentInformations { get; set; }
        public virtual DbSet<LanguagesConsultantContactsConsultant> LanguagesConsultantContactsConsultants { get; set; }
        public virtual DbSet<LanguagesConsultantContactsService> LanguagesConsultantContactsServices { get; set; }
        public virtual DbSet<LanguagesSpoken> LanguagesSpokens { get; set; }
        public virtual DbSet<LanguagesSpokenSchoolingAreaOrientation> LanguagesSpokenSchoolingAreaOrientations { get; set; }
        public virtual DbSet<LanguangeSpokenSchoolingInformation> LanguangeSpokenSchoolingInformations { get; set; }
        public virtual DbSet<LeaseRenewal> LeaseRenewals { get; set; }
        public virtual DbSet<LegalReview> LegalReviews { get; set; }
        public virtual DbSet<LenguageProficiency> LenguageProficiencies { get; set; }
        public virtual DbSet<LifeCircle> LifeCircles { get; set; }
        public virtual DbSet<LocalDocumentation> LocalDocumentations { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<MapIt> MapIts { get; set; }
        public virtual DbSet<Message> Messages { get; set; }
        public virtual DbSet<Nationality> Nationalities { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<NotificationSystem> NotificationSystems { get; set; }
        public virtual DbSet<Office> Offices { get; set; }
        public virtual DbSet<OfficeContact> OfficeContacts { get; set; }
        public virtual DbSet<OfficeContactType> OfficeContactTypes { get; set; }
        public virtual DbSet<OfficeInformation> OfficeInformations { get; set; }
        public virtual DbSet<OperationLeader> OperationLeaders { get; set; }
        public virtual DbSet<Other> Others { get; set; }
        public virtual DbSet<Participant> Participants { get; set; }
        public virtual DbSet<ParticipantContent> ParticipantContents { get; set; }
        public virtual DbSet<ParticipantEvaluation> ParticipantEvaluations { get; set; }
        public virtual DbSet<PassportInformation> PassportInformations { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<PaymentAirportTransportationService> PaymentAirportTransportationServices { get; set; }
        public virtual DbSet<PaymentHomeFinding> PaymentHomeFindings { get; set; }
        public virtual DbSet<PaymentHousing> PaymentHousings { get; set; }
        public virtual DbSet<PaymentInformationConsultant> PaymentInformationConsultants { get; set; }
        public virtual DbSet<PaymentInformationOffice> PaymentInformationOffices { get; set; }
        public virtual DbSet<PaymentInformationProfile> PaymentInformationProfiles { get; set; }
        public virtual DbSet<PaymentInformationService> PaymentInformationServices { get; set; }
        public virtual DbSet<PaymentRecurrence> PaymentRecurrences { get; set; }
        public virtual DbSet<PaymentTransportation> PaymentTransportations { get; set; }
        public virtual DbSet<PaymentsRentalFurnitureCoordination> PaymentsRentalFurnitureCoordinations { get; set; }
        public virtual DbSet<PermanentHome> PermanentHomes { get; set; }
        public virtual DbSet<Permission> Permissions { get; set; }
        public virtual DbSet<PersonalInformation> PersonalInformations { get; set; }
        public virtual DbSet<Pet> Pets { get; set; }
        public virtual DbSet<PhotoBillPropertyManagement> PhotoBillPropertyManagements { get; set; }
        public virtual DbSet<PhotoCityAbout> PhotoCityAbouts { get; set; }
        public virtual DbSet<PhotoCityAttraction> PhotoCityAttractions { get; set; }
        public virtual DbSet<PhotoCityEmergency> PhotoCityEmergencies { get; set; }
        public virtual DbSet<PhotoInspectionPropertyManagement> PhotoInspectionPropertyManagements { get; set; }
        public virtual DbSet<PhotoMailPropertyManagement> PhotoMailPropertyManagements { get; set; }
        public virtual DbSet<PhotoPropertyManagement> PhotoPropertyManagements { get; set; }
        public virtual DbSet<PhotoReportIssuePropertyManagement> PhotoReportIssuePropertyManagements { get; set; }
        public virtual DbSet<PhotoWhatToDo> PhotoWhatToDos { get; set; }
        public virtual DbSet<PhotoWhereEat> PhotoWhereEats { get; set; }
        public virtual DbSet<PhotosInventory> PhotosInventories { get; set; }
        public virtual DbSet<PhotosPropertyReportSection> PhotosPropertyReportSections { get; set; }
        public virtual DbSet<PhotosVehicleConsultant> PhotosVehicleConsultants { get; set; }
        public virtual DbSet<PhotosVehicleService> PhotosVehicleServices { get; set; }
        public virtual DbSet<PostIt> PostIts { get; set; }
        public virtual DbSet<PredecisionOrientation> PredecisionOrientations { get; set; }
        public virtual DbSet<PreviousHostCountry> PreviousHostCountries { get; set; }
        public virtual DbSet<PricingSchedule> PricingSchedules { get; set; }
        public virtual DbSet<PricingType> PricingTypes { get; set; }
        public virtual DbSet<ProfileUser> ProfileUsers { get; set; }
        public virtual DbSet<PropertyExpense> PropertyExpenses { get; set; }
        public virtual DbSet<PropertyManagement> PropertyManagements { get; set; }
        public virtual DbSet<PropertyReport> PropertyReports { get; set; }
        public virtual DbSet<PropertyReportSection> PropertyReportSections { get; set; }
        public virtual DbSet<RecurrencePaymentConcept> RecurrencePaymentConcepts { get; set; }
        public virtual DbSet<RecurrenceRequestPayment> RecurrenceRequestPayments { get; set; }
        public virtual DbSet<ReferralFee> ReferralFees { get; set; }
        public virtual DbSet<RelHousingAmenitie> RelHousingAmenities { get; set; }
        public virtual DbSet<RelHousingAreaOrientation> RelHousingAreaOrientations { get; set; }
        public virtual DbSet<RelocationCoordinator> RelocationCoordinators { get; set; }
        public virtual DbSet<RelocationSupplierPartner> RelocationSupplierPartners { get; set; }
        public virtual DbSet<RemiderCorporateAssistance> RemiderCorporateAssistances { get; set; }
        public virtual DbSet<ReminderAirportTransportationService> ReminderAirportTransportationServices { get; set; }
        public virtual DbSet<ReminderAreaOrientation> ReminderAreaOrientations { get; set; }
        public virtual DbSet<ReminderDeparture> ReminderDepartures { get; set; }
        public virtual DbSet<ReminderDocumentManagement> ReminderDocumentManagements { get; set; }
        public virtual DbSet<ReminderEntryVisa> ReminderEntryVisas { get; set; }
        public virtual DbSet<ReminderHomeFinding> ReminderHomeFindings { get; set; }
        public virtual DbSet<ReminderHomePurchase> ReminderHomePurchases { get; set; }
        public virtual DbSet<ReminderHomeSale> ReminderHomeSales { get; set; }
        public virtual DbSet<ReminderLeaseRenewal> ReminderLeaseRenewals { get; set; }
        public virtual DbSet<ReminderLegalReview> ReminderLegalReviews { get; set; }
        public virtual DbSet<ReminderLocalDocumentation> ReminderLocalDocumentations { get; set; }
        public virtual DbSet<ReminderNotification> ReminderNotifications { get; set; }
        public virtual DbSet<ReminderOther> ReminderOthers { get; set; }
        public virtual DbSet<ReminderPredecisionOrientation> ReminderPredecisionOrientations { get; set; }
        public virtual DbSet<ReminderPropertyManagement> ReminderPropertyManagements { get; set; }
        public virtual DbSet<ReminderRenewal> ReminderRenewals { get; set; }
        public virtual DbSet<ReminderRentalFurnitureCoordination> ReminderRentalFurnitureCoordinations { get; set; }
        public virtual DbSet<ReminderResidencyPermit> ReminderResidencyPermits { get; set; }
        public virtual DbSet<ReminderSchoolingSearch> ReminderSchoolingSearches { get; set; }
        public virtual DbSet<ReminderSettlingIn> ReminderSettlingIns { get; set; }
        public virtual DbSet<ReminderTemporaryHousingCoordinaton> ReminderTemporaryHousingCoordinatons { get; set; }
        public virtual DbSet<ReminderTenancyManagement> ReminderTenancyManagements { get; set; }
        public virtual DbSet<ReminderTransportation> ReminderTransportations { get; set; }
        public virtual DbSet<ReminderVisaDeregistration> ReminderVisaDeregistrations { get; set; }
        public virtual DbSet<ReminderWorkPermit> ReminderWorkPermits { get; set; }
        public virtual DbSet<Renewal> Renewals { get; set; }
        public virtual DbSet<RenewalDetail> RenewalDetails { get; set; }
        public virtual DbSet<RenewalDetailHome> RenewalDetailHomes { get; set; }
        public virtual DbSet<RentalFurnitureCoordination> RentalFurnitureCoordinations { get; set; }
        public virtual DbSet<Repair> Repairs { get; set; }
        public virtual DbSet<RepeatThePaymentConcept> RepeatThePaymentConcepts { get; set; }
        public virtual DbSet<RepeatTheRecurrenceRequestPayment> RepeatTheRecurrenceRequestPayments { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<ReportAnEvent> ReportAnEvents { get; set; }
        public virtual DbSet<ReportDay> ReportDays { get; set; }
        public virtual DbSet<RequestAdditionalTime> RequestAdditionalTimes { get; set; }
        public virtual DbSet<RequestInformation> RequestInformations { get; set; }
        public virtual DbSet<RequestInformationDocument> RequestInformationDocuments { get; set; }
        public virtual DbSet<RequestPayment> RequestPayments { get; set; }
        public virtual DbSet<ResidencyPermit> ResidencyPermits { get; set; }
        public virtual DbSet<ResponsiblePremierOffice> ResponsiblePremierOffices { get; set; }
        public virtual DbSet<ScalateComment> ScalateComments { get; set; }
        public virtual DbSet<ScalateDocument> ScalateDocuments { get; set; }
        public virtual DbSet<ScalateService> ScalateServices { get; set; }
        public virtual DbSet<Schooling> Schoolings { get; set; }
        public virtual DbSet<SchoolingAreaOrientation> SchoolingAreaOrientations { get; set; }
        public virtual DbSet<SchoolingInformation> SchoolingInformations { get; set; }
        public virtual DbSet<SchoolingReport> SchoolingReports { get; set; }
        public virtual DbSet<SchoolingSearch> SchoolingSearches { get; set; }
        public virtual DbSet<SchoolsList> SchoolsLists { get; set; }
        public virtual DbSet<SectionInventory> SectionInventories { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<ServiceCountry> ServiceCountries { get; set; }
        public virtual DbSet<ServiceInvoice> ServiceInvoices { get; set; }
        public virtual DbSet<ServiceLocation> ServiceLocations { get; set; }
        public virtual DbSet<ServiceLocationCountry> ServiceLocationCountries { get; set; }
        public virtual DbSet<ServiceOrderServicesStatus> ServiceOrderServicesStatuses { get; set; }
        public virtual DbSet<ServiceRecord> ServiceRecords { get; set; }
        public virtual DbSet<ServiceReportDay> ServiceReportDays { get; set; }
        public virtual DbSet<ServiceScoreAward> ServiceScoreAwards { get; set; }
        public virtual DbSet<SettlingIn> SettlingIns { get; set; }
        public virtual DbSet<SlidePhrase> SlidePhrases { get; set; }
        public virtual DbSet<StandaloneServiceWorkOrder> StandaloneServiceWorkOrders { get; set; }
        public virtual DbSet<StatusClientPartnerProfile> StatusClientPartnerProfiles { get; set; }
        public virtual DbSet<StatusCountryDocument> StatusCountryDocuments { get; set; }
        public virtual DbSet<StayExtensionRentalFurnitureCoordination> StayExtensionRentalFurnitureCoordinations { get; set; }
        public virtual DbSet<StayExtensionTemporaryHousing> StayExtensionTemporaryHousings { get; set; }
        public virtual DbSet<SuccessProbability> SuccessProbabilities { get; set; }
        public virtual DbSet<SupplierConsultantPhoto> SupplierConsultantPhotos { get; set; }
        public virtual DbSet<SupplierPartnerDetail> SupplierPartnerDetails { get; set; }
        public virtual DbSet<SupplierPartnerProfileConsultant> SupplierPartnerProfileConsultants { get; set; }
        public virtual DbSet<SupplierPartnerProfileService> SupplierPartnerProfileServices { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }
        public virtual DbSet<TaskDocument> TaskDocuments { get; set; }
        public virtual DbSet<TaskReply> TaskReplies { get; set; }
        public virtual DbSet<TaskStatus> TaskStatuses { get; set; }
        public virtual DbSet<TemporaryHousingCoordinaton> TemporaryHousingCoordinatons { get; set; }
        public virtual DbSet<TenancyManagement> TenancyManagements { get; set; }
        public virtual DbSet<TermsDeal> TermsDeals { get; set; }
        public virtual DbSet<Theme> Themes { get; set; }
        public virtual DbSet<Transportation> Transportations { get; set; }
        public virtual DbSet<TypeOffice> TypeOffices { get; set; }
        public virtual DbSet<TypePartnerClientProfile> TypePartnerClientProfiles { get; set; }
        public virtual DbSet<TypeVehiclesSupplierPartnerDetail> TypeVehiclesSupplierPartnerDetails { get; set; }
        public virtual DbSet<UnavailableDay> UnavailableDays { get; set; }
        public virtual DbSet<UpcomingEvent> UpcomingEvents { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserGroup> UserGroups { get; set; }
        public virtual DbSet<VehicleConsultant> VehicleConsultants { get; set; }
        public virtual DbSet<VehicleService> VehicleServices { get; set; }
        public virtual DbSet<VisaDeregistration> VisaDeregistrations { get; set; }
        public virtual DbSet<VisitHomeSale> VisitHomeSales { get; set; }
        public virtual DbSet<VisitReportPropertyManagement> VisitReportPropertyManagements { get; set; }
        public virtual DbSet<WireTransferConsultant> WireTransferConsultants { get; set; }
        public virtual DbSet<WireTransferPaymentConcept> WireTransferPaymentConcepts { get; set; }
        public virtual DbSet<WireTransferPaymentInformationOffice> WireTransferPaymentInformationOffices { get; set; }
        public virtual DbSet<WireTransferService> WireTransferServices { get; set; }
        public virtual DbSet<WireTransferServicePaymentConcept> WireTransferServicePaymentConcepts { get; set; }
        public virtual DbSet<WorkOrder> WorkOrders { get; set; }
        public virtual DbSet<WorkOrderService> WorkOrderServices { get; set; }
        public virtual DbSet<WorkPermit> WorkPermits { get; set; }
        public virtual DbSet<training> training { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ActivityLog>(entity =>
            {
                entity.ToTable("Activity Log");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Activity)
                    .IsRequired()
                    .HasColumnName("activity")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Date)
                    .HasColumnName("date")
                    .HasColumnType("date");

                entity.Property(e => e.IdClientPartnerProfile).HasColumnName("id_client_partner_profile");

                entity.Property(e => e.PremierSalesForce)
                    .IsRequired()
                    .HasColumnName("premier_sales_force")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdClientPartnerProfileNavigation)
                    .WithMany(p => p.ActivityLogs)
                    .HasForeignKey(d => d.IdClientPartnerProfile)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Activity Log_Client_Partner_Profile");
            });

            modelBuilder.Entity<AdditionalExpense>(entity =>
            {
                entity.ToTable("Additional_Expense");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Amount)
                    .HasColumnName("amount")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Concept)
                    .HasColumnName("concept")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Currency).HasColumnName("currency");

                entity.Property(e => e.Invoice).HasColumnName("invoice");

                entity.Property(e => e.Requested).HasColumnName("requested");

                entity.HasOne(d => d.CurrencyNavigation)
                    .WithMany(p => p.AdditionalExpenses)
                    .HasForeignKey(d => d.Currency)
                    .HasConstraintName("FK_Additional_Expense_Cat_currency");

                entity.HasOne(d => d.InvoiceNavigation)
                    .WithMany(p => p.AdditionalExpenses)
                    .HasForeignKey(d => d.Invoice)
                    .HasConstraintName("FK_Additional_Expense_Invoice");
            });

            modelBuilder.Entity<AdministrativeContactsConsultant>(entity =>
            {
                entity.ToTable("Administrative_Contacts_Consultant");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AreasCoverage).HasColumnName("areas_coverage");

                entity.Property(e => e.City).HasColumnName("city");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ContactName)
                    .HasColumnName("contact_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContactType).HasColumnName("contact_type");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneNumber)
                    .HasColumnName("phone_number")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Photo)
                    .HasColumnName("photo")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.AreasCoverageNavigation)
                    .WithMany(p => p.AdministrativeContactsConsultants)
                    .HasForeignKey(d => d.AreasCoverage)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Administrative_Contacts_Consultant_Areas_Coverage_Consultant");

                entity.HasOne(d => d.CityNavigation)
                    .WithMany(p => p.AdministrativeContactsConsultants)
                    .HasForeignKey(d => d.City)
                    .HasConstraintName("FK_Administrative_Contacts_Consultant_Cat_State");

                entity.HasOne(d => d.ContactTypeNavigation)
                    .WithMany(p => p.AdministrativeContactsConsultants)
                    .HasForeignKey(d => d.ContactType)
                    .HasConstraintName("FK_Administrative_Contacts_Consultant_Cat_ContactType");
            });

            modelBuilder.Entity<AdministrativeContactsService>(entity =>
            {
                entity.ToTable("Administrative_Contacts_Service");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AreasCoverage).HasColumnName("areas_coverage");

                entity.Property(e => e.City).HasColumnName("city");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ContactName)
                    .HasColumnName("contact_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContactType).HasColumnName("contact_type");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneNumber)
                    .HasColumnName("phone_number")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Photo)
                    .HasColumnName("photo")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.AreasCoverageNavigation)
                    .WithMany(p => p.AdministrativeContactsServices)
                    .HasForeignKey(d => d.AreasCoverage)
                    .HasConstraintName("FK_Administrative_Contacts_Service_Areas_Coverage_Service");

                entity.HasOne(d => d.CityNavigation)
                    .WithMany(p => p.AdministrativeContactsServices)
                    .HasForeignKey(d => d.City)
                    .HasConstraintName("FK_Administrative_Contacts_Service_Cat_State");

                entity.HasOne(d => d.ContactTypeNavigation)
                    .WithMany(p => p.AdministrativeContactsServices)
                    .HasForeignKey(d => d.ContactType)
                    .HasConstraintName("FK_Administrative_Contacts_Service_Cat_ContactType");
            });

            modelBuilder.Entity<AirportTransportationService>(entity =>
            {
                entity.ToTable("Airport_Transportation_Services");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApplicantId).HasColumnName("applicant_id");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Coordination).HasColumnName("coordination");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DriverContact)
                    .HasColumnName("driver_contact")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DriverName)
                    .HasColumnName("driver_name")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DropOffLocation)
                    .HasColumnName("drop_off_location")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FlightNumber)
                    .HasColumnName("flight_number")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NumberLuggage).HasColumnName("number_luggage");

                entity.Property(e => e.Pet).HasColumnName("pet");

                entity.Property(e => e.PickUpLocation)
                    .HasColumnName("pick_up_location")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PlateNumber)
                    .HasColumnName("plate_number")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectFee)
                    .HasColumnName("project_fee")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceCompletionDate)
                    .HasColumnName("service_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.ServiceDate)
                    .HasColumnName("service_date")
                    .HasColumnType("date");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.SupplierPartner).HasColumnName("supplier_partner");

                entity.Property(e => e.TimeServicesHour)
                    .HasColumnName("time_services_hour")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TimeServicesMinute)
                    .HasColumnName("time_services_minute")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransportType).HasColumnName("transport_type");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.Vehicle)
                    .HasColumnName("vehicle")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.VehicleColor)
                    .HasColumnName("vehicle_color")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.WorkOrderServicesId).HasColumnName("work_order_services_id");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.AirportTransportationServices)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Airport_Transportation_Services_Cat_StatusWorkOrder");

                entity.HasOne(d => d.SupplierPartnerNavigation)
                    .WithMany(p => p.AirportTransportationServices)
                    .HasForeignKey(d => d.SupplierPartner)
                    .HasConstraintName("FK_Airport_Transportation_Services_Supplier_Partner_Profile_Service");

                entity.HasOne(d => d.TransportTypeNavigation)
                    .WithMany(p => p.AirportTransportationServices)
                    .HasForeignKey(d => d.TransportType)
                    .HasConstraintName("FK_Airport_Transportation_Services_Cat_TransportType");

                entity.HasOne(d => d.WorkOrderServices)
                    .WithMany(p => p.AirportTransportationServices)
                    .HasForeignKey(d => d.WorkOrderServicesId)
                    .HasConstraintName("FK_Airport_Transportation_Services_Work_Order_Services");
            });

            modelBuilder.Entity<AmenitiesHousingList>(entity =>
            {
                entity.HasKey(e => new { e.HousingList, e.Amenitie });

                entity.ToTable("Amenities_Housing_List");

                entity.Property(e => e.HousingList).HasColumnName("housing_list");

                entity.Property(e => e.Amenitie).HasColumnName("amenitie");

                entity.HasOne(d => d.AmenitieNavigation)
                    .WithMany(p => p.AmenitiesHousingLists)
                    .HasForeignKey(d => d.Amenitie)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Amenities_Housing_List_Cat_amenitie");

                entity.HasOne(d => d.HousingListNavigation)
                    .WithMany(p => p.AmenitiesHousingLists)
                    .HasForeignKey(d => d.HousingList)
                    .HasConstraintName("FK_Amenities_Housing_List_Housing_List");
            });

            modelBuilder.Entity<Answer>(entity =>
            {
                entity.ToTable("Answer");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Answer1)
                    .IsRequired()
                    .HasColumnName("answer")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Correct).HasColumnName("correct");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Evaluation).HasColumnName("evaluation");

                entity.Property(e => e.Order).HasColumnName("order");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.EvaluationNavigation)
                    .WithMany(p => p.Answers)
                    .HasForeignKey(d => d.Evaluation)
                    .HasConstraintName("FK_Answer_Evaluation");
            });

            modelBuilder.Entity<Appointment>(entity =>
            {
                entity.ToTable("Appointment");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Date)
                    .HasColumnName("date")
                    .HasColumnType("date");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.EndTime)
                    .HasColumnName("end_time")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ended).HasColumnName("ended");

                entity.Property(e => e.Report).HasColumnName("report");

                entity.Property(e => e.ServiceRecordId).HasColumnName("service_record_id");

                entity.Property(e => e.Start).HasColumnName("start");

                entity.Property(e => e.StartTime)
                    .HasColumnName("start_time")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.ReportNavigation)
                    .WithMany(p => p.Appointments)
                    .HasForeignKey(d => d.Report)
                    .HasConstraintName("FK_Appointment_Report_Day");

                entity.HasOne(d => d.ServiceRecord)
                    .WithMany(p => p.Appointments)
                    .HasForeignKey(d => d.ServiceRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Appointment_Service_Record");
            });

            modelBuilder.Entity<AppointmentWorkOrderService>(entity =>
            {
                entity.ToTable("Appointment_Work_Order_Service");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AppointmentId).HasColumnName("appointment_id");

                entity.Property(e => e.WorkOrderServiceId).HasColumnName("work_order_service_id");

                entity.HasOne(d => d.Appointment)
                    .WithMany(p => p.AppointmentWorkOrderServices)
                    .HasForeignKey(d => d.AppointmentId)
                    .HasConstraintName("FK_Appointment_Work_Order_Service_Appointment");

                entity.HasOne(d => d.WorkOrderService)
                    .WithMany(p => p.AppointmentWorkOrderServices)
                    .HasForeignKey(d => d.WorkOrderServiceId)
                    .HasConstraintName("FK_Appointment_Work_Order_Service_Work_Order_Services");
            });

            modelBuilder.Entity<AreaOrientation>(entity =>
            {
                entity.ToTable("Area_Orientation");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoAcceptanceDateExtension)
                    .HasColumnName("autho_acceptance_date_extension")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDateExtension)
                    .HasColumnName("autho_date_extension")
                    .HasColumnType("date");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Coordination).HasColumnName("coordination");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ExtracurricularActivities).HasColumnName("extracurricular_activities");

                entity.Property(e => e.Housing).HasColumnName("housing");

                entity.Property(e => e.Parks).HasColumnName("parks");

                entity.Property(e => e.Schooling).HasColumnName("schooling");

                entity.Property(e => e.ServiceCompletionDate)
                    .HasColumnName("service_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.ShoppingSocialAreas).HasColumnName("shopping_social_areas");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.Supermarks).HasColumnName("supermarks");

                entity.Property(e => e.Time)
                    .HasColumnName("time")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.WorkOrderServicesId).HasColumnName("work_order_services_id");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.AreaOrientations)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Area_Orientation_Cat_Status");

                entity.HasOne(d => d.WorkOrderServices)
                    .WithMany(p => p.AreaOrientations)
                    .HasForeignKey(d => d.WorkOrderServicesId)
                    .HasConstraintName("FK_Area_Orientation_Service_Order_Services");
            });

            modelBuilder.Entity<AreasCoverageConsultant>(entity =>
            {
                entity.ToTable("Areas_Coverage_Consultant");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Country).HasColumnName("country");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.CurrentAddress)
                    .HasColumnName("current_address")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PrimaryCity).HasColumnName("primary_city");

                entity.Property(e => e.SupplierPartnerProfileConsultant).HasColumnName("supplier_partner_profile_consultant");

                entity.Property(e => e.Type).HasColumnName("type");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.ZipCode)
                    .HasColumnName("zip_code")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CountryNavigation)
                    .WithMany(p => p.AreasCoverageConsultants)
                    .HasForeignKey(d => d.Country)
                    .HasConstraintName("FK_Areas_Coverage_Consultant_Cat_Country");

                entity.HasOne(d => d.PrimaryCityNavigation)
                    .WithMany(p => p.AreasCoverageConsultants)
                    .HasForeignKey(d => d.PrimaryCity)
                    .HasConstraintName("FK_Areas_Coverage_Consultant_Cat_State");

                entity.HasOne(d => d.SupplierPartnerProfileConsultantNavigation)
                    .WithMany(p => p.AreasCoverageConsultants)
                    .HasForeignKey(d => d.SupplierPartnerProfileConsultant)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Areas_Coverage_Consultant_Supplier_Partner_Profile_Consultant");

                entity.HasOne(d => d.TypeNavigation)
                    .WithMany(p => p.AreasCoverageConsultants)
                    .HasForeignKey(d => d.Type)
                    .HasConstraintName("FK_Areas_Coverage_Consultant_Cat_AreaCoverageType");
            });

            modelBuilder.Entity<AreasCoverageService>(entity =>
            {
                entity.ToTable("Areas_Coverage_Service");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Country).HasColumnName("country");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.CurrentAddress)
                    .HasColumnName("current_address")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PrimaryCity).HasColumnName("primary_city");

                entity.Property(e => e.SupplierPartnerProfileService).HasColumnName("supplier_partner_profile_service");

                entity.Property(e => e.Type).HasColumnName("type");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.ZipCode)
                    .HasColumnName("zip_code")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CountryNavigation)
                    .WithMany(p => p.AreasCoverageServices)
                    .HasForeignKey(d => d.Country)
                    .HasConstraintName("FK_Areas_Coverage_Service_Cat_Country");

                entity.HasOne(d => d.PrimaryCityNavigation)
                    .WithMany(p => p.AreasCoverageServices)
                    .HasForeignKey(d => d.PrimaryCity)
                    .HasConstraintName("FK_Areas_Coverage_Service_Cat_State");

                entity.HasOne(d => d.SupplierPartnerProfileServiceNavigation)
                    .WithMany(p => p.AreasCoverageServices)
                    .HasForeignKey(d => d.SupplierPartnerProfileService)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Areas_Coverage_Service_Supplier_Partner_Profile_Service");

                entity.HasOne(d => d.TypeNavigation)
                    .WithMany(p => p.AreasCoverageServices)
                    .HasForeignKey(d => d.Type)
                    .HasConstraintName("FK_Areas_Coverage_Service_Cat_AreaCoverageType");
            });

            modelBuilder.Entity<AssigmentInformation>(entity =>
            {
                entity.ToTable("assigment_information");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CurrencyCurrentGrossSalary).HasColumnName("currency_current_gross_salary");

                entity.Property(e => e.CurrencyNewGrossSalary).HasColumnName("currency_new_gross_salary");

                entity.Property(e => e.CurrentGrossSalary)
                    .HasColumnName("current_gross_salary")
                    .HasMaxLength(50);

                entity.Property(e => e.CurrentJobPositionTitle)
                    .HasColumnName("current_job_position_title")
                    .HasMaxLength(50);

                entity.Property(e => e.DocumentType)
                    .HasColumnName("document_type")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EmploymentFrom)
                    .HasColumnName("employment_from")
                    .HasColumnType("date");

                entity.Property(e => e.EmploymentTo)
                    .HasColumnName("employment_to")
                    .HasColumnType("date");

                entity.Property(e => e.EstimatedStartDate)
                    .HasColumnName("estimated_start_date")
                    .HasColumnType("date");

                entity.Property(e => e.HiringManager)
                    .HasColumnName("hiring_manager")
                    .HasMaxLength(50);

                entity.Property(e => e.HiringManagerEmail)
                    .HasColumnName("hiring_manager_email")
                    .HasMaxLength(50);

                entity.Property(e => e.HiringManagerPhone)
                    .HasColumnName("hiring_manager_phone")
                    .HasMaxLength(50);

                entity.Property(e => e.LegalNameHomeCountry)
                    .HasColumnName("legal_name_home_country")
                    .HasMaxLength(50);

                entity.Property(e => e.LegalNameHostCountry)
                    .HasColumnName("legal_name_host_country")
                    .HasMaxLength(50);

                entity.Property(e => e.LegalRepresentative)
                    .HasColumnName("legal_representative")
                    .HasMaxLength(50);

                entity.Property(e => e.LenghtAssigment)
                    .HasColumnName("lenght_assigment")
                    .HasMaxLength(50);

                entity.Property(e => e.LicenseDriver)
                    .HasColumnName("license_driver")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LocationHome)
                    .HasColumnName("location_home")
                    .HasMaxLength(200);

                entity.Property(e => e.LocationHost)
                    .HasColumnName("location_host")
                    .HasMaxLength(200);

                entity.Property(e => e.NewGrossSalary)
                    .HasColumnName("new_gross_salary")
                    .HasMaxLength(50);

                entity.Property(e => e.NewJobPositionTitle)
                    .HasColumnName("new_job_position_title")
                    .HasMaxLength(50);

                entity.Property(e => e.NewJobResponsibilitie)
                    .HasColumnName("new_job_responsibilitie")
                    .HasMaxLength(50);

                entity.Property(e => e.PayrollLocation)
                    .HasColumnName("payroll_location")
                    .HasMaxLength(50);

                entity.Property(e => e.PayrollLocationSecond)
                    .HasColumnName("payroll_location_second")
                    .HasMaxLength(50);

                entity.Property(e => e.SpecificAtention)
                    .HasColumnName("specific_atention")
                    .HasMaxLength(200);

                entity.Property(e => e.SplitPayrollApplicable).HasColumnName("split_payroll_applicable");

                entity.HasOne(d => d.CurrencyCurrentGrossSalaryNavigation)
                    .WithMany(p => p.AssigmentInformationCurrencyCurrentGrossSalaryNavigations)
                    .HasForeignKey(d => d.CurrencyCurrentGrossSalary)
                    .HasConstraintName("FK_assigment_information_Cat_currency");

                entity.HasOne(d => d.CurrencyNewGrossSalaryNavigation)
                    .WithMany(p => p.AssigmentInformationCurrencyNewGrossSalaryNavigations)
                    .HasForeignKey(d => d.CurrencyNewGrossSalary)
                    .HasConstraintName("FK_assigment_information_Cat_currency1");
            });

            modelBuilder.Entity<AssignedPhoto>(entity =>
            {
                entity.ToTable("Assigned_Photo");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.PhotoName)
                    .HasColumnName("photo_name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PhotoPath)
                    .HasColumnName("photo_path")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReportAnEventId).HasColumnName("report_an_event_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.ReportAnEvent)
                    .WithMany(p => p.AssignedPhotos)
                    .HasForeignKey(d => d.ReportAnEventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Assigned_Photo_Report_An_Event");
            });

            modelBuilder.Entity<AssignedServiceSuplier>(entity =>
            {
                entity.ToTable("Assigned_Service_Suplier");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ImmigrationSupplierPartnerId).HasColumnName("immigration_supplier_partner_id");

                entity.Property(e => e.RelocationSupplierPartnerId).HasColumnName("relocation_supplier_partner_id");

                entity.Property(e => e.ServiceOrderServicesId).HasColumnName("service_order_services_id");

                entity.HasOne(d => d.ImmigrationSupplierPartner)
                    .WithMany(p => p.AssignedServiceSupliers)
                    .HasForeignKey(d => d.ImmigrationSupplierPartnerId)
                    .HasConstraintName("FK_Assigned_Service_Suplier_immigration_supplier_partner");

                entity.HasOne(d => d.RelocationSupplierPartner)
                    .WithMany(p => p.AssignedServiceSupliers)
                    .HasForeignKey(d => d.RelocationSupplierPartnerId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Assigned_Service_Suplier_relocation_supplier_partner1");

                entity.HasOne(d => d.ServiceOrderServices)
                    .WithMany(p => p.AssignedServiceSupliers)
                    .HasForeignKey(d => d.ServiceOrderServicesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Assigned_Service_Suplier_Service_Order_Services");
            });

            modelBuilder.Entity<AssignedTeam>(entity =>
            {
                entity.HasKey(e => new { e.AssignedBy, e.AssignedTo });

                entity.ToTable("Assigned_Team");

                entity.Property(e => e.AssignedBy).HasColumnName("assigned_by");

                entity.Property(e => e.AssignedTo).HasColumnName("assigned_to");

                entity.HasOne(d => d.AssignedByNavigation)
                    .WithMany(p => p.AssignedTeamAssignedByNavigations)
                    .HasForeignKey(d => d.AssignedBy)
                    .HasConstraintName("FK_Assigned_Team_Profile_User");

                entity.HasOne(d => d.AssignedToNavigation)
                    .WithMany(p => p.AssignedTeamAssignedToNavigations)
                    .HasForeignKey(d => d.AssignedTo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Assigned_Team_Profile_User1");
            });

            modelBuilder.Entity<AssigneeFeedback>(entity =>
            {
                entity.ToTable("Assignee_Feedback");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AssigneeId).HasColumnName("assignee_id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Feedback)
                    .HasColumnName("feedback")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Rating).HasColumnName("rating");

                entity.Property(e => e.ServiceOrderServicesId).HasColumnName("service_order_services_id");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.Assignee)
                    .WithMany(p => p.AssigneeFeedbacks)
                    .HasForeignKey(d => d.AssigneeId)
                    .HasConstraintName("FK_Assignee_Feedback_assignee_information");

                entity.HasOne(d => d.ServiceOrderServices)
                    .WithMany(p => p.AssigneeFeedbacks)
                    .HasForeignKey(d => d.ServiceOrderServicesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Assignee_Feedback_Service_Order_Services");
            });

            modelBuilder.Entity<AssigneeInformation>(entity =>
            {
                entity.ToTable("assignee_information");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Age).HasColumnName("age");

                entity.Property(e => e.AssigneeName)
                    .HasColumnName("assignee_name")
                    .HasMaxLength(50);

                entity.Property(e => e.AssignmentDuration).HasColumnName("assignment_duration");

                entity.Property(e => e.AssignmentDurationTime).HasColumnName("assignment_duration_time");

                entity.Property(e => e.Birth)
                    .HasColumnName("birth")
                    .HasColumnType("date");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.CurrentPosition)
                    .HasColumnName("current_position")
                    .HasMaxLength(50);

                entity.Property(e => e.DependentInformation).HasColumnName("dependent_information");

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(50);

                entity.Property(e => e.FinalMove)
                    .HasColumnName("final_move")
                    .HasColumnType("date");

                entity.Property(e => e.HomeCityId).HasColumnName("home_city_id");

                entity.Property(e => e.HomeCountryId).HasColumnName("home_country_id");

                entity.Property(e => e.HostCityId).HasColumnName("host_city_id");

                entity.Property(e => e.HostCountry).HasColumnName("host_country");

                entity.Property(e => e.InitialArrival)
                    .HasColumnName("initial_arrival")
                    .HasColumnType("date");

                entity.Property(e => e.MaritalStatusId).HasColumnName("marital_status_id");

                entity.Property(e => e.MobilePhone)
                    .HasColumnName("mobile_phone")
                    .HasMaxLength(50);

                entity.Property(e => e.NationalityId).HasColumnName("nationality_id");

                entity.Property(e => e.NewPosition)
                    .HasColumnName("new_position")
                    .HasMaxLength(50);

                entity.Property(e => e.Pets).HasColumnName("pets");

                entity.Property(e => e.Photo)
                    .HasColumnName("photo")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.PolicyTypeId).HasColumnName("policy_type_id");

                entity.Property(e => e.ServiceRecordId).HasColumnName("service_record_id");

                entity.Property(e => e.SexId).HasColumnName("sex_id");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.Property(e => e.WorkPhone)
                    .HasColumnName("work_phone")
                    .HasMaxLength(50);

                entity.HasOne(d => d.AssignmentDurationTimeNavigation)
                    .WithMany(p => p.AssigneeInformations)
                    .HasForeignKey(d => d.AssignmentDurationTime)
                    .HasConstraintName("FK_assignee_information_Cat_Duration");

                entity.HasOne(d => d.HomeCity)
                    .WithMany(p => p.AssigneeInformationHomeCities)
                    .HasForeignKey(d => d.HomeCityId)
                    .HasConstraintName("FK_assignee_information_Cat_State");

                entity.HasOne(d => d.HomeCountry)
                    .WithMany(p => p.AssigneeInformationHomeCountries)
                    .HasForeignKey(d => d.HomeCountryId)
                    .HasConstraintName("FK_assignee_information_Cat_Country");

                entity.HasOne(d => d.HostCity)
                    .WithMany(p => p.AssigneeInformationHostCities)
                    .HasForeignKey(d => d.HostCityId)
                    .HasConstraintName("FK_assignee_information_Cat_State1");

                entity.HasOne(d => d.HostCountryNavigation)
                    .WithMany(p => p.AssigneeInformationHostCountryNavigations)
                    .HasForeignKey(d => d.HostCountry)
                    .HasConstraintName("FK_assignee_information_Cat_Country1");

                entity.HasOne(d => d.MaritalStatus)
                    .WithMany(p => p.AssigneeInformations)
                    .HasForeignKey(d => d.MaritalStatusId)
                    .HasConstraintName("FK_assignee_information_Cat_Maritalstatus");

                entity.HasOne(d => d.Nationality)
                    .WithMany(p => p.AssigneeInformations)
                    .HasForeignKey(d => d.NationalityId)
                    .HasConstraintName("FK_assignee_information_Nationality");

                entity.HasOne(d => d.ServiceRecord)
                    .WithMany(p => p.AssigneeInformations)
                    .HasForeignKey(d => d.ServiceRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_assignee_information_Service_Record");

                entity.HasOne(d => d.Sex)
                    .WithMany(p => p.AssigneeInformations)
                    .HasForeignKey(d => d.SexId)
                    .HasConstraintName("FK_assignee_information_Cat_Sex");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AssigneeInformations)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_assignee_information_Users");
            });

            modelBuilder.Entity<Attendee>(entity =>
            {
                entity.ToTable("Attendee");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyReport).HasColumnName("property_report");

                entity.Property(e => e.Relationship).HasColumnName("relationship");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.PropertyReportNavigation)
                    .WithMany(p => p.Attendees)
                    .HasForeignKey(d => d.PropertyReport)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Attendee_Property_Report");

                entity.HasOne(d => d.RelationshipNavigation)
                    .WithMany(p => p.Attendees)
                    .HasForeignKey(d => d.Relationship)
                    .HasConstraintName("FK_Attendee_Cat_Relationship");
            });

            modelBuilder.Entity<BundledService>(entity =>
            {
                entity.ToTable("Bundled_Service");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Acceptance)
                    .HasColumnName("acceptance")
                    .HasColumnType("date");

                entity.Property(e => e.Autho)
                    .HasColumnName("autho")
                    .HasColumnType("date");

                entity.Property(e => e.BillingHour)
                    .HasColumnName("billing_hour")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BundledServiceOrderId).HasColumnName("bundled_service_order_id");

                entity.Property(e => e.CategoryId).HasColumnName("category_id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DeliveredTo).HasColumnName("delivered_to");

                entity.Property(e => e.DeliveringIn).HasColumnName("delivering_in");

                entity.Property(e => e.InvoiceSupplier).HasColumnName("invoice_supplier");

                entity.Property(e => e.Location)
                    .HasColumnName("location")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceId).HasColumnName("service_id");

                entity.Property(e => e.ServiceNumber)
                    .HasColumnName("service_number")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceTypeId).HasColumnName("service_type_id");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.WorkServicesId).HasColumnName("work_services_id");

                entity.HasOne(d => d.BundledServiceOrder)
                    .WithMany(p => p.BundledServices)
                    .HasForeignKey(d => d.BundledServiceOrderId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Bundled_Service_Bundled_Services_Work_Order");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.BundledServices)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK_Bundled_Service_Cat_Category");

                entity.HasOne(d => d.DeliveredToNavigation)
                    .WithMany(p => p.BundledServices)
                    .HasForeignKey(d => d.DeliveredTo)
                    .HasConstraintName("FK_Bundled_Service_dependent_information");

                entity.HasOne(d => d.DeliveringInNavigation)
                    .WithMany(p => p.BundledServices)
                    .HasForeignKey(d => d.DeliveringIn)
                    .HasConstraintName("FK_Bundled_Service_Cat_Country");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.BundledServices)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_Bundled_Service_Cat_Service");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.BundledServices)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .HasConstraintName("FK_Bundled_Service_Cat_Type_Service");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.BundledServices)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_Bundled_Service_Service_Order_Services_Status");

                entity.HasOne(d => d.WorkServices)
                    .WithMany(p => p.BundledServices)
                    .HasForeignKey(d => d.WorkServicesId)
                    .HasConstraintName("FK_Bundled_Service_Work_Order_Services");
            });

            modelBuilder.Entity<BundledServicesWorkOrder>(entity =>
            {
                entity.ToTable("Bundled_Services_Work_Order");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Package).HasColumnName("package");

                entity.Property(e => e.ProjectedFee)
                    .HasColumnName("projected_fee")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalTime)
                    .HasColumnName("total_time")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.WorkOrderId).HasColumnName("work_order_id");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.BundledServicesWorkOrders)
                    .HasForeignKey(d => d.WorkOrderId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Bundled_Services_Work_Order_work_order");
            });

            modelBuilder.Entity<CalendarConsultantContactsConsultant>(entity =>
            {
                entity.ToTable("Calendar_Consultant_Contacts_Consultant");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Available).HasColumnName("available");

                entity.Property(e => e.ConsultantContactsConsultant).HasColumnName("consultant_contacts_consultant");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Date)
                    .HasColumnName("date")
                    .HasColumnType("date");

                entity.Property(e => e.Day).HasColumnName("day");

                entity.Property(e => e.HourEnd)
                    .HasColumnName("hour_end")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HourStart)
                    .HasColumnName("hour_start")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.ConsultantContactsConsultantNavigation)
                    .WithMany(p => p.CalendarConsultantContactsConsultants)
                    .HasForeignKey(d => d.ConsultantContactsConsultant)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Calendar_Consultant_Contacts_Consultant_Consultant_Contacts_Consultant");

                entity.HasOne(d => d.DayNavigation)
                    .WithMany(p => p.CalendarConsultantContactsConsultants)
                    .HasForeignKey(d => d.Day)
                    .HasConstraintName("FK_Calendar_Consultant_Contacts_Consultant_Cat_Days");
            });

            modelBuilder.Entity<Call>(entity =>
            {
                entity.ToTable("Call");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Calle).HasColumnName("calle");

                entity.Property(e => e.Caller).HasColumnName("caller");

                entity.Property(e => e.Comments)
                    .IsRequired()
                    .HasColumnName("comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Date)
                    .HasColumnName("date")
                    .HasColumnType("date");

                entity.Property(e => e.Duration).HasColumnName("duration");

                entity.Property(e => e.Escalate).HasColumnName("escalate");

                entity.Property(e => e.ServiceId).HasColumnName("service_id");

                entity.Property(e => e.ServiceLineId).HasColumnName("service_line_id");

                entity.Property(e => e.ServiceRecordId).HasColumnName("service_record_id");

                entity.Property(e => e.Time)
                    .IsRequired()
                    .HasColumnName("time")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WelcomeCall).HasColumnName("welcome_call");

                entity.Property(e => e.WorkOrderId).HasColumnName("work_order_id");

                entity.HasOne(d => d.CalleNavigation)
                    .WithMany(p => p.CallCalleNavigations)
                    .HasForeignKey(d => d.Calle)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Call_Users1");

                entity.HasOne(d => d.CallerNavigation)
                    .WithMany(p => p.CallCallerNavigations)
                    .HasForeignKey(d => d.Caller)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Call_Users");

                entity.HasOne(d => d.DurationNavigation)
                    .WithMany(p => p.Calls)
                    .HasForeignKey(d => d.Duration)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Call_Cat_Duration");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.Calls)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_Call_Service_Order_Services");

                entity.HasOne(d => d.ServiceLine)
                    .WithMany(p => p.Calls)
                    .HasForeignKey(d => d.ServiceLineId)
                    .HasConstraintName("FK_Call_Cat_Service_Line");

                entity.HasOne(d => d.ServiceRecord)
                    .WithMany(p => p.Calls)
                    .HasForeignKey(d => d.ServiceRecordId)
                    .HasConstraintName("FK_Call_Service_Record");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.Calls)
                    .HasForeignKey(d => d.WorkOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Call_work_order");
            });

            modelBuilder.Entity<CallAssistant>(entity =>
            {
                entity.HasKey(e => new { e.CallId, e.Assistant });

                entity.ToTable("Call_Assistants");

                entity.Property(e => e.CallId).HasColumnName("call_id");

                entity.Property(e => e.Assistant).HasColumnName("assistant");

                entity.HasOne(d => d.AssistantNavigation)
                    .WithMany(p => p.CallAssistants)
                    .HasForeignKey(d => d.Assistant)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Call_Assistants_Users");

                entity.HasOne(d => d.Call)
                    .WithMany(p => p.CallAssistants)
                    .HasForeignKey(d => d.CallId)
                    .HasConstraintName("FK_Call_Assistants_Call");
            });

            modelBuilder.Entity<Campus>(entity =>
            {
                entity.ToTable("Campus");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Address)
                    .HasColumnName("address")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.AreaCoverageId).HasColumnName("area_coverage_id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Latitude)
                    .HasColumnName("latitude")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Longitude)
                    .HasColumnName("longitude")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.AreaCoverage)
                    .WithMany(p => p.Campuses)
                    .HasForeignKey(d => d.AreaCoverageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Campus_Areas_Coverage_Service");
            });

            modelBuilder.Entity<CatActionType>(entity =>
            {
                entity.ToTable("Cat_ActionType");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ActionType)
                    .HasColumnName("action_type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatAmenitie>(entity =>
            {
                entity.ToTable("Cat_amenitie");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Amenitie)
                    .IsRequired()
                    .HasColumnName("amenitie")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatApplicant>(entity =>
            {
                entity.ToTable("Cat_Applicant");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Applicant)
                    .IsRequired()
                    .HasColumnName("applicant")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatAreaCoverageType>(entity =>
            {
                entity.ToTable("Cat_AreaCoverageType");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatAssignedService>(entity =>
            {
                entity.ToTable("Cat_AssignedService");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AssignedService)
                    .HasColumnName("assigned_service")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatAssitanceWith>(entity =>
            {
                entity.ToTable("Cat_Assitance_With");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Assistance)
                    .HasColumnName("assistance")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CatAuthorizedBy>(entity =>
            {
                entity.ToTable("Cat_AuthorizedBy");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AuthorizedBy)
                    .HasColumnName("authorizedBy")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CatBankAccountType>(entity =>
            {
                entity.ToTable("Cat_BankAccountType");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountType)
                    .HasColumnName("account_type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatBenefit>(entity =>
            {
                entity.ToTable("Cat_Benefit");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Benefit)
                    .HasColumnName("benefit")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<CatBillType>(entity =>
            {
                entity.ToTable("Cat_Bill_Type");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatBreed>(entity =>
            {
                entity.ToTable("Cat_Breed");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .ValueGeneratedNever();

                entity.Property(e => e.Breed)
                    .IsRequired()
                    .HasColumnName("breed")
                    .HasMaxLength(50);

                entity.Property(e => e.PetTypeId).HasColumnName("pet_type_id");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.HasOne(d => d.PetType)
                    .WithMany(p => p.CatBreeds)
                    .HasForeignKey(d => d.PetTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cat_Breed_Cat_PetType");
            });

            modelBuilder.Entity<CatCatalog>(entity =>
            {
                entity.ToTable("Cat_Catalog");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Catalog)
                    .HasColumnName("catalog")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Type).HasColumnName("type");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.TypeNavigation)
                    .WithMany(p => p.CatCatalogs)
                    .HasForeignKey(d => d.Type)
                    .HasConstraintName("FK_Cat_Catalog_Cat_TypeCatalog");
            });

            modelBuilder.Entity<CatCategory>(entity =>
            {
                entity.ToTable("Cat_Category");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Category)
                    .HasColumnName("category")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SericeLineId).HasColumnName("serice_line_id");

                entity.HasOne(d => d.SericeLine)
                    .WithMany(p => p.CatCategories)
                    .HasForeignKey(d => d.SericeLineId)
                    .HasConstraintName("FK_Cat_Category_Cat_Service_Line");
            });

            modelBuilder.Entity<CatCity>(entity =>
            {
                entity.ToTable("Cat_City");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasColumnName("city")
                    .HasMaxLength(50);

                entity.Property(e => e.CreateDate)
                    .HasColumnName("create_date")
                    .HasColumnType("date");

                entity.Property(e => e.IdCountry).HasColumnName("id_country");

                entity.Property(e => e.IdTimeZone).HasColumnName("id_time_zone");

                entity.HasOne(d => d.IdCountryNavigation)
                    .WithMany(p => p.CatCities)
                    .HasForeignKey(d => d.IdCountry)
                    .HasConstraintName("FK_Cat_State_Cat_Country");

                entity.HasOne(d => d.IdTimeZoneNavigation)
                    .WithMany(p => p.CatCities)
                    .HasForeignKey(d => d.IdTimeZone)
                    .HasConstraintName("FK_Cat_City_Cat_Time_Zone");
            });

            modelBuilder.Entity<CatClient>(entity =>
            {
                entity.ToTable("Cat_Client");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Client)
                    .IsRequired()
                    .HasColumnName("client")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CatColumnsReport>(entity =>
            {
                entity.ToTable("Cat_ColumnsReport");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Type).HasColumnName("type");
            });

            modelBuilder.Entity<CatConsularService>(entity =>
            {
                entity.ToTable("Cat_Consular_Service");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Service)
                    .IsRequired()
                    .HasColumnName("service")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatContactType>(entity =>
            {
                entity.ToTable("Cat_ContactType");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatContentType>(entity =>
            {
                entity.ToTable("Cat_Content_Type");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatContractType>(entity =>
            {
                entity.ToTable("Cat_contract_type");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ContractType)
                    .IsRequired()
                    .HasColumnName("contract_type")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatCoordinator>(entity =>
            {
                entity.ToTable("Cat_Coordinator");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Coordinator)
                    .HasColumnName("coordinator")
                    .HasMaxLength(50);

                entity.Property(e => e.CoordinatorTypeId).HasColumnName("coordinator_type_id");

                entity.HasOne(d => d.CoordinatorType)
                    .WithMany(p => p.CatCoordinators)
                    .HasForeignKey(d => d.CoordinatorTypeId)
                    .HasConstraintName("FK_Cat_Coordinator_Cat_CoordinatorType");
            });

            modelBuilder.Entity<CatCoordinatorType>(entity =>
            {
                entity.ToTable("Cat_CoordinatorType");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CoordinatorType)
                    .HasColumnName("coordinator_type")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CatCostType>(entity =>
            {
                entity.ToTable("Cat_CostType");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CostType)
                    .HasColumnName("cost_type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatCountry>(entity =>
            {
                entity.ToTable("Cat_Country");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(450)
                    .IsUnicode(false);

                entity.Property(e => e.Flag)
                    .HasColumnName("flag")
                    .HasMaxLength(512);

                entity.Property(e => e.IdCurrency).HasColumnName("id_currency");

                entity.Property(e => e.IdLenguage).HasColumnName("id_lenguage");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(50);

                entity.Property(e => e.Nationality)
                    .HasColumnName("nationality")
                    .HasMaxLength(512);

                entity.Property(e => e.Phonecode)
                    .IsRequired()
                    .HasColumnName("phonecode")
                    .HasMaxLength(50);

                entity.Property(e => e.Sortname)
                    .IsRequired()
                    .HasColumnName("sortname")
                    .HasMaxLength(50);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.IdCurrencyNavigation)
                    .WithMany(p => p.CatCountries)
                    .HasForeignKey(d => d.IdCurrency)
                    .HasConstraintName("FK_Cat_Country_Cat_currency");

                entity.HasOne(d => d.IdLenguageNavigation)
                    .WithMany(p => p.CatCountries)
                    .HasForeignKey(d => d.IdLenguage)
                    .HasConstraintName("FK_Cat_Country_Cat_Languages");
            });

            modelBuilder.Entity<CatCreditCard>(entity =>
            {
                entity.ToTable("Cat_CreditCards");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreditCard)
                    .HasColumnName("credit_card")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatCreditTerm>(entity =>
            {
                entity.ToTable("Cat_Credit_Terms");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreditTerm)
                    .HasColumnName("credit_term")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatCurrency>(entity =>
            {
                entity.ToTable("Cat_currency");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Abbreviation)
                    .HasColumnName("abbreviation")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasColumnName("currency")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Symbol)
                    .HasColumnName("symbol")
                    .HasMaxLength(50);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatDay>(entity =>
            {
                entity.ToTable("Cat_Days");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Day)
                    .HasColumnName("day")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatDeliviredIn>(entity =>
            {
                entity.ToTable("Cat_Delivired_In");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ServiceType)
                    .HasColumnName("service_type")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CatDepartment>(entity =>
            {
                entity.ToTable("Cat_Department");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Department)
                    .HasColumnName("department")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatDocumentStatus>(entity =>
            {
                entity.ToTable("Cat_DocumentStatus");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatDocumentType>(entity =>
            {
                entity.ToTable("Cat_DocumentType");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentType)
                    .HasColumnName("document_type")
                    .HasMaxLength(50);

                entity.Property(e => e.Type).HasColumnName("type");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatDuration>(entity =>
            {
                entity.ToTable("Cat_Duration");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Duration)
                    .HasColumnName("duration")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Recurrence)
                    .HasColumnName("recurrence")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("update_date")
                    .HasColumnType("date");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");
            });

            modelBuilder.Entity<CatElement>(entity =>
            {
                entity.ToTable("Cat_Element");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Element)
                    .HasColumnName("element")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Type).HasColumnName("type");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatEmailSend>(entity =>
            {
                entity.ToTable("Cat_Email_Send");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("email")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatEvent>(entity =>
            {
                entity.ToTable("Cat_Event");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Event)
                    .HasColumnName("event")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CatExpense>(entity =>
            {
                entity.ToTable("Cat_Expense");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Expense)
                    .HasColumnName("expense")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatFilterReport>(entity =>
            {
                entity.ToTable("Cat_FilterReport");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Type).HasColumnName("type");
            });

            modelBuilder.Entity<CatGradeSchooling>(entity =>
            {
                entity.ToTable("Cat_GradeSchooling");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Grade)
                    .HasColumnName("grade")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatHighestLevelEducation>(entity =>
            {
                entity.ToTable("Cat_HighestLevelEducation");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.HighestLevelEducation)
                    .HasColumnName("highest_level_education")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CatIndustry>(entity =>
            {
                entity.ToTable("Cat_Industry");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Industry)
                    .HasColumnName("industry")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatInvoiceType>(entity =>
            {
                entity.ToTable("Cat_InvoiceType");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatLanguage>(entity =>
            {
                entity.ToTable("Cat_Languages");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Abbreviation)
                    .HasColumnName("abbreviation")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(50);

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatLeaseGuarantee>(entity =>
            {
                entity.ToTable("Cat_LeaseGuarantee");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Guarantee)
                    .HasColumnName("guarantee")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatLeaseTemplate>(entity =>
            {
                entity.ToTable("Cat_LeaseTemplate");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Template)
                    .HasColumnName("template")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatLibrary>(entity =>
            {
                entity.ToTable("Cat_Library");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Library)
                    .HasColumnName("library")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CatLocationType>(entity =>
            {
                entity.ToTable("Cat_LocationType");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.LocationType)
                    .HasColumnName("location_type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatMaritalstatus>(entity =>
            {
                entity.ToTable("Cat_Maritalstatus");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CatMenu>(entity =>
            {
                entity.ToTable("Cat_Menu");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CatMetric>(entity =>
            {
                entity.ToTable("Cat_metric");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Metric)
                    .IsRequired()
                    .HasColumnName("metric")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatNotification>(entity =>
            {
                entity.ToTable("Cat_Notification");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Notification)
                    .HasColumnName("notification")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatNotificationSystemType>(entity =>
            {
                entity.ToTable("Cat_NotificationSystemType");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatNotificationType>(entity =>
            {
                entity.ToTable("Cat_NotificationType");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Notification)
                    .HasColumnName("notification")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CatOffice>(entity =>
            {
                entity.ToTable("Cat_Office");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Address)
                    .HasColumnName("address")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.City).HasColumnName("city");

                entity.Property(e => e.Country).HasColumnName("country");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Currency).HasColumnName("currency");

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Image)
                    .HasColumnName("image")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Office)
                    .HasColumnName("office")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .HasColumnName("phone")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.Zip)
                    .HasColumnName("zip")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CityNavigation)
                    .WithMany(p => p.CatOffices)
                    .HasForeignKey(d => d.City)
                    .HasConstraintName("FK_Cat_Office_Cat_State");

                entity.HasOne(d => d.CountryNavigation)
                    .WithMany(p => p.CatOffices)
                    .HasForeignKey(d => d.Country)
                    .HasConstraintName("FK_Cat_Office_Cat_Country");

                entity.HasOne(d => d.CurrencyNavigation)
                    .WithMany(p => p.CatOffices)
                    .HasForeignKey(d => d.Currency)
                    .HasConstraintName("FK_Cat_Office_Cat_currency");
            });

            modelBuilder.Entity<CatParticipantStatus>(entity =>
            {
                entity.ToTable("Cat_Participant_Status");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatPartner>(entity =>
            {
                entity.ToTable("Cat_Partner");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Partner)
                    .IsRequired()
                    .HasColumnName("partner")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CatPaymentRecurrence>(entity =>
            {
                entity.ToTable("Cat_Payment_Recurrence");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CatPaymentType>(entity =>
            {
                entity.ToTable("Cat_PaymentType");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PaymentType)
                    .HasColumnName("payment_type")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatPaymentTypeStatus>(entity =>
            {
                entity.ToTable("Cat_PaymentTypeStatus");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CatPaymetMethod>(entity =>
            {
                entity.ToTable("Cat_PaymetMethods");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.PaymentMethods)
                    .HasColumnName("payment_methods")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatPetType>(entity =>
            {
                entity.ToTable("Cat_PetType");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PetType)
                    .IsRequired()
                    .HasColumnName("pet_type")
                    .HasMaxLength(50);

                entity.Property(e => e.Status).HasColumnName("status");
            });

            modelBuilder.Entity<CatPolicyType>(entity =>
            {
                entity.ToTable("Cat_PolicyType");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PolicyType)
                    .HasColumnName("Policy_Type")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CatPriceTermsDeal>(entity =>
            {
                entity.ToTable("Cat_Price_Terms_Deal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Price)
                    .IsRequired()
                    .HasColumnName("price")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatPrivacy>(entity =>
            {
                entity.ToTable("Cat_Privacy");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Privacy)
                    .HasColumnName("privacy")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatProficiency>(entity =>
            {
                entity.ToTable("Cat_Proficiency");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Proficiency).HasMaxLength(50);
            });

            modelBuilder.Entity<CatProperty>(entity =>
            {
                entity.ToTable("Cat_Property");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Property)
                    .HasColumnName("property")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatPropertyInspection>(entity =>
            {
                entity.ToTable("Cat_PropertyInspection");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.PropertyInspection)
                    .HasColumnName("property_inspection")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CatPropertySection>(entity =>
            {
                entity.ToTable("Cat_PropertySection");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.PropertySection)
                    .HasColumnName("property_section")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatPropertyType>(entity =>
            {
                entity.ToTable("Cat_property_type");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PropertyType)
                    .IsRequired()
                    .HasColumnName("property_type")
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatPropertyTypeHousing>(entity =>
            {
                entity.ToTable("Cat_PropertyTypeHousing");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.PropertyType)
                    .HasColumnName("property_type")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CatPurchaseStatus>(entity =>
            {
                entity.ToTable("Cat_PurchaseStatus");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<CatRelationship>(entity =>
            {
                entity.ToTable("Cat_Relationship");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Relationship)
                    .IsRequired()
                    .HasColumnName("relationship")
                    .HasMaxLength(50);

                entity.Property(e => e.Status).HasColumnName("status");
            });

            modelBuilder.Entity<CatRepairType>(entity =>
            {
                entity.ToTable("Cat_RepairType");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.RepairType)
                    .HasColumnName("repair_type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatReport>(entity =>
            {
                entity.ToTable("Cat_Report");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Report)
                    .HasColumnName("report")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatReportType>(entity =>
            {
                entity.ToTable("Cat_ReportType");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CatRequestPaymentStatus>(entity =>
            {
                entity.ToTable("Cat_RequestPaymentStatus");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CatRequestType>(entity =>
            {
                entity.ToTable("Cat_RequestType");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.RequestType)
                    .HasColumnName("request_type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CatReservationType>(entity =>
            {
                entity.ToTable("Cat_ReservationType");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.ReservationType)
                    .HasColumnName("reservation_type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatResponsablePayment>(entity =>
            {
                entity.ToTable("Cat_ResponsablePayment");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Responsable)
                    .HasColumnName("responsable")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CatRole>(entity =>
            {
                entity.ToTable("Cat_Role");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Role)
                    .IsRequired()
                    .HasColumnName("role")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CatSchoolStatus>(entity =>
            {
                entity.ToTable("Cat_SchoolStatus");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatSection>(entity =>
            {
                entity.ToTable("Cat_Section");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SubMenu).HasColumnName("sub_menu");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.SubMenuNavigation)
                    .WithMany(p => p.CatSections)
                    .HasForeignKey(d => d.SubMenu)
                    .HasConstraintName("FK_Cat_Section_Cat_Sub_Menu");
            });

            modelBuilder.Entity<CatService>(entity =>
            {
                entity.ToTable("Cat_Service");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CategoryId).HasColumnName("category_id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Service)
                    .HasColumnName("service")
                    .HasMaxLength(50);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.CatServices)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK_Cat_Service_Cat_Category");
            });

            modelBuilder.Entity<CatServiceLine>(entity =>
            {
                entity.ToTable("Cat_Service_Line");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ServiceLine)
                    .IsRequired()
                    .HasColumnName("service_line")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CatServiceScoreAward>(entity =>
            {
                entity.ToTable("cat_service_score_award");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasColumnName("type")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatSeverity>(entity =>
            {
                entity.ToTable("Cat_Severity");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Severity)
                    .HasColumnName("severity")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatSex>(entity =>
            {
                entity.ToTable("Cat_Sex");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Sex).HasMaxLength(50);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CatSize>(entity =>
            {
                entity.ToTable("Cat_Size");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .ValueGeneratedNever();

                entity.Property(e => e.Size)
                    .IsRequired()
                    .HasColumnName("size")
                    .HasMaxLength(50);

                entity.Property(e => e.Status).HasColumnName("status");
            });

            modelBuilder.Entity<CatStatus>(entity =>
            {
                entity.ToTable("Cat_Status");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasColumnName("status")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CatStatusHomePurchase>(entity =>
            {
                entity.ToTable("Cat_Status_Home_Purchase");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatStatusHousing>(entity =>
            {
                entity.ToTable("Cat_StatusHousing");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CatStatusInvoice>(entity =>
            {
                entity.ToTable("Cat_StatusInvoice");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatStatusPropertySection>(entity =>
            {
                entity.ToTable("Cat_StatusPropertySection");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatStatusReportAnEvent>(entity =>
            {
                entity.ToTable("Cat_Status_Report_An_Event");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CatStatusReportIssue>(entity =>
            {
                entity.ToTable("Cat_Status_Report_Issue");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatStatusSale>(entity =>
            {
                entity.ToTable("Cat_Status_Sale");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatStatusSupplierCoordinator>(entity =>
            {
                entity.ToTable("Cat_StatusSupplierCoordinator");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CatStatusWorkOrder>(entity =>
            {
                entity.ToTable("Cat_StatusWorkOrder");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Category).HasColumnName("category");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CatSubMenu>(entity =>
            {
                entity.ToTable("Cat_Sub_Menu");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Menu).HasColumnName("menu");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.MenuNavigation)
                    .WithMany(p => p.CatSubMenus)
                    .HasForeignKey(d => d.Menu)
                    .HasConstraintName("FK_Cat_Subsection_Cat_Section");
            });

            modelBuilder.Entity<CatSupplier>(entity =>
            {
                entity.ToTable("Cat_Supplier");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasColumnName("supplier")
                    .HasMaxLength(50);

                entity.Property(e => e.SupplierType).HasColumnName("supplier_type");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("user_id");
            });

            modelBuilder.Entity<CatSupplierCompany>(entity =>
            {
                entity.HasKey(e => e.Int);

                entity.ToTable("Cat_SupplierCompany");

                entity.Property(e => e.Int).HasColumnName("int");

                entity.Property(e => e.SupplierCompany)
                    .IsRequired()
                    .HasColumnName("supplier_company")
                    .HasMaxLength(50);

                entity.Property(e => e.SupplierTypeId).HasColumnName("supplier_type_id");

                entity.HasOne(d => d.SupplierType)
                    .WithMany(p => p.CatSupplierCompanies)
                    .HasForeignKey(d => d.SupplierTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cat_SupplierCompany_Cat_SupplierType");
            });

            modelBuilder.Entity<CatSupplierPartnerProfileStatus>(entity =>
            {
                entity.ToTable("Cat_SupplierPartnerProfileStatus");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatSupplierPartnerProfileType>(entity =>
            {
                entity.ToTable("Cat_Supplier_Partner_Profile_Type");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatSupplierPartnerType>(entity =>
            {
                entity.ToTable("Cat_SupplierPartnerType");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatSupplierType>(entity =>
            {
                entity.ToTable("Cat_SupplierType");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.SupplierType)
                    .IsRequired()
                    .HasColumnName("supplier_type")
                    .HasMaxLength(50);

                entity.Property(e => e.Type).HasColumnName("type");
            });

            modelBuilder.Entity<CatTaxePercentage>(entity =>
            {
                entity.ToTable("Cat_Taxe_Percentage");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Taxe)
                    .HasColumnName("taxe")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatTimeZone>(entity =>
            {
                entity.ToTable("Cat_Time_Zone");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.TimeZone)
                    .IsRequired()
                    .HasColumnName("time_zone")
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatTitle>(entity =>
            {
                entity.ToTable("Cat_Title");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Office).HasColumnName("office");

                entity.Property(e => e.Section)
                    .HasColumnName("section")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.OfficeNavigation)
                    .WithMany(p => p.CatTitles)
                    .HasForeignKey(d => d.Office)
                    .HasConstraintName("FK_Cat_Title_Cat_Office");
            });

            modelBuilder.Entity<CatTrainingGroup>(entity =>
            {
                entity.ToTable("Cat_Training_Group");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatTrainingType>(entity =>
            {
                entity.ToTable("Cat_Training_Type");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatTransportType>(entity =>
            {
                entity.ToTable("Cat_TransportType");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.TransportType)
                    .HasColumnName("transport_type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatType>(entity =>
            {
                entity.ToTable("Cat_Type");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatTypeCatalog>(entity =>
            {
                entity.ToTable("Cat_TypeCatalog");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatTypeHousing>(entity =>
            {
                entity.ToTable("Cat_TypeHousing");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.TypeHousing)
                    .HasColumnName("type_housing")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CatTypeService>(entity =>
            {
                entity.ToTable("Cat_Type_Service");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Service)
                    .HasColumnName("service")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatUserType>(entity =>
            {
                entity.ToTable("Cat_User_Type");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasColumnName("type")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatVehicleType>(entity =>
            {
                entity.ToTable("Cat_VehicleType");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<CatVisaCategory>(entity =>
            {
                entity.ToTable("Cat_VisaCategory");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .ValueGeneratedNever();

                entity.Property(e => e.VisaCategory)
                    .HasColumnName("visa_category")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CatVisaType>(entity =>
            {
                entity.ToTable("Cat_Visa_Type");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasColumnName("type")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatWeightMeasure>(entity =>
            {
                entity.ToTable("Cat_WeightMeasures");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(50);

                entity.Property(e => e.Status).HasColumnName("status");
            });

            modelBuilder.Entity<ChatConversationImmigrationRelocation>(entity =>
            {
                entity.ToTable("Chat_Conversation_Immigration_Relocation");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ServiceLineId).HasColumnName("service_line_id");

                entity.Property(e => e.ServiceRecordId).HasColumnName("service_record_id");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.HasOne(d => d.ServiceLine)
                    .WithMany(p => p.ChatConversationImmigrationRelocations)
                    .HasForeignKey(d => d.ServiceLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chat_Conversation_Immigration_Relocation_Cat_Service_Line");

                entity.HasOne(d => d.ServiceRecord)
                    .WithMany(p => p.ChatConversationImmigrationRelocations)
                    .HasForeignKey(d => d.ServiceRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Chat_Conversation_Immigration_Relocation_Service_Record");
            });

            modelBuilder.Entity<ChatDocumentImmigrationRelocation>(entity =>
            {
                entity.ToTable("Chat_Document_Immigration_Relocation");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ChatImmigrationRelocationId).HasColumnName("chat_immigration_relocation_id");

                entity.Property(e => e.DateComment)
                    .HasColumnName("date_comment")
                    .HasColumnType("datetime");

                entity.Property(e => e.FilePath)
                    .IsRequired()
                    .HasColumnName("file_path")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Status).HasColumnName("status");

                entity.HasOne(d => d.ChatImmigrationRelocation)
                    .WithMany(p => p.ChatDocumentImmigrationRelocations)
                    .HasForeignKey(d => d.ChatImmigrationRelocationId)
                    .HasConstraintName("FK_Chat_Document_Immigration_Relocation_Chat_Immigration_Relocation");
            });

            modelBuilder.Entity<ChatImmigrationRelocation>(entity =>
            {
                entity.ToTable("Chat_Immigration_Relocation");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ChatCoversationId).HasColumnName("chat_coversation_id");

                entity.Property(e => e.Comment)
                    .IsRequired()
                    .HasColumnName("comment")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.DateComment)
                    .HasColumnName("date_comment")
                    .HasColumnType("datetime");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.ChatCoversation)
                    .WithMany(p => p.ChatImmigrationRelocations)
                    .HasForeignKey(d => d.ChatCoversationId)
                    .HasConstraintName("FK_Chat_Immigration_Relocation_Chat_Conversation_Immigration_Relocation");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ChatImmigrationRelocations)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Chat_Immigration_Relocation_Users");
            });

            modelBuilder.Entity<CityAbout>(entity =>
            {
                entity.ToTable("City_About");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IdCity).HasColumnName("id_city");

                entity.Property(e => e.Subtitle)
                    .IsRequired()
                    .HasColumnName("subtitle")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("title")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCityNavigation)
                    .WithMany(p => p.CityAbouts)
                    .HasForeignKey(d => d.IdCity)
                    .HasConstraintName("FK_City_About_Cat_City");
            });

            modelBuilder.Entity<CityAreasCoverageConsultant>(entity =>
            {
                entity.HasKey(e => new { e.AreasCoverageConsultant, e.City });

                entity.ToTable("City_Areas_Coverage_Consultant");

                entity.Property(e => e.AreasCoverageConsultant).HasColumnName("Areas_Coverage_Consultant");

                entity.Property(e => e.City).HasColumnName("city");

                entity.HasOne(d => d.AreasCoverageConsultantNavigation)
                    .WithMany(p => p.CityAreasCoverageConsultants)
                    .HasForeignKey(d => d.AreasCoverageConsultant)
                    .HasConstraintName("FK_City_Areas_Coverage_Consultant_Areas_Coverage_Consultant");

                entity.HasOne(d => d.CityNavigation)
                    .WithMany(p => p.CityAreasCoverageConsultants)
                    .HasForeignKey(d => d.City)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_City_Areas_Coverage_Consultant_Cat_City");
            });

            modelBuilder.Entity<CityAreasCoverageService>(entity =>
            {
                entity.HasKey(e => new { e.AreasCoverageService, e.City });

                entity.ToTable("City_Areas_Coverage_Service");

                entity.Property(e => e.AreasCoverageService).HasColumnName("Areas_Coverage_Service");

                entity.Property(e => e.City).HasColumnName("city");

                entity.HasOne(d => d.AreasCoverageServiceNavigation)
                    .WithMany(p => p.CityAreasCoverageServices)
                    .HasForeignKey(d => d.AreasCoverageService)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_City_Areas_Coverage_Service_Areas_Coverage_Service");

                entity.HasOne(d => d.CityNavigation)
                    .WithMany(p => p.CityAreasCoverageServices)
                    .HasForeignKey(d => d.City)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_City_Areas_Coverage_Service_Cat_State");
            });

            modelBuilder.Entity<CityAttraction>(entity =>
            {
                entity.ToTable("City_Attractions");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IdCity).HasColumnName("id_city");

                entity.Property(e => e.Subtitle)
                    .IsRequired()
                    .HasColumnName("subtitle")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("title")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCityNavigation)
                    .WithMany(p => p.CityAttractions)
                    .HasForeignKey(d => d.IdCity)
                    .HasConstraintName("FK_City_Attractions_Cat_City");
            });

            modelBuilder.Entity<CityEmergency>(entity =>
            {
                entity.ToTable("City_Emergency");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IdCity).HasColumnName("id_city");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasColumnName("phone_number")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCityNavigation)
                    .WithMany(p => p.CityEmergencies)
                    .HasForeignKey(d => d.IdCity)
                    .HasConstraintName("FK_City_Emergency_Cat_City");
            });

            modelBuilder.Entity<CityWhatToDo>(entity =>
            {
                entity.ToTable("City_What_To_Do");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IdCity).HasColumnName("id_city");

                entity.Property(e => e.Subtitle)
                    .IsRequired()
                    .HasColumnName("subtitle")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("title")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCityNavigation)
                    .WithMany(p => p.CityWhatToDos)
                    .HasForeignKey(d => d.IdCity)
                    .HasConstraintName("FK_City_What_To_Do_Cat_City");
            });

            modelBuilder.Entity<CityWhereEat>(entity =>
            {
                entity.ToTable("City_Where_Eat");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IdCity).HasColumnName("id_city");

                entity.Property(e => e.Subtitle)
                    .IsRequired()
                    .HasColumnName("subtitle")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("title")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCityNavigation)
                    .WithMany(p => p.CityWhereEats)
                    .HasForeignKey(d => d.IdCity)
                    .HasConstraintName("FK_Country_Where_Eat_Cat_City");
            });

            modelBuilder.Entity<ClientPartnerProfile>(entity =>
            {
                entity.ToTable("Client_Partner_Profile");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.About)
                    .HasColumnName("about")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalFrom)
                    .HasColumnName("approval_from")
                    .HasColumnType("date");

                entity.Property(e => e.AssignedTo).HasColumnName("assigned_to");

                entity.Property(e => e.BelongsToPartner).HasColumnName("belongs_to_partner");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdCompanyType).HasColumnName("id_company_type");

                entity.Property(e => e.IdLifeCircle).HasColumnName("id_life_circle");

                entity.Property(e => e.IdPaymentRecurrence).HasColumnName("id_payment_recurrence");

                entity.Property(e => e.IdPricingType).HasColumnName("id_pricing_type");

                entity.Property(e => e.IdReferralFee).HasColumnName("id_referral_fee");

                entity.Property(e => e.IdResponsiblePremierOffice).HasColumnName("id_responsible_premier_office");

                entity.Property(e => e.IdStatus).HasColumnName("id_status");

                entity.Property(e => e.IdSuccessProbability).HasColumnName("id_success_probability");

                entity.Property(e => e.IdTypePartnerClientProfile).HasColumnName("id_type_partner_client_profile");

                entity.Property(e => e.Industry).HasColumnName("industry");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PartnerClientSince)
                    .HasColumnName("partner_client_since")
                    .HasColumnType("date");

                entity.Property(e => e.Photo)
                    .HasColumnName("photo")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.AssignedToNavigation)
                    .WithMany(p => p.ClientPartnerProfiles)
                    .HasForeignKey(d => d.AssignedTo)
                    .HasConstraintName("FK_Client_Partner_Profile_Users");

                entity.HasOne(d => d.IdCompanyTypeNavigation)
                    .WithMany(p => p.ClientPartnerProfiles)
                    .HasForeignKey(d => d.IdCompanyType)
                    .HasConstraintName("FK_Client_Partner_Profile_Company_Type");

                entity.HasOne(d => d.IdLifeCircleNavigation)
                    .WithMany(p => p.ClientPartnerProfiles)
                    .HasForeignKey(d => d.IdLifeCircle)
                    .HasConstraintName("FK_Client_Partner_Profile_Life_Circle");

                entity.HasOne(d => d.IdPaymentRecurrenceNavigation)
                    .WithMany(p => p.ClientPartnerProfiles)
                    .HasForeignKey(d => d.IdPaymentRecurrence)
                    .HasConstraintName("FK_Client_Partner_Profile_Payment_Recurrence");

                entity.HasOne(d => d.IdPricingTypeNavigation)
                    .WithMany(p => p.ClientPartnerProfiles)
                    .HasForeignKey(d => d.IdPricingType)
                    .HasConstraintName("FK_Client_Partner_Profile_Pricing_Type");

                entity.HasOne(d => d.IdReferralFeeNavigation)
                    .WithMany(p => p.ClientPartnerProfiles)
                    .HasForeignKey(d => d.IdReferralFee)
                    .HasConstraintName("FK_Client_Partner_Profile_Referral_Fee");

                entity.HasOne(d => d.IdResponsiblePremierOfficeNavigation)
                    .WithMany(p => p.ClientPartnerProfiles)
                    .HasForeignKey(d => d.IdResponsiblePremierOffice)
                    .HasConstraintName("FK_Client_Partner_Profile_Responsible_Premier_Office");

                entity.HasOne(d => d.IdStatusNavigation)
                    .WithMany(p => p.ClientPartnerProfiles)
                    .HasForeignKey(d => d.IdStatus)
                    .HasConstraintName("FK_Client_Partner_Profile_status_client_partner_profile");

                entity.HasOne(d => d.IdSuccessProbabilityNavigation)
                    .WithMany(p => p.ClientPartnerProfiles)
                    .HasForeignKey(d => d.IdSuccessProbability)
                    .HasConstraintName("FK_Client_Partner_Profile_Success_Probability");

                entity.HasOne(d => d.IdTypePartnerClientProfileNavigation)
                    .WithMany(p => p.ClientPartnerProfiles)
                    .HasForeignKey(d => d.IdTypePartnerClientProfile)
                    .HasConstraintName("FK_Client_Partner_Profile_Type_Partner_Client_Profile");

                entity.HasOne(d => d.IndustryNavigation)
                    .WithMany(p => p.ClientPartnerProfiles)
                    .HasForeignKey(d => d.Industry)
                    .HasConstraintName("FK_Client_Partner_Profile_Cat_Industry");
            });

            modelBuilder.Entity<ClientPartnerProfileClient>(entity =>
            {
                entity.ToTable("Client_Partner_Profile_Client");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdClientFrom).HasColumnName("id_client_from");

                entity.Property(e => e.IdClientTo).HasColumnName("id_client_to");

                entity.HasOne(d => d.IdClientFromNavigation)
                    .WithMany(p => p.ClientPartnerProfileClientIdClientFromNavigations)
                    .HasForeignKey(d => d.IdClientFrom)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Client_Partner_Profile_Client_Client_Partner_Profile");

                entity.HasOne(d => d.IdClientToNavigation)
                    .WithMany(p => p.ClientPartnerProfileClientIdClientToNavigations)
                    .HasForeignKey(d => d.IdClientTo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Client_Partner_Profile_Client_Client_Partner_Profile1");
            });

            modelBuilder.Entity<ClientPartnerProfileExperienceTeam>(entity =>
            {
                entity.ToTable("Client_Partner_Profile_Experience_Team");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdClientPartnerProfile).HasColumnName("id_client_partner_profile");

                entity.Property(e => e.IdServiceLine).HasColumnName("id_service_line");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.IdClientPartnerProfileNavigation)
                    .WithMany(p => p.ClientPartnerProfileExperienceTeams)
                    .HasForeignKey(d => d.IdClientPartnerProfile)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Client_Partner_Profile_Experience_Team_Client_Partner_Profile");

                entity.HasOne(d => d.IdServiceLineNavigation)
                    .WithMany(p => p.ClientPartnerProfileExperienceTeams)
                    .HasForeignKey(d => d.IdServiceLine)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Client_Partner_Profile_Experience_Team_Cat_Service_Line");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ClientPartnerProfileExperienceTeams)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Client_Partner_Profile_Experience_Team_Users");
            });

            modelBuilder.Entity<ColaboratorMember>(entity =>
            {
                entity.HasKey(e => new { e.Task, e.Colaborator })
                    .HasName("PK_Related_Members");

                entity.ToTable("Colaborator_Members");

                entity.Property(e => e.Task).HasColumnName("task");

                entity.Property(e => e.Colaborator).HasColumnName("colaborator");

                entity.HasOne(d => d.ColaboratorNavigation)
                    .WithMany(p => p.ColaboratorMembers)
                    .HasForeignKey(d => d.Colaborator)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Related_Members_Users");

                entity.HasOne(d => d.TaskNavigation)
                    .WithMany(p => p.ColaboratorMembers)
                    .HasForeignKey(d => d.Task)
                    .HasConstraintName("FK_Related_Members_Task");
            });

            modelBuilder.Entity<Column>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Columns).HasColumnName("columns");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Orden).HasColumnName("orden");

                entity.Property(e => e.Report).HasColumnName("report");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.ColumnsNavigation)
                    .WithMany(p => p.Columns)
                    .HasForeignKey(d => d.Columns)
                    .HasConstraintName("FK_Columns_Cat_ColumnsReport");

                entity.HasOne(d => d.ReportNavigation)
                    .WithMany(p => p.Columns)
                    .HasForeignKey(d => d.Report)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Columns_Report");
            });

            modelBuilder.Entity<CommentAirportTransportationService>(entity =>
            {
                entity.ToTable("Comment_Airport_Transportation_Services");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AirportTransportationServicesId).HasColumnName("airport_transportation_services_id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Reply)
                    .HasColumnName("reply")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.AirportTransportationServices)
                    .WithMany(p => p.CommentAirportTransportationServices)
                    .HasForeignKey(d => d.AirportTransportationServicesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Comment_Airport_Transportation_Services_Airport_Transportation_Services");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CommentAirportTransportationServices)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Comment_Airport_Transportation_Services_Users");
            });

            modelBuilder.Entity<CommentAreaOrientation>(entity =>
            {
                entity.ToTable("Comment_Area_Orientation");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AreaOrientationId).HasColumnName("area_orientation_id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Reply)
                    .HasColumnName("reply")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.AreaOrientation)
                    .WithMany(p => p.CommentAreaOrientations)
                    .HasForeignKey(d => d.AreaOrientationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Comment_Area_Orientation_Area_Orientation");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CommentAreaOrientations)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Comment_Area_Orientation_Users");
            });

            modelBuilder.Entity<CommentCorporateAssistance>(entity =>
            {
                entity.ToTable("Comment_Corporate_Assistance");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CorporateAssistanceId).HasColumnName("corporate_assistance_id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Reply)
                    .HasColumnName("reply")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.CorporateAssistance)
                    .WithMany(p => p.CommentCorporateAssistances)
                    .HasForeignKey(d => d.CorporateAssistanceId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Comment_Corporate_Assistance_Corporate_Assistance");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CommentCorporateAssistances)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Comment_Corporate_Assistance_Users");
            });

            modelBuilder.Entity<CommentDeparture>(entity =>
            {
                entity.ToTable("Comment_Departure");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DepartureId).HasColumnName("departure_id");

                entity.Property(e => e.Reply)
                    .HasColumnName("reply")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.Departure)
                    .WithMany(p => p.CommentDepartures)
                    .HasForeignKey(d => d.DepartureId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Comment_Departure_Departure");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CommentDepartures)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Comment_Departure_Users");
            });

            modelBuilder.Entity<CommentDocumentManagement>(entity =>
            {
                entity.ToTable("Comment_Document_Management");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DocumentManagementId).HasColumnName("document_management_id");

                entity.Property(e => e.Reply)
                    .HasColumnName("reply")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.DocumentManagement)
                    .WithMany(p => p.CommentDocumentManagements)
                    .HasForeignKey(d => d.DocumentManagementId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Comment_Document_Management_Document_Management");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CommentDocumentManagements)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Comment_Document_Management_Users");
            });

            modelBuilder.Entity<CommentHomeFinding>(entity =>
            {
                entity.ToTable("Comment_Home_Finding");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.HomeFindingId).HasColumnName("home_finding_id");

                entity.Property(e => e.Reply)
                    .HasColumnName("reply")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.HomeFinding)
                    .WithMany(p => p.CommentHomeFindings)
                    .HasForeignKey(d => d.HomeFindingId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Comment_Home_Finding_Home_Finding");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CommentHomeFindings)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Comment_Home_Finding_Users");
            });

            modelBuilder.Entity<CommentHomePurchase>(entity =>
            {
                entity.ToTable("Comment_Home_Purchase");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.HomePurchase).HasColumnName("home_purchase");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.CommentHomePurchases)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_Comment_Home_Purchase_Users");

                entity.HasOne(d => d.HomePurchaseNavigation)
                    .WithMany(p => p.CommentHomePurchases)
                    .HasForeignKey(d => d.HomePurchase)
                    .HasConstraintName("FK_Comment_Home_Purchase_Home_Purchase");
            });

            modelBuilder.Entity<CommentHomeSale>(entity =>
            {
                entity.ToTable("Comment_Home_Sale");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.HomeSale).HasColumnName("home_sale");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.CommentHomeSales)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_Comment_Home_Sale_Users");

                entity.HasOne(d => d.HomeSaleNavigation)
                    .WithMany(p => p.CommentHomeSales)
                    .HasForeignKey(d => d.HomeSale)
                    .HasConstraintName("FK_Comment_Home_Sale_Home_Sale");
            });

            modelBuilder.Entity<CommentHousing>(entity =>
            {
                entity.ToTable("Comment_Housing");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreationBy).HasColumnName("creation_by");

                entity.Property(e => e.HousingId).HasColumnName("housing_id");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.CreationByNavigation)
                    .WithMany(p => p.CommentHousings)
                    .HasForeignKey(d => d.CreationBy)
                    .HasConstraintName("FK_Comment_Housing_Users");

                entity.HasOne(d => d.Housing)
                    .WithMany(p => p.CommentHousings)
                    .HasForeignKey(d => d.HousingId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Comment_Housing_Housing_List");
            });

            modelBuilder.Entity<CommentInvoice>(entity =>
            {
                entity.ToTable("Comment_Invoice");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Invoice).HasColumnName("invoice");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.CommentInvoices)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_Comment_Invoice_Users");

                entity.HasOne(d => d.InvoiceNavigation)
                    .WithMany(p => p.CommentInvoices)
                    .HasForeignKey(d => d.Invoice)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Comment_Invoice_Invoice");
            });

            modelBuilder.Entity<CommentLeaseRenewal>(entity =>
            {
                entity.ToTable("Comment_Lease_Renewal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreationBy).HasColumnName("creation_by");

                entity.Property(e => e.LeaseRenewal).HasColumnName("lease_renewal");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.CreationByNavigation)
                    .WithMany(p => p.CommentLeaseRenewals)
                    .HasForeignKey(d => d.CreationBy)
                    .HasConstraintName("FK_Comment_Lease_Renewal_Users");

                entity.HasOne(d => d.LeaseRenewalNavigation)
                    .WithMany(p => p.CommentLeaseRenewals)
                    .HasForeignKey(d => d.LeaseRenewal)
                    .HasConstraintName("FK_Comment_Lease_Renewal_Lease_Renewal");
            });

            modelBuilder.Entity<CommentLegalReview>(entity =>
            {
                entity.ToTable("Comment_Legal_Review");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.LegalReviewId).HasColumnName("legal_review_id");

                entity.Property(e => e.Reply)
                    .HasColumnName("reply")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.LegalReview)
                    .WithMany(p => p.CommentLegalReviews)
                    .HasForeignKey(d => d.LegalReviewId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Comment_Legal_Review_Legal_Review");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CommentLegalReviews)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Comment_Legal_Review_Users");
            });

            modelBuilder.Entity<CommentLocalDocumentation>(entity =>
            {
                entity.ToTable("Comment_Local_Documentation");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.LocalDocumentationId).HasColumnName("local_documentation_id");

                entity.Property(e => e.Reply)
                    .HasColumnName("reply")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.LocalDocumentation)
                    .WithMany(p => p.CommentLocalDocumentations)
                    .HasForeignKey(d => d.LocalDocumentationId)
                    .HasConstraintName("FK_Comment_Local_Documentation_Local_Documentation");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CommentLocalDocumentations)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Comment_Local_Documentation_Users");
            });

            modelBuilder.Entity<CommentNotification>(entity =>
            {
                entity.ToTable("Comment_Notification");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.NotificationId).HasColumnName("notification_id");

                entity.Property(e => e.Reply)
                    .HasColumnName("reply")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.Notification)
                    .WithMany(p => p.CommentNotifications)
                    .HasForeignKey(d => d.NotificationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Comment_Notification_Notification");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CommentNotifications)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Comment_Notification_Users");
            });

            modelBuilder.Entity<CommentOther>(entity =>
            {
                entity.ToTable("Comment_Other");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Other).HasColumnName("other");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.CommentOthers)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_Comment_Other_Users");

                entity.HasOne(d => d.OtherNavigation)
                    .WithMany(p => p.CommentOthers)
                    .HasForeignKey(d => d.Other)
                    .HasConstraintName("FK_Comment_Other_Other");
            });

            modelBuilder.Entity<CommentPaymentConcept>(entity =>
            {
                entity.ToTable("Comment_Payment_Concept");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.PaymentConcept).HasColumnName("payment_concept");

                entity.Property(e => e.Reply)
                    .HasColumnName("reply")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.PaymentConceptNavigation)
                    .WithMany(p => p.CommentPaymentConcepts)
                    .HasForeignKey(d => d.PaymentConcept)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Comment_Payment_Concept_Payment_Concept");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CommentPaymentConcepts)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Comment_Payment_Concept_Users");
            });

            modelBuilder.Entity<CommentPredecisionOrientation>(entity =>
            {
                entity.ToTable("Comment_Predecision_Orientation");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.PredecisionOrientationId).HasColumnName("predecision_orientation_id");

                entity.Property(e => e.Reply)
                    .HasColumnName("reply")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.PredecisionOrientation)
                    .WithMany(p => p.CommentPredecisionOrientations)
                    .HasForeignKey(d => d.PredecisionOrientationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Comment_Predecision_Orientation_Predecision_Orientation");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CommentPredecisionOrientations)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Comment_Predecision_Orientation_Users");
            });

            modelBuilder.Entity<CommentPropertyManagement>(entity =>
            {
                entity.ToTable("Comment_Property_Management");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.PropertyManagement).HasColumnName("property_management");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.CommentPropertyManagements)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_Comment_Property_Management_Users");

                entity.HasOne(d => d.PropertyManagementNavigation)
                    .WithMany(p => p.CommentPropertyManagements)
                    .HasForeignKey(d => d.PropertyManagement)
                    .HasConstraintName("FK_Comment_Property_Management_Property_Management");
            });

            modelBuilder.Entity<CommentRenewal>(entity =>
            {
                entity.ToTable("Comment_Renewal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.RenewalId).HasColumnName("renewal_id");

                entity.Property(e => e.Reply)
                    .HasColumnName("reply")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.Renewal)
                    .WithMany(p => p.CommentRenewals)
                    .HasForeignKey(d => d.RenewalId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Comment_Renewal_Renewal");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CommentRenewals)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Comment_Renewal_Users");
            });

            modelBuilder.Entity<CommentRentalFurnitureCoordination>(entity =>
            {
                entity.ToTable("Comment_Rental_Furniture_Coordination");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.RentalFurnitureCoordinationId).HasColumnName("rental_furniture_coordination_id");

                entity.Property(e => e.Reply)
                    .HasColumnName("reply")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.RentalFurnitureCoordination)
                    .WithMany(p => p.CommentRentalFurnitureCoordinations)
                    .HasForeignKey(d => d.RentalFurnitureCoordinationId)
                    .HasConstraintName("FK_Comment_Rental_Furniture_Coordination_Rental_Furniture_Coordination");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CommentRentalFurnitureCoordinations)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Comment_Rental_Furniture_Coordination_Users");
            });

            modelBuilder.Entity<CommentReportAnEvent>(entity =>
            {
                entity.ToTable("Comment_Report_An_Event");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.ReportAnEventId).HasColumnName("report_an_event_id");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.CommentReportAnEvents)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_Comment_Report_An_Event_Users");

                entity.HasOne(d => d.ReportAnEvent)
                    .WithMany(p => p.CommentReportAnEvents)
                    .HasForeignKey(d => d.ReportAnEventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Comment_Report_An_Event_Report_An_Event");
            });

            modelBuilder.Entity<CommentRequestPayment>(entity =>
            {
                entity.ToTable("Comment_Request_Payment");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Reply)
                    .HasColumnName("reply")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RequestPaymentId).HasColumnName("request_payment_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.RequestPayment)
                    .WithMany(p => p.CommentRequestPayments)
                    .HasForeignKey(d => d.RequestPaymentId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Comment_Request_Payment_Request_Payment");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CommentRequestPayments)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Comment_Request_Payment_Users");
            });

            modelBuilder.Entity<CommentResidencyPermit>(entity =>
            {
                entity.ToTable("Comment_Residency_Permit");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Reply)
                    .HasColumnName("reply")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ResidencyPermitId).HasColumnName("residency_permit_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.ResidencyPermit)
                    .WithMany(p => p.CommentResidencyPermits)
                    .HasForeignKey(d => d.ResidencyPermitId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Comment_Residency_Permit_Residency_Permit");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CommentResidencyPermits)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Comment_Residency_Permit_Users");
            });

            modelBuilder.Entity<CommentSchoolingSearch>(entity =>
            {
                entity.ToTable("Comment_Schooling_Search");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Reply)
                    .HasColumnName("reply")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SchoolingSearchId).HasColumnName("schooling_search_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.SchoolingSearch)
                    .WithMany(p => p.CommentSchoolingSearches)
                    .HasForeignKey(d => d.SchoolingSearchId)
                    .HasConstraintName("FK_Comment_Schooling_Search_Schooling_Search");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CommentSchoolingSearches)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Comment_Schooling_Search_Users");
            });

            modelBuilder.Entity<CommentSettlingIn>(entity =>
            {
                entity.ToTable("Comment_Settling_In");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Reply)
                    .HasColumnName("reply")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SettlingInId).HasColumnName("settling_in_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.SettlingIn)
                    .WithMany(p => p.CommentSettlingIns)
                    .HasForeignKey(d => d.SettlingInId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Comment_Settling_In_Settling_In");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CommentSettlingIns)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Comment_Settling_In_Users");
            });

            modelBuilder.Entity<CommentTemporaryHosuing>(entity =>
            {
                entity.ToTable("Comment_Temporary_Hosuing");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Reply)
                    .HasColumnName("reply")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TemporaryHousingCoordinationId).HasColumnName("temporary_housing_coordination_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.TemporaryHousingCoordination)
                    .WithMany(p => p.CommentTemporaryHosuings)
                    .HasForeignKey(d => d.TemporaryHousingCoordinationId)
                    .HasConstraintName("FK_Comment_Temporary_Hosuing_Temporary_Housing_Coordinaton");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CommentTemporaryHosuings)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Comment_Temporary_Hosuing_Users");
            });

            modelBuilder.Entity<CommentTenancyManagement>(entity =>
            {
                entity.ToTable("Comment_Tenancy_Management");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.TenancyManagementId).HasColumnName("tenancy_management_id");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.CommentTenancyManagements)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_Comment_Tenancy_Management_Users");

                entity.HasOne(d => d.TenancyManagement)
                    .WithMany(p => p.CommentTenancyManagements)
                    .HasForeignKey(d => d.TenancyManagementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Comment_Tenancy_Management_Tenancy_Management");
            });

            modelBuilder.Entity<CommentTransportation>(entity =>
            {
                entity.ToTable("Comment_Transportation");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Reply)
                    .HasColumnName("reply")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TransportationId).HasColumnName("transportation_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.Transportation)
                    .WithMany(p => p.CommentTransportations)
                    .HasForeignKey(d => d.TransportationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Comment_Transportation_Transportation");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CommentTransportations)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Comment_Transportation_Users");
            });

            modelBuilder.Entity<CommentVisaDeregistration>(entity =>
            {
                entity.ToTable("Comment_Visa_Deregistration");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Reply)
                    .HasColumnName("reply")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.Property(e => e.VisaDeregistrationId).HasColumnName("visa_deregistration_id");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CommentVisaDeregistrations)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Comment_Visa_Deregistration_Users");

                entity.HasOne(d => d.VisaDeregistration)
                    .WithMany(p => p.CommentVisaDeregistrations)
                    .HasForeignKey(d => d.VisaDeregistrationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Comment_Visa_Deregistration_Visa_Deregistration");
            });

            modelBuilder.Entity<CommentsEntryVisa>(entity =>
            {
                entity.ToTable("Comments_Entry_Visa");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EntryVisaId).HasColumnName("entry_visa_id");

                entity.Property(e => e.Reply)
                    .HasColumnName("reply")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.EntryVisa)
                    .WithMany(p => p.CommentsEntryVisas)
                    .HasForeignKey(d => d.EntryVisaId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Comments_Entry_Visa_Entry_Visa");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CommentsEntryVisas)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Comments_Entry_Visa_Users");
            });

            modelBuilder.Entity<CommentsWorkPermit>(entity =>
            {
                entity.ToTable("Comments_Work_Permit");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Reply)
                    .HasColumnName("reply")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.Property(e => e.WorkPermitId).HasColumnName("work_permit_id");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CommentsWorkPermits)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Comments_Work_Permit_Users");

                entity.HasOne(d => d.WorkPermit)
                    .WithMany(p => p.CommentsWorkPermits)
                    .HasForeignKey(d => d.WorkPermitId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Comments_Work_Permit_Work_Permit");
            });

            modelBuilder.Entity<CompanyType>(entity =>
            {
                entity.ToTable("Company_Type");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CompanyType1)
                    .IsRequired()
                    .HasColumnName("company_type")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CompesationBenefit>(entity =>
            {
                entity.ToTable("Compesation_Benefits");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Ammount)
                    .HasColumnName("ammount")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.BaseCompesation)
                    .HasColumnName("base_compesation")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Benefit).HasColumnName("benefit");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Currency).HasColumnName("currency");

                entity.Property(e => e.Frequency).HasColumnName("frequency");

                entity.Property(e => e.PlaceWork).HasColumnName("place_work");

                entity.Property(e => e.Profile).HasColumnName("profile");

                entity.Property(e => e.Taxes)
                    .HasColumnName("taxes")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.BenefitNavigation)
                    .WithMany(p => p.CompesationBenefits)
                    .HasForeignKey(d => d.Benefit)
                    .HasConstraintName("FK_Compesation_Benefits_Cat_Benefit");

                entity.HasOne(d => d.CurrencyNavigation)
                    .WithMany(p => p.CompesationBenefits)
                    .HasForeignKey(d => d.Currency)
                    .HasConstraintName("FK_Compesation_Benefits_Cat_currency");

                entity.HasOne(d => d.FrequencyNavigation)
                    .WithMany(p => p.CompesationBenefits)
                    .HasForeignKey(d => d.Frequency)
                    .HasConstraintName("FK_Compesation_Benefits_Cat_Duration");

                entity.HasOne(d => d.ProfileNavigation)
                    .WithMany(p => p.CompesationBenefits)
                    .HasForeignKey(d => d.Profile)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Compesation_Benefits_Profile_User");
            });

            modelBuilder.Entity<Concept>(entity =>
            {
                entity.ToTable("Concept");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Amount)
                    .HasColumnName("amount")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Concept1)
                    .HasColumnName("concept")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Currency).HasColumnName("currency");

                entity.Property(e => e.Payment).HasColumnName("payment");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.CurrencyNavigation)
                    .WithMany(p => p.Concepts)
                    .HasForeignKey(d => d.Currency)
                    .HasConstraintName("FK_Concept_Cat_currency");

                entity.HasOne(d => d.PaymentNavigation)
                    .WithMany(p => p.Concepts)
                    .HasForeignKey(d => d.Payment)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Concept_Payment");
            });

            modelBuilder.Entity<ConclusionServiceReportDay>(entity =>
            {
                entity.ToTable("Conclusion_Service_Report_Day");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Conclusion)
                    .HasColumnName("conclusion")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FilePath)
                    .HasColumnName("file_path")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceReportDayId).HasColumnName("service_report_day_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.ServiceReportDay)
                    .WithMany(p => p.ConclusionServiceReportDays)
                    .HasForeignKey(d => d.ServiceReportDayId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Conclusion_Service_Report_Day_Service_Report_Day");
            });

            modelBuilder.Entity<ConsultantContactsService>(entity =>
            {
                entity.ToTable("Consultant_Contacts_Service");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AreasCoverage).HasColumnName("areas_coverage");

                entity.Property(e => e.City).HasColumnName("city");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ContactName)
                    .HasColumnName("contact_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Immigration).HasColumnName("immigration");

                entity.Property(e => e.PhoneNumber)
                    .HasColumnName("phone_number")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Photo)
                    .HasColumnName("photo")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Relocation).HasColumnName("relocation");

                entity.Property(e => e.SupplierType).HasColumnName("supplier_type");

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.AreasCoverageNavigation)
                    .WithMany(p => p.ConsultantContactsServices)
                    .HasForeignKey(d => d.AreasCoverage)
                    .HasConstraintName("FK_Consultant_Contacts_Service_Areas_Coverage_Service");

                entity.HasOne(d => d.CityNavigation)
                    .WithMany(p => p.ConsultantContactsServices)
                    .HasForeignKey(d => d.City)
                    .HasConstraintName("FK_Consultant_Contacts_Service_Cat_State");

                entity.HasOne(d => d.SupplierTypeNavigation)
                    .WithMany(p => p.ConsultantContactsServices)
                    .HasForeignKey(d => d.SupplierType)
                    .HasConstraintName("FK_Consultant_Contacts_Service_Cat_SupplierType");
            });

            modelBuilder.Entity<Content>(entity =>
            {
                entity.ToTable("Content");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Order).HasColumnName("order");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("title")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Training).HasColumnName("training");

                entity.Property(e => e.Type).HasColumnName("type");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.TrainingNavigation)
                    .WithMany(p => p.Contents)
                    .HasForeignKey(d => d.Training)
                    .HasConstraintName("FK_Content_Training");

                entity.HasOne(d => d.TypeNavigation)
                    .WithMany(p => p.Contents)
                    .HasForeignKey(d => d.Type)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Content_Cat_Content_Type");
            });

            modelBuilder.Entity<ContractDetail>(entity =>
            {
                entity.ToTable("Contract_Details");

                entity.Property(e => e.ContractDetailId)
                    .HasColumnName("contract_detail_id")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Currency).HasColumnName("currency");

                entity.Property(e => e.CurrencyFinal).HasColumnName("currency_final");

                entity.Property(e => e.FinalRentPrice)
                    .HasColumnName("final_rent_price")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.LeaseEndDate)
                    .HasColumnName("lease_end_date")
                    .HasColumnType("date");

                entity.Property(e => e.LeaseStartDate)
                    .HasColumnName("lease_start_date")
                    .HasColumnType("date");

                entity.Property(e => e.ListRentPrice)
                    .HasColumnName("list_rent_price")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.PaymentsDue)
                    .HasColumnName("payments_due")
                    .HasColumnType("date");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.ContractDetailNavigation)
                    .WithOne(p => p.ContractDetail)
                    .HasForeignKey<ContractDetail>(d => d.ContractDetailId)
                    .HasConstraintName("FK_Contract_Details_Housing_List");

                entity.HasOne(d => d.CurrencyNavigation)
                    .WithMany(p => p.ContractDetailCurrencyNavigations)
                    .HasForeignKey(d => d.Currency)
                    .HasConstraintName("FK_Contract_Details_Cat_currency");

                entity.HasOne(d => d.CurrencyFinalNavigation)
                    .WithMany(p => p.ContractDetailCurrencyFinalNavigations)
                    .HasForeignKey(d => d.CurrencyFinal)
                    .HasConstraintName("FK_Contract_Details_Cat_currency1");
            });

            modelBuilder.Entity<Conversation>(entity =>
            {
                entity.ToTable("Conversation");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.GroupName)
                    .HasColumnName("group_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Groups).HasColumnName("groups");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.UserReciver).HasColumnName("user_reciver");

                entity.Property(e => e.UserTo).HasColumnName("user_to");

                entity.HasOne(d => d.UserReciverNavigation)
                    .WithMany(p => p.ConversationUserReciverNavigations)
                    .HasForeignKey(d => d.UserReciver)
                    .HasConstraintName("FK_Conversation_Users1");

                entity.HasOne(d => d.UserToNavigation)
                    .WithMany(p => p.ConversationUserToNavigations)
                    .HasForeignKey(d => d.UserTo)
                    .HasConstraintName("FK_Conversation_Users");
            });

            modelBuilder.Entity<Coordinator>(entity =>
            {
                entity.ToTable("Coordinator");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.City).HasColumnName("city");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ContactName)
                    .HasColumnName("contact_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CoordinatorType).HasColumnName("coordinator_type");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Immigration).HasColumnName("immigration");

                entity.Property(e => e.PhoneNumber)
                    .HasColumnName("phone_number")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Photo)
                    .HasColumnName("photo")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Relocation).HasColumnName("relocation");

                entity.Property(e => e.SupplierType).HasColumnName("supplier_type");

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.CityNavigation)
                    .WithMany(p => p.Coordinators)
                    .HasForeignKey(d => d.City)
                    .HasConstraintName("FK_Coordinator_Cat_State");

                entity.HasOne(d => d.CoordinatorTypeNavigation)
                    .WithMany(p => p.Coordinators)
                    .HasForeignKey(d => d.CoordinatorType)
                    .HasConstraintName("FK_Coordinator_Cat_CoordinatorType");

                entity.HasOne(d => d.SupplierTypeNavigation)
                    .WithMany(p => p.Coordinators)
                    .HasForeignKey(d => d.SupplierType)
                    .HasConstraintName("FK_Coordinator_Cat_SupplierType");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Coordinators)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Coordinator_Users");
            });

            modelBuilder.Entity<CorporateAssistance>(entity =>
            {
                entity.ToTable("Corporate_Assistance");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApplicantId).HasColumnName("applicant_id");

                entity.Property(e => e.ApplicationApprovalDate)
                    .HasColumnName("application_approval_date")
                    .HasColumnType("date");

                entity.Property(e => e.ApplicationSubmissionDate)
                    .HasColumnName("application_submission_date")
                    .HasColumnType("date");

                entity.Property(e => e.AppointmentDate)
                    .HasColumnName("appointment_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ConsularServiceId).HasColumnName("consular_service_id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentCollectionCompletionDate)
                    .HasColumnName("document_collection_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentCollectionStartDate)
                    .HasColumnName("document_collection_start_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentDeliveryDate)
                    .HasColumnName("document_delivery_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentExpirationDate)
                    .HasColumnName("document_expiration_Date")
                    .HasColumnType("date");

                entity.Property(e => e.HostCityId).HasColumnName("host_city_id");

                entity.Property(e => e.HostCountryId).HasColumnName("host_country_id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceCompletionDate)
                    .HasColumnName("service_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.ServiceTypeId).HasColumnName("service_type_id");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.WorkOrderServicesId).HasColumnName("work_order_services_id");

                entity.HasOne(d => d.ConsularService)
                    .WithMany(p => p.CorporateAssistances)
                    .HasForeignKey(d => d.ConsularServiceId)
                    .HasConstraintName("FK_Corporate_Assistance_Cat_Consular_Service");

                entity.HasOne(d => d.HostCity)
                    .WithMany(p => p.CorporateAssistances)
                    .HasForeignKey(d => d.HostCityId)
                    .HasConstraintName("FK_Corporate_Assistance_Cat_State");

                entity.HasOne(d => d.HostCountry)
                    .WithMany(p => p.CorporateAssistances)
                    .HasForeignKey(d => d.HostCountryId)
                    .HasConstraintName("FK_Corporate_Assistance_Cat_Country");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.CorporateAssistances)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .HasConstraintName("FK_Corporate_Assistance_Cat_Type_Service");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.CorporateAssistances)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Corporate_Assistance_Cat_Status");

                entity.HasOne(d => d.WorkOrderServices)
                    .WithMany(p => p.CorporateAssistances)
                    .HasForeignKey(d => d.WorkOrderServicesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Corporate_Assistance_Service_Order_Services");
            });

            modelBuilder.Entity<CostSaving>(entity =>
            {
                entity.ToTable("Cost_Saving");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.HomeFindingId).HasColumnName("home_finding_id");

                entity.HasOne(d => d.HomeFinding)
                    .WithMany(p => p.CostSavings)
                    .HasForeignKey(d => d.HomeFindingId)
                    .HasConstraintName("FK_Cost_Saving_Home_Finding");
            });

            modelBuilder.Entity<CostSavingDetail>(entity =>
            {
                entity.ToTable("Cost_Saving_Details");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CostSavings)
                    .HasColumnName("cost_savings")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CostSavingsCurrency)
                    .HasColumnName("cost_savings_currency")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CostType)
                    .HasColumnName("cost_type")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.HomeFindingId).HasColumnName("home_finding_id");
            });

            modelBuilder.Entity<CostSavingHome>(entity =>
            {
                entity.ToTable("Cost_Saving_Home");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CostSavings)
                    .HasColumnName("cost_savings")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CostType)
                    .HasColumnName("cost_type")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Currency).HasColumnName("currency");

                entity.Property(e => e.HousingList).HasColumnName("housing_list");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CurrencyNavigation)
                    .WithMany(p => p.CostSavingHomes)
                    .HasForeignKey(d => d.Currency)
                    .HasConstraintName("FK_Cost_Saving_Home_Cat_currency");

                entity.HasOne(d => d.HousingListNavigation)
                    .WithMany(p => p.CostSavingHomes)
                    .HasForeignKey(d => d.HousingList)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Cost_Saving_Home_Housing_List");
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.ToTable("Country");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Country1)
                    .HasColumnName("country")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate).HasColumnName("updated_date");
            });

            modelBuilder.Entity<CountryDocument>(entity =>
            {
                entity.ToTable("Country_Document");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .HasColumnName("file_request")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Group).HasColumnName("group");

                entity.Property(e => e.IdCountry).HasColumnName("id_country");

                entity.Property(e => e.IdDocumentType).HasColumnName("id_document_type");

                entity.Property(e => e.IdGroup).HasColumnName("id_group");

                entity.Property(e => e.IdPrivacy).HasColumnName("id_privacy");

                entity.Property(e => e.IdStatus).HasColumnName("id_status");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasColumnName("location")
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.UploadDate)
                    .HasColumnName("upload_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.IdCountryNavigation)
                    .WithMany(p => p.CountryDocuments)
                    .HasForeignKey(d => d.IdCountry)
                    .HasConstraintName("FK_Country_Document_Cat_Country");

                entity.HasOne(d => d.IdDocumentTypeNavigation)
                    .WithMany(p => p.CountryDocuments)
                    .HasForeignKey(d => d.IdDocumentType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Country_Document_Cat_DocumentType");

                entity.HasOne(d => d.IdGroupNavigation)
                    .WithMany(p => p.CountryDocuments)
                    .HasForeignKey(d => d.IdGroup)
                    .HasConstraintName("FK_Country_Document_Country_Document_Group");

                entity.HasOne(d => d.IdPrivacyNavigation)
                    .WithMany(p => p.CountryDocuments)
                    .HasForeignKey(d => d.IdPrivacy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Country_Document_Cat_Privacy");

                entity.HasOne(d => d.IdStatusNavigation)
                    .WithMany(p => p.CountryDocuments)
                    .HasForeignKey(d => d.IdStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Country_Document_status_country_document");
            });

            modelBuilder.Entity<CountryDocumentGroup>(entity =>
            {
                entity.ToTable("Country_Document_Group");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CountryGallery>(entity =>
            {
                entity.ToTable("Country_Gallery");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CountryId).HasColumnName("country_id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Image)
                    .HasColumnName("image")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.CountryGalleries)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Country_Gallery_Country");
            });

            modelBuilder.Entity<CountryLeader>(entity =>
            {
                entity.HasKey(e => new { e.Country, e.Leader });

                entity.ToTable("Country_Leader");

                entity.HasOne(d => d.CountryNavigation)
                    .WithMany(p => p.CountryLeaders)
                    .HasForeignKey(d => d.Country)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Country_Leader_Cat_Country");

                entity.HasOne(d => d.LeaderNavigation)
                    .WithMany(p => p.CountryLeaders)
                    .HasForeignKey(d => d.Leader)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Country_Leader_Users");
            });

            modelBuilder.Entity<CountryPhoneCode>(entity =>
            {
                entity.HasKey(e => e.CountriesId);

                entity.ToTable("Country_Phone_Code");

                entity.Property(e => e.CountriesId).HasColumnName("countries_id");

                entity.Property(e => e.CountriesIsdCode)
                    .HasColumnName("countries_isd_code")
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.CountriesIsoCode)
                    .IsRequired()
                    .HasColumnName("countries_iso_code")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CountriesName)
                    .IsRequired()
                    .HasColumnName("countries_name")
                    .HasMaxLength(64)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CountryService>(entity =>
            {
                entity.HasKey(e => new { e.Consultant, e.Country });

                entity.ToTable("Country_Service");

                entity.Property(e => e.Consultant).HasColumnName("consultant");

                entity.Property(e => e.Country).HasColumnName("country");

                entity.HasOne(d => d.ConsultantNavigation)
                    .WithMany(p => p.CountryServices)
                    .HasForeignKey(d => d.Consultant)
                    .HasConstraintName("FK_Country_Service_Profile_User");

                entity.HasOne(d => d.CountryNavigation)
                    .WithMany(p => p.CountryServices)
                    .HasForeignKey(d => d.Country)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Country_Service_Cat_Country");
            });

            modelBuilder.Entity<CreditCardLandLordDetail>(entity =>
            {
                entity.HasKey(e => new { e.LandLord, e.CreditCard });

                entity.ToTable("Credit_Card_Land_Lord_Details");

                entity.Property(e => e.LandLord).HasColumnName("land_lord");

                entity.Property(e => e.CreditCard).HasColumnName("credit_card");

                entity.HasOne(d => d.CreditCardNavigation)
                    .WithMany(p => p.CreditCardLandLordDetails)
                    .HasForeignKey(d => d.CreditCard)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Credit_Card_Land_Lord_Details_Cat_CreditCards");

                entity.HasOne(d => d.LandLordNavigation)
                    .WithMany(p => p.CreditCardLandLordDetails)
                    .HasForeignKey(d => d.LandLord)
                    .HasConstraintName("FK_Credit_Card_Land_Lord_Details_Landlord_Details_Home");
            });

            modelBuilder.Entity<CreditCardPaymentInformationConsultant>(entity =>
            {
                entity.HasKey(e => new { e.PaymentInformationConsultant, e.CreditCard });

                entity.ToTable("Credit_Card_Payment_Information_Consultant");

                entity.Property(e => e.PaymentInformationConsultant).HasColumnName("payment_information_consultant");

                entity.Property(e => e.CreditCard).HasColumnName("credit_card");

                entity.HasOne(d => d.CreditCardNavigation)
                    .WithMany(p => p.CreditCardPaymentInformationConsultants)
                    .HasForeignKey(d => d.CreditCard)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Credit_Card_Payment_Information_Consultant_Cat_CreditCards");

                entity.HasOne(d => d.PaymentInformationConsultantNavigation)
                    .WithMany(p => p.CreditCardPaymentInformationConsultants)
                    .HasForeignKey(d => d.PaymentInformationConsultant)
                    .HasConstraintName("FK_Credit_Card_Payment_Information_Consultant_Payment_Information_Consultant");
            });

            modelBuilder.Entity<CreditCardPaymentInformationService>(entity =>
            {
                entity.HasKey(e => new { e.PaymentInformationService, e.CreditCard });

                entity.ToTable("Credit_Card_Payment_Information_Service");

                entity.Property(e => e.PaymentInformationService).HasColumnName("payment_information_service");

                entity.Property(e => e.CreditCard).HasColumnName("credit_card");

                entity.HasOne(d => d.CreditCardNavigation)
                    .WithMany(p => p.CreditCardPaymentInformationServices)
                    .HasForeignKey(d => d.CreditCard)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Credit_Card_Payment_Information_Service_Cat_CreditCards");

                entity.HasOne(d => d.PaymentInformationServiceNavigation)
                    .WithMany(p => p.CreditCardPaymentInformationServices)
                    .HasForeignKey(d => d.PaymentInformationService)
                    .HasConstraintName("FK_Credit_Card_Payment_Information_Service_Payment_Information_Service");
            });

            modelBuilder.Entity<Departure>(entity =>
            {
                entity.ToTable("Departure");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ActualDepartureDate)
                    .HasColumnName("actual_departure_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Coordination).HasColumnName("coordination");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EstimatedDepartureDate)
                    .HasColumnName("estimated_departure_date")
                    .HasColumnType("date");

                entity.Property(e => e.LeaseTermin)
                    .HasColumnName("lease_termin")
                    .HasColumnType("date");

                entity.Property(e => e.PickupDate)
                    .HasColumnName("pickup_date")
                    .HasColumnType("date");

                entity.Property(e => e.PropertyDeparture).HasColumnName("property_departure");

                entity.Property(e => e.PropertyId).HasColumnName("property_id");

                entity.Property(e => e.ServiceCompletionDate)
                    .HasColumnName("service_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.WorkOrderServicesId).HasColumnName("work_order_services_id");

                entity.HasOne(d => d.Property)
                    .WithMany(p => p.Departures)
                    .HasForeignKey(d => d.PropertyId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Departure_Housing_List");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Departures)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Departure_Cat_StatusWorkOrder");

                entity.HasOne(d => d.WorkOrderServices)
                    .WithMany(p => p.Departures)
                    .HasForeignKey(d => d.WorkOrderServicesId)
                    .HasConstraintName("FK_Departure_Work_Order_Services");
            });

            modelBuilder.Entity<DepartureAssistanceWith>(entity =>
            {
                entity.ToTable("Departure_Assistance_With");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AssistanceWith).HasColumnName("assistance_with");

                entity.Property(e => e.CompletionDate)
                    .HasColumnName("completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DepartaureId).HasColumnName("departaure_id");

                entity.Property(e => e.OtherSpecify)
                    .HasColumnName("other_specify")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.AssistanceWithNavigation)
                    .WithMany(p => p.DepartureAssistanceWiths)
                    .HasForeignKey(d => d.AssistanceWith)
                    .HasConstraintName("FK_Deperture_Assitance_With_Cat_Assitance_With");

                entity.HasOne(d => d.Departaure)
                    .WithMany(p => p.DepartureAssistanceWiths)
                    .HasForeignKey(d => d.DepartaureId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Deperture_Assitance_With_Departure");
            });

            modelBuilder.Entity<DepartureCostSaving>(entity =>
            {
                entity.ToTable("Departure_Cost_Saving");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CostSavings)
                    .HasColumnName("cost_savings")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CostSavingsCurrency).HasColumnName("cost_savings_currency");

                entity.Property(e => e.CostType)
                    .HasColumnName("cost_type")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DepartureId).HasColumnName("departure_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CostSavingsCurrencyNavigation)
                    .WithMany(p => p.DepartureCostSavings)
                    .HasForeignKey(d => d.CostSavingsCurrency)
                    .HasConstraintName("FK_Departure_Cost_Saving_Cat_currency");
            });

            modelBuilder.Entity<DepartureDetail>(entity =>
            {
                entity.ToTable("Departure_Details");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Amount)
                    .HasColumnName("amount")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.CurrencyFinalRentPrice).HasColumnName("currency_final_rent_price");

                entity.Property(e => e.CurrencyListRentPrice).HasColumnName("currency_list_rent_price");

                entity.Property(e => e.CurrencyPenalty).HasColumnName("currency_penalty");

                entity.Property(e => e.DiplomaticCouse).HasColumnName("diplomatic_couse");

                entity.Property(e => e.EarlyTerminationNotification).HasColumnName("early_termination_notification");

                entity.Property(e => e.FinalRentPrice)
                    .HasColumnName("final_rent_price")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.HomeFindingId).HasColumnName("home_finding_id");

                entity.Property(e => e.LeaseEndDate)
                    .HasColumnName("lease_end_date")
                    .HasColumnType("date");

                entity.Property(e => e.LeaseStartDate)
                    .HasColumnName("lease_start_date")
                    .HasColumnType("date");

                entity.Property(e => e.ListRentPrice)
                    .HasColumnName("list_rent_price")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Penalty).HasColumnName("penalty");

                entity.Property(e => e.PermissionCreditSecurityDeposit).HasColumnName("permission_credit_security_deposit");

                entity.Property(e => e.ReturnSecurityDepositTo).HasColumnName("return_security_deposit_to");

                entity.HasOne(d => d.CurrencyFinalRentPriceNavigation)
                    .WithMany(p => p.DepartureDetailCurrencyFinalRentPriceNavigations)
                    .HasForeignKey(d => d.CurrencyFinalRentPrice)
                    .HasConstraintName("FK_Departure_Details_Cat_currency");

                entity.HasOne(d => d.CurrencyListRentPriceNavigation)
                    .WithMany(p => p.DepartureDetailCurrencyListRentPriceNavigations)
                    .HasForeignKey(d => d.CurrencyListRentPrice)
                    .HasConstraintName("FK_Departure_Details_Cat_currency1");

                entity.HasOne(d => d.CurrencyPenaltyNavigation)
                    .WithMany(p => p.DepartureDetailCurrencyPenaltyNavigations)
                    .HasForeignKey(d => d.CurrencyPenalty)
                    .HasConstraintName("FK_Departure_Details_Cat_currency2");

                entity.HasOne(d => d.ReturnSecurityDepositToNavigation)
                    .WithMany(p => p.DepartureDetails)
                    .HasForeignKey(d => d.ReturnSecurityDepositTo)
                    .HasConstraintName("FK_Departure_Details_dependent_information");
            });

            modelBuilder.Entity<DepartureDetailsHome>(entity =>
            {
                entity.ToTable("Departure_Details_Home");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .ValueGeneratedNever();

                entity.Property(e => e.Amount)
                    .HasColumnName("amount")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Currency).HasColumnName("currency");

                entity.Property(e => e.DiplomaticClause).HasColumnName("diplomatic_clause");

                entity.Property(e => e.EarlyTerminationNotification).HasColumnName("early_termination_notification");

                entity.Property(e => e.Penalty).HasColumnName("penalty");

                entity.Property(e => e.Permission).HasColumnName("permission");

                entity.Property(e => e.ReturnSecurityDepositTo).HasColumnName("return_security_deposit_to");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CurrencyNavigation)
                    .WithMany(p => p.DepartureDetailsHomes)
                    .HasForeignKey(d => d.Currency)
                    .HasConstraintName("FK_Departure_Details_Home_Cat_currency");

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.DepartureDetailsHome)
                    .HasForeignKey<DepartureDetailsHome>(d => d.Id)
                    .HasConstraintName("FK_Departure_Details_Home_Housing_List");

                entity.HasOne(d => d.ReturnSecurityDepositToNavigation)
                    .WithMany(p => p.DepartureDetailsHomes)
                    .HasForeignKey(d => d.ReturnSecurityDepositTo)
                    .HasConstraintName("FK_Departure_Details_Home_dependent_information");
            });

            modelBuilder.Entity<DeparturePayment>(entity =>
            {
                entity.ToTable("Departure_Payments");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DepartaureId).HasColumnName("departaure_id");

                entity.Property(e => e.PaymentResponsibility)
                    .HasColumnName("payment_responsibility")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentType)
                    .HasColumnName("payment_type")
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DependentImmigrationInfo>(entity =>
            {
                entity.ToTable("dependent_immigration_info");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DependentInformation).HasColumnName("dependent_information");

                entity.Property(e => e.EntryDateHostCountry)
                    .HasColumnName("entry_date_host_country")
                    .HasColumnType("date");

                entity.Property(e => e.Expiration)
                    .HasColumnName("expiration")
                    .HasColumnType("date");

                entity.Property(e => e.ImmigrationProfileId).HasColumnName("immigration_profile_id");

                entity.Property(e => e.Issue)
                    .HasColumnName("issue")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(100);

                entity.Property(e => e.PassportNumber)
                    .HasColumnName("passport_number")
                    .HasMaxLength(50);

                entity.Property(e => e.PlaceIssue)
                    .HasColumnName("place_issue")
                    .HasMaxLength(50);

                entity.Property(e => e.RelationshipId).HasColumnName("relationship_id");

                entity.Property(e => e.SpecificAttentionPoints)
                    .HasColumnName("specific_attention_points")
                    .HasMaxLength(200);

                entity.HasOne(d => d.DependentInformationNavigation)
                    .WithMany(p => p.DependentImmigrationInfos)
                    .HasForeignKey(d => d.DependentInformation)
                    .HasConstraintName("FK_dependent_immigration_info_dependent_information");

                entity.HasOne(d => d.ImmigrationProfile)
                    .WithMany(p => p.DependentImmigrationInfos)
                    .HasForeignKey(d => d.ImmigrationProfileId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_dependent_immigration_info_Immigration_profile");
            });

            modelBuilder.Entity<DependentInformation>(entity =>
            {
                entity.ToTable("dependent_information");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AditionalComments)
                    .HasColumnName("aditional_comments")
                    .HasMaxLength(100);

                entity.Property(e => e.Age).HasColumnName("age");

                entity.Property(e => e.AssigneeInformationId).HasColumnName("assignee_information_id");

                entity.Property(e => e.Birth)
                    .HasColumnName("birth")
                    .HasColumnType("date");

                entity.Property(e => e.CurrentGrade).HasColumnName("current_grade");

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IfOther)
                    .HasColumnName("if_other")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LanguagesId).HasColumnName("languages_id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(50);

                entity.Property(e => e.NationalityId).HasColumnName("nationality_id");

                entity.Property(e => e.Phone)
                    .HasColumnName("phone")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Photo)
                    .HasColumnName("photo")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RelationshipId).HasColumnName("relationship_id");

                entity.Property(e => e.Sex).HasColumnName("sex");

                entity.HasOne(d => d.AssigneeInformation)
                    .WithMany(p => p.DependentInformations)
                    .HasForeignKey(d => d.AssigneeInformationId)
                    .HasConstraintName("FK_dependent_information_assignee_information");

                entity.HasOne(d => d.Relationship)
                    .WithMany(p => p.DependentInformations)
                    .HasForeignKey(d => d.RelationshipId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dependent_information_Cat_Relationship");

                entity.HasOne(d => d.SexNavigation)
                    .WithMany(p => p.DependentInformations)
                    .HasForeignKey(d => d.Sex)
                    .HasConstraintName("FK_dependent_information_Cat_Sex");
            });

            modelBuilder.Entity<DocumentAdministrativeContactsConsultant>(entity =>
            {
                entity.ToTable("Document_Administrative_Contacts_Consultant");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AdministrativeContactsConsultant).HasColumnName("administrative_contacts_consultant");

                entity.Property(e => e.City).HasColumnName("city");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FilePath)
                    .HasColumnName("file_path")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Privacy).HasColumnName("privacy");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.AdministrativeContactsConsultantNavigation)
                    .WithMany(p => p.DocumentAdministrativeContactsConsultants)
                    .HasForeignKey(d => d.AdministrativeContactsConsultant)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Administrative_Contacts_Consultant_Administrative_Contacts_Consultant");

                entity.HasOne(d => d.CityNavigation)
                    .WithMany(p => p.DocumentAdministrativeContactsConsultants)
                    .HasForeignKey(d => d.City)
                    .HasConstraintName("FK_Document_Administrative_Contacts_Consultant_Cat_State");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentAdministrativeContactsConsultants)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Administrative_Contacts_Consultant_Cat_DocumentType");

                entity.HasOne(d => d.PrivacyNavigation)
                    .WithMany(p => p.DocumentAdministrativeContactsConsultants)
                    .HasForeignKey(d => d.Privacy)
                    .HasConstraintName("FK_Document_Administrative_Contacts_Consultant_Cat_Privacy");
            });

            modelBuilder.Entity<DocumentAdministrativeContactsService>(entity =>
            {
                entity.ToTable("Document_Administrative_Contacts_Service");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AdministrativeContactsService).HasColumnName("administrative_contacts_service");

                entity.Property(e => e.City).HasColumnName("city");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FilePath)
                    .HasColumnName("file_path")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Privacy).HasColumnName("privacy");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.AdministrativeContactsServiceNavigation)
                    .WithMany(p => p.DocumentAdministrativeContactsServices)
                    .HasForeignKey(d => d.AdministrativeContactsService)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Administrative_Contacts_Service_Administrative_Contacts_Service");

                entity.HasOne(d => d.CityNavigation)
                    .WithMany(p => p.DocumentAdministrativeContactsServices)
                    .HasForeignKey(d => d.City)
                    .HasConstraintName("FK_Document_Administrative_Contacts_Service_Cat_State");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentAdministrativeContactsServices)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Administrative_Contacts_Service_Cat_DocumentType");

                entity.HasOne(d => d.PrivacyNavigation)
                    .WithMany(p => p.DocumentAdministrativeContactsServices)
                    .HasForeignKey(d => d.Privacy)
                    .HasConstraintName("FK_Document_Administrative_Contacts_Service_Cat_Privacy");
            });

            modelBuilder.Entity<DocumentAirportTransportationService>(entity =>
            {
                entity.ToTable("Document_Airport_Transportation_Services");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AirportTransportationServicesId).HasColumnName("airport_transportation_services_id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Privacy).HasColumnName("privacy");

                entity.Property(e => e.Relationship).HasColumnName("relationship");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.AirportTransportationServices)
                    .WithMany(p => p.DocumentAirportTransportationServices)
                    .HasForeignKey(d => d.AirportTransportationServicesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Airport_Transportation_Services_Airport_Transportation_Services");

                entity.HasOne(d => d.CountryOriginNavigation)
                    .WithMany(p => p.DocumentAirportTransportationServices)
                    .HasForeignKey(d => d.CountryOrigin)
                    .HasConstraintName("FK_Document_Airport_Transportation_Services_Cat_Country");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentAirportTransportationServices)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Airport_Transportation_Services_Cat_DocumentType");

                entity.HasOne(d => d.PrivacyNavigation)
                    .WithMany(p => p.DocumentAirportTransportationServices)
                    .HasForeignKey(d => d.Privacy)
                    .HasConstraintName("FK_Document_Airport_Transportation_Services_Cat_Privacy");

                entity.HasOne(d => d.RelationshipNavigation)
                    .WithMany(p => p.DocumentAirportTransportationServices)
                    .HasForeignKey(d => d.Relationship)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Airport_Transportation_Services_dependent_information");
            });

            modelBuilder.Entity<DocumentAppointment>(entity =>
            {
                entity.ToTable("Document_Appointment");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AppointmentId).HasColumnName("appointment_id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.HasOne(d => d.Appointment)
                    .WithMany(p => p.DocumentAppointments)
                    .HasForeignKey(d => d.AppointmentId)
                    .HasConstraintName("FK_Document_Appointment_Appointment");
            });

            modelBuilder.Entity<DocumentAreaOrientation>(entity =>
            {
                entity.ToTable("Document_Area_Orientation");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AreaOrientationId).HasColumnName("area_orientation_id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .HasColumnName("file_request")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Privacy).HasColumnName("privacy");

                entity.Property(e => e.Relationship).HasColumnName("relationship");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.AreaOrientation)
                    .WithMany(p => p.DocumentAreaOrientations)
                    .HasForeignKey(d => d.AreaOrientationId)
                    .HasConstraintName("FK_Document_Area_Orientation_Area_Orientation");

                entity.HasOne(d => d.CountryOriginNavigation)
                    .WithMany(p => p.DocumentAreaOrientations)
                    .HasForeignKey(d => d.CountryOrigin)
                    .HasConstraintName("FK_Document_Area_Orientation_Cat_Country");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentAreaOrientations)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Area_Orientation_Cat_DocumentType");

                entity.HasOne(d => d.PrivacyNavigation)
                    .WithMany(p => p.DocumentAreaOrientations)
                    .HasForeignKey(d => d.Privacy)
                    .HasConstraintName("FK_Document_Area_Orientation_Cat_Privacy");

                entity.HasOne(d => d.RelationshipNavigation)
                    .WithMany(p => p.DocumentAreaOrientations)
                    .HasForeignKey(d => d.Relationship)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Area_Orientation_dependent_information");
            });

            modelBuilder.Entity<DocumentAreasCoverageConsultant>(entity =>
            {
                entity.ToTable("Document_Areas_Coverage_Consultant");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AreaCoverage).HasColumnName("area_coverage");

                entity.Property(e => e.City).HasColumnName("city");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FilePath)
                    .HasColumnName("file_path")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Privacy).HasColumnName("privacy");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.AreaCoverageNavigation)
                    .WithMany(p => p.DocumentAreasCoverageConsultants)
                    .HasForeignKey(d => d.AreaCoverage)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Areas_Coverage_Consultant_Areas_Coverage_Consultant");

                entity.HasOne(d => d.CityNavigation)
                    .WithMany(p => p.DocumentAreasCoverageConsultants)
                    .HasForeignKey(d => d.City)
                    .HasConstraintName("FK_Document_Areas_Coverage_Consultant_Cat_State");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentAreasCoverageConsultants)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Areas_Coverage_Consultant_Cat_DocumentType");

                entity.HasOne(d => d.PrivacyNavigation)
                    .WithMany(p => p.DocumentAreasCoverageConsultants)
                    .HasForeignKey(d => d.Privacy)
                    .HasConstraintName("FK_Document_Areas_Coverage_Consultant_Cat_Privacy");
            });

            modelBuilder.Entity<DocumentAreasCoverageService>(entity =>
            {
                entity.ToTable("Document_Areas_Coverage_Service");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AreaCoverage).HasColumnName("area_coverage");

                entity.Property(e => e.City).HasColumnName("city");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FilePath)
                    .HasColumnName("file_path")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Privacy).HasColumnName("privacy");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.AreaCoverageNavigation)
                    .WithMany(p => p.DocumentAreasCoverageServices)
                    .HasForeignKey(d => d.AreaCoverage)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Areas_Coverage_Service_Areas_Coverage_Service");

                entity.HasOne(d => d.CityNavigation)
                    .WithMany(p => p.DocumentAreasCoverageServices)
                    .HasForeignKey(d => d.City)
                    .HasConstraintName("FK_Document_Areas_Coverage_Service_Cat_State");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentAreasCoverageServices)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Areas_Coverage_Service_Cat_DocumentType");

                entity.HasOne(d => d.PrivacyNavigation)
                    .WithMany(p => p.DocumentAreasCoverageServices)
                    .HasForeignKey(d => d.Privacy)
                    .HasConstraintName("FK_Document_Areas_Coverage_Service_Cat_Privacy");
            });

            modelBuilder.Entity<DocumentClientPartnerProfile>(entity =>
            {
                entity.ToTable("Document_Client_Partner_Profile");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comments)
                    .IsRequired()
                    .HasColumnName("comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasColumnName("file_name")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(600)
                    .IsUnicode(false);

                entity.Property(e => e.IdClientPartnerProfile).HasColumnName("id_client_partner_profile");

                entity.Property(e => e.IdDocumentType).HasColumnName("id_document_type");

                entity.Property(e => e.Privacy).HasColumnName("privacy");

                entity.Property(e => e.UploadDate)
                    .HasColumnName("upload_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.IdClientPartnerProfileNavigation)
                    .WithMany(p => p.DocumentClientPartnerProfiles)
                    .HasForeignKey(d => d.IdClientPartnerProfile)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Document_Client_Partner_Profile_Client_Partner_Profile");

                entity.HasOne(d => d.IdDocumentTypeNavigation)
                    .WithMany(p => p.DocumentClientPartnerProfiles)
                    .HasForeignKey(d => d.IdDocumentType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Document_Client_Partner_Profile_Cat_DocumentType");
            });

            modelBuilder.Entity<DocumentConsultantContactsConsultant>(entity =>
            {
                entity.ToTable("Document_Consultant_Contacts_Consultant");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ConsultantContactsService).HasColumnName("consultant_contacts_service");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FilePath)
                    .HasColumnName("file_path")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Location)
                    .HasColumnName("location")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Privacy).HasColumnName("privacy");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.ConsultantContactsServiceNavigation)
                    .WithMany(p => p.DocumentConsultantContactsConsultants)
                    .HasForeignKey(d => d.ConsultantContactsService)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Consultant_Contacts_Consultant_Consultant_Contacts_Consultant");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentConsultantContactsConsultants)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Consultant_Contacts_Consultant_Cat_DocumentType");

                entity.HasOne(d => d.PrivacyNavigation)
                    .WithMany(p => p.DocumentConsultantContactsConsultants)
                    .HasForeignKey(d => d.Privacy)
                    .HasConstraintName("FK_Document_Consultant_Contacts_Consultant_Cat_Privacy");

                entity.HasOne(d => d.StatusNavigation)
                    .WithMany(p => p.DocumentConsultantContactsConsultants)
                    .HasForeignKey(d => d.Status)
                    .HasConstraintName("FK_Document_Consultant_Contacts_Consultant_Cat_DocumentStatus");
            });

            modelBuilder.Entity<DocumentConsultantContactsService>(entity =>
            {
                entity.ToTable("Document_Consultant_Contacts_Service");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.City).HasColumnName("city");

                entity.Property(e => e.ConsultantContactsService).HasColumnName("consultant_contacts_service");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FilePath)
                    .HasColumnName("file_path")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Privacy).HasColumnName("privacy");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.CityNavigation)
                    .WithMany(p => p.DocumentConsultantContactsServices)
                    .HasForeignKey(d => d.City)
                    .HasConstraintName("FK_Document_Consultant_Contacts_Service_Cat_State");

                entity.HasOne(d => d.ConsultantContactsServiceNavigation)
                    .WithMany(p => p.DocumentConsultantContactsServices)
                    .HasForeignKey(d => d.ConsultantContactsService)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Consultant_Contacts_Service_Consultant_Contacts_Service");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentConsultantContactsServices)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Consultant_Contacts_Service_Cat_DocumentType");

                entity.HasOne(d => d.PrivacyNavigation)
                    .WithMany(p => p.DocumentConsultantContactsServices)
                    .HasForeignKey(d => d.Privacy)
                    .HasConstraintName("FK_Document_Consultant_Contacts_Service_Cat_Privacy");
            });

            modelBuilder.Entity<DocumentCorporateAssistance>(entity =>
            {
                entity.ToTable("Document_Corporate_Assistance");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CorporateAssistanceId).HasColumnName("corporate_assistance_id");

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Relationship).HasColumnName("relationship");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CorporateAssistance)
                    .WithMany(p => p.DocumentCorporateAssistances)
                    .HasForeignKey(d => d.CorporateAssistanceId)
                    .HasConstraintName("FK_Document_Corporate_Assistance_Corporate_Assistance");

                entity.HasOne(d => d.CountryOriginNavigation)
                    .WithMany(p => p.DocumentCorporateAssistances)
                    .HasForeignKey(d => d.CountryOrigin)
                    .HasConstraintName("FK_Document_Corporate_Assistance_Cat_Country");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentCorporateAssistances)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Corporate_Assistance_Cat_DocumentType");

                entity.HasOne(d => d.RelationshipNavigation)
                    .WithMany(p => p.DocumentCorporateAssistances)
                    .HasForeignKey(d => d.Relationship)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Corporate_Assistance_dependent_information");
            });

            modelBuilder.Entity<DocumentDeparture>(entity =>
            {
                entity.ToTable("Document_Departure");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DepartaureId).HasColumnName("departaure_id");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Privacy).HasColumnName("privacy");

                entity.Property(e => e.Relationship).HasColumnName("relationship");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CountryOriginNavigation)
                    .WithMany(p => p.DocumentDepartures)
                    .HasForeignKey(d => d.CountryOrigin)
                    .HasConstraintName("FK_Document_Departure_Cat_Country");

                entity.HasOne(d => d.Departaure)
                    .WithMany(p => p.DocumentDepartures)
                    .HasForeignKey(d => d.DepartaureId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Departure_Departure");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentDepartures)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Departure_Cat_DocumentType");

                entity.HasOne(d => d.PrivacyNavigation)
                    .WithMany(p => p.DocumentDepartures)
                    .HasForeignKey(d => d.Privacy)
                    .HasConstraintName("FK_Document_Departure_Cat_Privacy");
            });

            modelBuilder.Entity<DocumentDependentInformation>(entity =>
            {
                entity.ToTable("Document_dependent_information");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DependentInformation).HasColumnName("dependent_information");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .HasColumnName("file_request")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Relationship).HasColumnName("relationship");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CountryOriginNavigation)
                    .WithMany(p => p.DocumentDependentInformations)
                    .HasForeignKey(d => d.CountryOrigin)
                    .HasConstraintName("FK_Document_dependent_immigration_info_Cat_Country");

                entity.HasOne(d => d.DependentInformationNavigation)
                    .WithMany(p => p.DocumentDependentInformations)
                    .HasForeignKey(d => d.DependentInformation)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_dependent_information_dependent_information");
            });

            modelBuilder.Entity<DocumentDocumentManagement>(entity =>
            {
                entity.ToTable("Document_Document_Management");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DocumentManagementId).HasColumnName("document_management_id");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Relationship).HasColumnName("relationship");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CountryOriginNavigation)
                    .WithMany(p => p.DocumentDocumentManagements)
                    .HasForeignKey(d => d.CountryOrigin)
                    .HasConstraintName("FK_Document_Document_Management_Cat_Country");

                entity.HasOne(d => d.DocumentManagement)
                    .WithMany(p => p.DocumentDocumentManagements)
                    .HasForeignKey(d => d.DocumentManagementId)
                    .HasConstraintName("FK_Document_Document_Management_Document_Management");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentDocumentManagements)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Document_Management_Cat_DocumentType");

                entity.HasOne(d => d.RelationshipNavigation)
                    .WithMany(p => p.DocumentDocumentManagements)
                    .HasForeignKey(d => d.Relationship)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Document_Management_dependent_information");
            });

            modelBuilder.Entity<DocumentEntryVisa>(entity =>
            {
                entity.ToTable("Document_Entry_Visa");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.EntryVisaId).HasColumnName("entry_visa_id");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Relationship).HasColumnName("relationship");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CountryOriginNavigation)
                    .WithMany(p => p.DocumentEntryVisas)
                    .HasForeignKey(d => d.CountryOrigin)
                    .HasConstraintName("FK_Document_Entry_Visa_Nationality");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentEntryVisas)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Entry_Visa_Cat_DocumentType");

                entity.HasOne(d => d.EntryVisa)
                    .WithMany(p => p.DocumentEntryVisas)
                    .HasForeignKey(d => d.EntryVisaId)
                    .HasConstraintName("FK_Document_Entry_Visa_Entry_Visa");

                entity.HasOne(d => d.RelationshipNavigation)
                    .WithMany(p => p.DocumentEntryVisas)
                    .HasForeignKey(d => d.Relationship)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Entry_Visa_dependent_information");
            });

            modelBuilder.Entity<DocumentGeneralContractPricingInfo>(entity =>
            {
                entity.ToTable("Document_General_Contract_Pricing_Info");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentName)
                    .IsRequired()
                    .HasColumnName("document_name")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.IdDocumentType).HasColumnName("id_document_type");

                entity.Property(e => e.IdGeneralContractPricingInfo).HasColumnName("id_general_contract_pricing_info");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("update_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.IdDocumentTypeNavigation)
                    .WithMany(p => p.DocumentGeneralContractPricingInfos)
                    .HasForeignKey(d => d.IdDocumentType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Document_General_Contract_Pricing_Info_Cat_DocumentType");

                entity.HasOne(d => d.IdGeneralContractPricingInfoNavigation)
                    .WithMany(p => p.DocumentGeneralContractPricingInfos)
                    .HasForeignKey(d => d.IdGeneralContractPricingInfo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Document_General_Contract_Pricing_Info_General_Contract_Pricing_Info");
            });

            modelBuilder.Entity<DocumentHomeFinding>(entity =>
            {
                entity.ToTable("Document_Home_Finding");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.HomeFindingId).HasColumnName("home_finding_id");

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Privacy).HasColumnName("privacy");

                entity.Property(e => e.Relationship).HasColumnName("relationship");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CountryOriginNavigation)
                    .WithMany(p => p.DocumentHomeFindings)
                    .HasForeignKey(d => d.CountryOrigin)
                    .HasConstraintName("FK_Document_Home_Finding_Cat_Country");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentHomeFindings)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Home_Finding_Cat_DocumentType");

                entity.HasOne(d => d.HomeFinding)
                    .WithMany(p => p.DocumentHomeFindings)
                    .HasForeignKey(d => d.HomeFindingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Document_Home_Finding_Home_Finding");

                entity.HasOne(d => d.PrivacyNavigation)
                    .WithMany(p => p.DocumentHomeFindings)
                    .HasForeignKey(d => d.Privacy)
                    .HasConstraintName("FK_Document_Home_Finding_Cat_Privacy");

                entity.HasOne(d => d.RelationshipNavigation)
                    .WithMany(p => p.DocumentHomeFindings)
                    .HasForeignKey(d => d.Relationship)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Home_Finding_dependent_information");
            });

            modelBuilder.Entity<DocumentHomePurchase>(entity =>
            {
                entity.ToTable("Document_Home_Purchase");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasColumnName("file_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.HomePurchase).HasColumnName("home_purchase");

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Privacy).HasColumnName("privacy");

                entity.Property(e => e.Relationship).HasColumnName("relationship");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CountryOriginNavigation)
                    .WithMany(p => p.DocumentHomePurchases)
                    .HasForeignKey(d => d.CountryOrigin)
                    .HasConstraintName("FK_Document_Home_Purchase_Cat_Country");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentHomePurchases)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Home_Purchase_Cat_DocumentType");

                entity.HasOne(d => d.HomePurchaseNavigation)
                    .WithMany(p => p.DocumentHomePurchases)
                    .HasForeignKey(d => d.HomePurchase)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Document_Home_Purchase_Home_Purchase");

                entity.HasOne(d => d.PrivacyNavigation)
                    .WithMany(p => p.DocumentHomePurchases)
                    .HasForeignKey(d => d.Privacy)
                    .HasConstraintName("FK_Document_Home_Purchase_Cat_Privacy");

                entity.HasOne(d => d.RelationshipNavigation)
                    .WithMany(p => p.DocumentHomePurchases)
                    .HasForeignKey(d => d.Relationship)
                    .HasConstraintName("FK_Document_Home_Purchase_dependent_information");
            });

            modelBuilder.Entity<DocumentHomeSale>(entity =>
            {
                entity.ToTable("Document_Home_Sale");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasColumnName("file_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.HomeSale).HasColumnName("home_sale");

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Privacy).HasColumnName("privacy");

                entity.Property(e => e.Relationship).HasColumnName("relationship");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CountryOriginNavigation)
                    .WithMany(p => p.DocumentHomeSales)
                    .HasForeignKey(d => d.CountryOrigin)
                    .HasConstraintName("FK_Document_Home_Sale_Cat_Country");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentHomeSales)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Home_Sale_Cat_DocumentType");

                entity.HasOne(d => d.HomeSaleNavigation)
                    .WithMany(p => p.DocumentHomeSales)
                    .HasForeignKey(d => d.HomeSale)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Document_Home_Sale_Home_Sale");

                entity.HasOne(d => d.PrivacyNavigation)
                    .WithMany(p => p.DocumentHomeSales)
                    .HasForeignKey(d => d.Privacy)
                    .HasConstraintName("FK_Document_Home_Sale_Cat_Privacy");

                entity.HasOne(d => d.RelationshipNavigation)
                    .WithMany(p => p.DocumentHomeSales)
                    .HasForeignKey(d => d.Relationship)
                    .HasConstraintName("FK_Document_Home_Sale_dependent_information");
            });

            modelBuilder.Entity<DocumentHousing>(entity =>
            {
                entity.ToTable("Document_Housing");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreationBy).HasColumnName("creation_by");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FilePath)
                    .HasColumnName("file_path")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.HousingId).HasColumnName("housing_id");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.Housing)
                    .WithMany(p => p.DocumentHousings)
                    .HasForeignKey(d => d.HousingId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Housing_Housing_List");
            });

            modelBuilder.Entity<DocumentInvoice>(entity =>
            {
                entity.ToTable("Document_Invoice");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FilePath)
                    .HasColumnName("file_path")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Invoice).HasColumnName("invoice");

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Type).HasColumnName("type");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.CountryOriginNavigation)
                    .WithMany(p => p.DocumentInvoices)
                    .HasForeignKey(d => d.CountryOrigin)
                    .HasConstraintName("FK_Document_Invoice_Cat_Country");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentInvoices)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Invoice_Cat_DocumentType");

                entity.HasOne(d => d.InvoiceNavigation)
                    .WithMany(p => p.DocumentInvoices)
                    .HasForeignKey(d => d.Invoice)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Invoice_Invoice");
            });

            modelBuilder.Entity<DocumentLeaseRenewal>(entity =>
            {
                entity.ToTable("Document_Lease_Renewal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasColumnName("file_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LeaseRenewal).HasColumnName("lease_renewal");

                entity.Property(e => e.Privacy).HasColumnName("privacy");

                entity.Property(e => e.Relationship).HasColumnName("relationship");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CountryOriginNavigation)
                    .WithMany(p => p.DocumentLeaseRenewals)
                    .HasForeignKey(d => d.CountryOrigin)
                    .HasConstraintName("FK_Document_Lease_Renewal_Cat_Country");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentLeaseRenewals)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Lease_Renewal_Cat_DocumentType");

                entity.HasOne(d => d.LeaseRenewalNavigation)
                    .WithMany(p => p.DocumentLeaseRenewals)
                    .HasForeignKey(d => d.LeaseRenewal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Document_Lease_Renewal_Lease_Renewal");

                entity.HasOne(d => d.PrivacyNavigation)
                    .WithMany(p => p.DocumentLeaseRenewals)
                    .HasForeignKey(d => d.Privacy)
                    .HasConstraintName("FK_Document_Lease_Renewal_Cat_Privacy");

                entity.HasOne(d => d.RelationshipNavigation)
                    .WithMany(p => p.DocumentLeaseRenewals)
                    .HasForeignKey(d => d.Relationship)
                    .HasConstraintName("FK_Document_Lease_Renewal_dependent_information");
            });

            modelBuilder.Entity<DocumentLegalReview>(entity =>
            {
                entity.ToTable("Document_Legal_Review");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LegalReviewId).HasColumnName("legal_review_id");

                entity.Property(e => e.Relationship).HasColumnName("relationship");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CountryOriginNavigation)
                    .WithMany(p => p.DocumentLegalReviews)
                    .HasForeignKey(d => d.CountryOrigin)
                    .HasConstraintName("FK_Document_Legal_Review_Cat_Country");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentLegalReviews)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Legal_Review_Cat_DocumentType");

                entity.HasOne(d => d.LegalReview)
                    .WithMany(p => p.DocumentLegalReviews)
                    .HasForeignKey(d => d.LegalReviewId)
                    .HasConstraintName("FK_Document_Legal_Review_Legal_Review");

                entity.HasOne(d => d.RelationshipNavigation)
                    .WithMany(p => p.DocumentLegalReviews)
                    .HasForeignKey(d => d.Relationship)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Legal_Review_dependent_information");
            });

            modelBuilder.Entity<DocumentLocalDocumentation>(entity =>
            {
                entity.ToTable("Document_Local_Documentation");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LocalDocumentationId).HasColumnName("local_documentation_id");

                entity.Property(e => e.Relationship).HasColumnName("relationship");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CountryOriginNavigation)
                    .WithMany(p => p.DocumentLocalDocumentations)
                    .HasForeignKey(d => d.CountryOrigin)
                    .HasConstraintName("FK_Document_Local_Documentation_Cat_Country");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentLocalDocumentations)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Local_Documentation_Cat_DocumentType");

                entity.HasOne(d => d.LocalDocumentation)
                    .WithMany(p => p.DocumentLocalDocumentations)
                    .HasForeignKey(d => d.LocalDocumentationId)
                    .HasConstraintName("FK_Document_Local_Documentation_Local_Documentation");

                entity.HasOne(d => d.RelationshipNavigation)
                    .WithMany(p => p.DocumentLocalDocumentations)
                    .HasForeignKey(d => d.Relationship)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Local_Documentation_dependent_information");
            });

            modelBuilder.Entity<DocumentLocationCountry>(entity =>
            {
                entity.ToTable("Document_Location_Country");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasColumnName("file_name")
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IdDocumentType).HasColumnName("id_document_type");

                entity.Property(e => e.IdServiceLocationCountry).HasColumnName("id_service_location_country");

                entity.Property(e => e.Privacy).HasColumnName("privacy");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.UploadDate)
                    .HasColumnName("upload_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.IdDocumentTypeNavigation)
                    .WithMany(p => p.DocumentLocationCountries)
                    .HasForeignKey(d => d.IdDocumentType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Document_Location_Country_Cat_DocumentType");

                entity.HasOne(d => d.IdServiceLocationCountryNavigation)
                    .WithMany(p => p.DocumentLocationCountries)
                    .HasForeignKey(d => d.IdServiceLocationCountry)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Document_Location_Country_Service_Location_Country");

                entity.HasOne(d => d.PrivacyNavigation)
                    .WithMany(p => p.DocumentLocationCountries)
                    .HasForeignKey(d => d.Privacy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Document_Location_Country_Cat_Privacy");

                entity.HasOne(d => d.StatusNavigation)
                    .WithMany(p => p.DocumentLocationCountries)
                    .HasForeignKey(d => d.Status)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Document_Location_Country_Cat_DocumentStatus");
            });

            modelBuilder.Entity<DocumentManagement>(entity =>
            {
                entity.ToTable("Document_Management");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApplicantId).HasColumnName("applicant_id");

                entity.Property(e => e.ApplicationApprovalDate)
                    .HasColumnName("application_approval_date")
                    .HasColumnType("date");

                entity.Property(e => e.ApplicationSubmissionDate)
                    .HasColumnName("application_submission_date")
                    .HasColumnType("date");

                entity.Property(e => e.AppointmentDate)
                    .HasColumnName("appointment_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DocumentCollectionCompletionDate)
                    .HasColumnName("document_collection_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentCollectionStartDate)
                    .HasColumnName("document_collection_start_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentDeliveryDate)
                    .HasColumnName("document_delivery_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentExpirationDate)
                    .HasColumnName("document_expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentTypeId).HasColumnName("document_type_id");

                entity.Property(e => e.HostCityId).HasColumnName("host_city_id");

                entity.Property(e => e.HostCountryId).HasColumnName("host_country_id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectFee)
                    .HasColumnName("project_fee")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceCompletionDate)
                    .HasColumnName("service_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.ServiceId).HasColumnName("service_id");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.SupplierId).HasColumnName("supplier_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.WorkOrderServicesId).HasColumnName("work_order_services_id");

                entity.HasOne(d => d.DocumentType)
                    .WithMany(p => p.DocumentManagements)
                    .HasForeignKey(d => d.DocumentTypeId)
                    .HasConstraintName("FK_Document_Management_Cat_DocumentType");

                entity.HasOne(d => d.HostCity)
                    .WithMany(p => p.DocumentManagements)
                    .HasForeignKey(d => d.HostCityId)
                    .HasConstraintName("FK_Document_Management_Cat_State");

                entity.HasOne(d => d.HostCountry)
                    .WithMany(p => p.DocumentManagements)
                    .HasForeignKey(d => d.HostCountryId)
                    .HasConstraintName("FK_Document_Management_Cat_Country");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.DocumentManagements)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_Document_Management_Cat_Service");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.DocumentManagements)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Document_Management_Cat_Status");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.DocumentManagements)
                    .HasForeignKey(d => d.SupplierId)
                    .HasConstraintName("FK_Document_Management_Profile_User");

                entity.HasOne(d => d.WorkOrderServices)
                    .WithMany(p => p.DocumentManagements)
                    .HasForeignKey(d => d.WorkOrderServicesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Management_Service_Order_Services");
            });

            modelBuilder.Entity<DocumentMessage>(entity =>
            {
                entity.ToTable("Document_Message");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Date)
                    .HasColumnName("date")
                    .HasColumnType("date");

                entity.Property(e => e.FilePath)
                    .HasColumnName("file_path")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Message).HasColumnName("message");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.HasOne(d => d.MessageNavigation)
                    .WithMany(p => p.DocumentMessages)
                    .HasForeignKey(d => d.Message)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Message_Message");
            });

            modelBuilder.Entity<DocumentNotification>(entity =>
            {
                entity.ToTable("Document_Notification");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NotificationId).HasColumnName("notification_id");

                entity.Property(e => e.Relationship).HasColumnName("relationship");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CountryOriginNavigation)
                    .WithMany(p => p.DocumentNotifications)
                    .HasForeignKey(d => d.CountryOrigin)
                    .HasConstraintName("FK_Document_Notification_Cat_Country");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentNotifications)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Notification_Cat_DocumentType");

                entity.HasOne(d => d.Notification)
                    .WithMany(p => p.DocumentNotifications)
                    .HasForeignKey(d => d.NotificationId)
                    .HasConstraintName("FK_Document_Notification_Notification");

                entity.HasOne(d => d.RelationshipNavigation)
                    .WithMany(p => p.DocumentNotifications)
                    .HasForeignKey(d => d.Relationship)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Notification_dependent_information");
            });

            modelBuilder.Entity<DocumentOfficeInformation>(entity =>
            {
                entity.ToTable("Document_Office_Information");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .HasColumnName("file_request")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IdDocumentType).HasColumnName("id_document_type");

                entity.Property(e => e.IdOfficeInformation).HasColumnName("id_Office_Information");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.IdDocumentTypeNavigation)
                    .WithMany(p => p.DocumentOfficeInformations)
                    .HasForeignKey(d => d.IdDocumentType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Document_Office_Information_Cat_DocumentType");

                entity.HasOne(d => d.IdOfficeInformationNavigation)
                    .WithMany(p => p.DocumentOfficeInformations)
                    .HasForeignKey(d => d.IdOfficeInformation)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Document_Office_Information_Office_Information");
            });

            modelBuilder.Entity<DocumentOther>(entity =>
            {
                entity.ToTable("Document_Other");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.CountryOriginImmi).HasColumnName("country_origin_immi");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasColumnName("file_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Other).HasColumnName("other");

                entity.Property(e => e.Privacy).HasColumnName("privacy");

                entity.Property(e => e.Relationship).HasColumnName("relationship");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CountryOriginNavigation)
                    .WithMany(p => p.DocumentOthers)
                    .HasForeignKey(d => d.CountryOrigin)
                    .HasConstraintName("FK_Document_Other_Cat_Country");

                entity.HasOne(d => d.CountryOriginImmiNavigation)
                    .WithMany(p => p.DocumentOthers)
                    .HasForeignKey(d => d.CountryOriginImmi)
                    .HasConstraintName("FK_Document_Other_Nationality");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentOthers)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Other_Cat_DocumentType");

                entity.HasOne(d => d.OtherNavigation)
                    .WithMany(p => p.DocumentOthers)
                    .HasForeignKey(d => d.Other)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Document_Other_Other");

                entity.HasOne(d => d.PrivacyNavigation)
                    .WithMany(p => p.DocumentOthers)
                    .HasForeignKey(d => d.Privacy)
                    .HasConstraintName("FK_Document_Other_Cat_Privacy");

                entity.HasOne(d => d.RelationshipNavigation)
                    .WithMany(p => p.DocumentOthers)
                    .HasForeignKey(d => d.Relationship)
                    .HasConstraintName("FK_Document_Other_dependent_information");
            });

            modelBuilder.Entity<DocumentPaymentConcept>(entity =>
            {
                entity.ToTable("Document_Payment_Concept");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentConcept).HasColumnName("payment_concept");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CountryOriginNavigation)
                    .WithMany(p => p.DocumentPaymentConcepts)
                    .HasForeignKey(d => d.CountryOrigin)
                    .HasConstraintName("FK_Document_Payment_Concept_Cat_Country");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentPaymentConcepts)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Payment_Concept_Cat_DocumentType");

                entity.HasOne(d => d.PaymentConceptNavigation)
                    .WithMany(p => p.DocumentPaymentConcepts)
                    .HasForeignKey(d => d.PaymentConcept)
                    .HasConstraintName("FK_Document_Payment_Concept_Payment_Concept");
            });

            modelBuilder.Entity<DocumentPredecisionOrientation>(entity =>
            {
                entity.ToTable("Document_Predecision_Orientation");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .HasColumnName("file_request")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PredecisionOrientationId).HasColumnName("predecision_orientation_id");

                entity.Property(e => e.Privacy).HasColumnName("privacy");

                entity.Property(e => e.Relationship).HasColumnName("relationship");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CountryOriginNavigation)
                    .WithMany(p => p.DocumentPredecisionOrientations)
                    .HasForeignKey(d => d.CountryOrigin)
                    .HasConstraintName("FK_Document_Predecision_Orientation_Cat_Country");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentPredecisionOrientations)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Predecision_Orientation_Cat_DocumentType");

                entity.HasOne(d => d.PredecisionOrientation)
                    .WithMany(p => p.DocumentPredecisionOrientations)
                    .HasForeignKey(d => d.PredecisionOrientationId)
                    .HasConstraintName("FK_Document_Predicision_Orientation_Predicision_Orientation");

                entity.HasOne(d => d.PrivacyNavigation)
                    .WithMany(p => p.DocumentPredecisionOrientations)
                    .HasForeignKey(d => d.Privacy)
                    .HasConstraintName("FK_Document_Predecision_Orientation_Cat_Privacy");

                entity.HasOne(d => d.RelationshipNavigation)
                    .WithMany(p => p.DocumentPredecisionOrientations)
                    .HasForeignKey(d => d.Relationship)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Predecision_Orientation_dependent_information");
            });

            modelBuilder.Entity<DocumentPropertyManagement>(entity =>
            {
                entity.ToTable("Document_Property_Management");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasColumnName("file_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Privacy).HasColumnName("privacy");

                entity.Property(e => e.PropertyManagement).HasColumnName("property_management");

                entity.Property(e => e.Relationship).HasColumnName("relationship");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CountryOriginNavigation)
                    .WithMany(p => p.DocumentPropertyManagements)
                    .HasForeignKey(d => d.CountryOrigin)
                    .HasConstraintName("FK_Document_Property_Management_Cat_Country");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentPropertyManagements)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Property_Management_Cat_DocumentType");

                entity.HasOne(d => d.PrivacyNavigation)
                    .WithMany(p => p.DocumentPropertyManagements)
                    .HasForeignKey(d => d.Privacy)
                    .HasConstraintName("FK_Document_Property_Management_Cat_Privacy");

                entity.HasOne(d => d.PropertyManagementNavigation)
                    .WithMany(p => p.DocumentPropertyManagements)
                    .HasForeignKey(d => d.PropertyManagement)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Document_Property_Management_Property_Management");

                entity.HasOne(d => d.RelationshipNavigation)
                    .WithMany(p => p.DocumentPropertyManagements)
                    .HasForeignKey(d => d.Relationship)
                    .HasConstraintName("FK_Document_Property_Management_dependent_information");
            });

            modelBuilder.Entity<DocumentRenewal>(entity =>
            {
                entity.ToTable("Document_Renewal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Relationship).HasColumnName("relationship");

                entity.Property(e => e.RenewalId).HasColumnName("renewal_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CountryOriginNavigation)
                    .WithMany(p => p.DocumentRenewals)
                    .HasForeignKey(d => d.CountryOrigin)
                    .HasConstraintName("FK_Document_Renewal_Cat_Country");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentRenewals)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Renewal_Cat_DocumentType");

                entity.HasOne(d => d.RelationshipNavigation)
                    .WithMany(p => p.DocumentRenewals)
                    .HasForeignKey(d => d.Relationship)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Renewal_dependent_information");

                entity.HasOne(d => d.Renewal)
                    .WithMany(p => p.DocumentRenewals)
                    .HasForeignKey(d => d.RenewalId)
                    .HasConstraintName("FK_Document_Renewal_Renewal");
            });

            modelBuilder.Entity<DocumentRentalFurnitureCoordination>(entity =>
            {
                entity.ToTable("Document_Rental_Furniture_Coordination");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Privacy).HasColumnName("privacy");

                entity.Property(e => e.Relationship).HasColumnName("relationship");

                entity.Property(e => e.RentalFurnitureCoordinationId).HasColumnName("rental_furniture_coordination_id");

                entity.HasOne(d => d.CountryOriginNavigation)
                    .WithMany(p => p.DocumentRentalFurnitureCoordinations)
                    .HasForeignKey(d => d.CountryOrigin)
                    .HasConstraintName("FK_Document_Rental_Furniture_Coordination_Cat_Country");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentRentalFurnitureCoordinations)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Rental_Furniture_Coordination_Cat_DocumentType");

                entity.HasOne(d => d.PrivacyNavigation)
                    .WithMany(p => p.DocumentRentalFurnitureCoordinations)
                    .HasForeignKey(d => d.Privacy)
                    .HasConstraintName("FK_Document_Rental_Furniture_Coordination_Cat_Privacy");

                entity.HasOne(d => d.RelationshipNavigation)
                    .WithMany(p => p.DocumentRentalFurnitureCoordinations)
                    .HasForeignKey(d => d.Relationship)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Rental_Furniture_Coordination_dependent_information");

                entity.HasOne(d => d.RentalFurnitureCoordination)
                    .WithMany(p => p.DocumentRentalFurnitureCoordinations)
                    .HasForeignKey(d => d.RentalFurnitureCoordinationId)
                    .HasConstraintName("FK_Document_Rental_Furniture_Coordination_Rental_Furniture_Coordination");
            });

            modelBuilder.Entity<DocumentRepair>(entity =>
            {
                entity.ToTable("Document_Repair");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RepairId).HasColumnName("repair_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.Repair)
                    .WithMany(p => p.DocumentRepairs)
                    .HasForeignKey(d => d.RepairId)
                    .HasConstraintName("FK_Document_Repair_Departure_Repair");
            });

            modelBuilder.Entity<DocumentRepairHomeFinding>(entity =>
            {
                entity.ToTable("Document_Repair_Home_Finding");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RepairId).HasColumnName("repair_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.Repair)
                    .WithMany(p => p.DocumentRepairHomeFindings)
                    .HasForeignKey(d => d.RepairId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Document_Repair_Home_Finding_Home_Finding_Repair");
            });

            modelBuilder.Entity<DocumentReportIssuePropertyManagement>(entity =>
            {
                entity.ToTable("Document_Report_Issue_Property_Management");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FilePath)
                    .HasColumnName("file_path")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NameFile)
                    .HasColumnName("name_file")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyManagement).HasColumnName("property_management");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.PropertyManagementNavigation)
                    .WithMany(p => p.DocumentReportIssuePropertyManagements)
                    .HasForeignKey(d => d.PropertyManagement)
                    .HasConstraintName("FK_Document_Report_Issue_Property_Management_Property_Management");
            });

            modelBuilder.Entity<DocumentRequestPayment>(entity =>
            {
                entity.ToTable("Document_Request_Payment");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequestPaymentId).HasColumnName("request_payment_id");

                entity.HasOne(d => d.CountryOriginNavigation)
                    .WithMany(p => p.DocumentRequestPayments)
                    .HasForeignKey(d => d.CountryOrigin)
                    .HasConstraintName("FK_Document_Request_Payment_Cat_Country");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentRequestPayments)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Request_Payment_Cat_DocumentType");

                entity.HasOne(d => d.RequestPayment)
                    .WithMany(p => p.DocumentRequestPayments)
                    .HasForeignKey(d => d.RequestPaymentId)
                    .HasConstraintName("FK_Document_Request_Payment_Request_Payment");
            });

            modelBuilder.Entity<DocumentResidencyPermit>(entity =>
            {
                entity.ToTable("Document_Residency_Permit");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Relationship).HasColumnName("relationship");

                entity.Property(e => e.ResidencyPermitId).HasColumnName("residency_permit_id");

                entity.HasOne(d => d.CountryOriginNavigation)
                    .WithMany(p => p.DocumentResidencyPermits)
                    .HasForeignKey(d => d.CountryOrigin)
                    .HasConstraintName("FK_Document_Residency_Permit_Cat_Country");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentResidencyPermits)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Residency_Permit_Cat_DocumentType");

                entity.HasOne(d => d.RelationshipNavigation)
                    .WithMany(p => p.DocumentResidencyPermits)
                    .HasForeignKey(d => d.Relationship)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Residency_Permit_dependent_information");

                entity.HasOne(d => d.ResidencyPermit)
                    .WithMany(p => p.DocumentResidencyPermits)
                    .HasForeignKey(d => d.ResidencyPermitId)
                    .HasConstraintName("FK_Document_Residency_Permit_Residency_Permit");
            });

            modelBuilder.Entity<DocumentSchoolingSearch>(entity =>
            {
                entity.ToTable("Document_Schooling_Search");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .HasColumnName("file_request")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Privacy).HasColumnName("privacy");

                entity.Property(e => e.Relationship).HasColumnName("relationship");

                entity.Property(e => e.SchoolingSearchId).HasColumnName("schooling_search_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CountryOriginNavigation)
                    .WithMany(p => p.DocumentSchoolingSearches)
                    .HasForeignKey(d => d.CountryOrigin)
                    .HasConstraintName("FK_Document_Schooling_Search_Cat_Country");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentSchoolingSearches)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Schooling_Search_Cat_DocumentType");

                entity.HasOne(d => d.PrivacyNavigation)
                    .WithMany(p => p.DocumentSchoolingSearches)
                    .HasForeignKey(d => d.Privacy)
                    .HasConstraintName("FK_Document_Schooling_Search_Cat_Privacy");

                entity.HasOne(d => d.RelationshipNavigation)
                    .WithMany(p => p.DocumentSchoolingSearches)
                    .HasForeignKey(d => d.Relationship)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Schooling_Search_dependent_information");

                entity.HasOne(d => d.SchoolingSearch)
                    .WithMany(p => p.DocumentSchoolingSearches)
                    .HasForeignKey(d => d.SchoolingSearchId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Document_Schooling_Search_Schooling_Search");
            });

            modelBuilder.Entity<DocumentServiceCountry>(entity =>
            {
                entity.ToTable("Document_Service_Country");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.FilePath)
                    .HasColumnName("file_path")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Privacy).HasColumnName("privacy");

                entity.Property(e => e.ServiceCountry).HasColumnName("service_country");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated__date")
                    .HasColumnType("date");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentServiceCountries)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Service_Country_Cat_DocumentType");

                entity.HasOne(d => d.PrivacyNavigation)
                    .WithMany(p => p.DocumentServiceCountries)
                    .HasForeignKey(d => d.Privacy)
                    .HasConstraintName("FK_Document_Service_Country_Cat_Privacy");

                entity.HasOne(d => d.ServiceCountryNavigation)
                    .WithMany(p => p.DocumentServiceCountries)
                    .HasForeignKey(d => d.ServiceCountry)
                    .HasConstraintName("FK_Document_Service_Country_Service_Country");

                entity.HasOne(d => d.StatusNavigation)
                    .WithMany(p => p.DocumentServiceCountries)
                    .HasForeignKey(d => d.Status)
                    .HasConstraintName("FK_Document_Service_Country_Cat_DocumentStatus");
            });

            modelBuilder.Entity<DocumentSettlingIn>(entity =>
            {
                entity.ToTable("Document_Settling_In");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .HasColumnName("file_request")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Privacy).HasColumnName("privacy");

                entity.Property(e => e.Relationship).HasColumnName("relationship");

                entity.Property(e => e.SettlingInId).HasColumnName("settling_in_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CountryOriginNavigation)
                    .WithMany(p => p.DocumentSettlingIns)
                    .HasForeignKey(d => d.CountryOrigin)
                    .HasConstraintName("FK_Document_Settling_In_Cat_Country");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentSettlingIns)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Settling_In_Cat_DocumentType");

                entity.HasOne(d => d.PrivacyNavigation)
                    .WithMany(p => p.DocumentSettlingIns)
                    .HasForeignKey(d => d.Privacy)
                    .HasConstraintName("FK_Document_Settling_In_Cat_Privacy");

                entity.HasOne(d => d.RelationshipNavigation)
                    .WithMany(p => p.DocumentSettlingIns)
                    .HasForeignKey(d => d.Relationship)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Settling_In_dependent_information");

                entity.HasOne(d => d.SettlingIn)
                    .WithMany(p => p.DocumentSettlingIns)
                    .HasForeignKey(d => d.SettlingInId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Settling_In_Settling_In");
            });

            modelBuilder.Entity<DocumentTemporaryHousingCoordinaton>(entity =>
            {
                entity.ToTable("Document_Temporary_Housing_Coordinaton");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Privacy).HasColumnName("privacy");

                entity.Property(e => e.Relationship).HasColumnName("relationship");

                entity.Property(e => e.TemporaryHousingCoordinationId).HasColumnName("temporary_housing_coordination_id");

                entity.HasOne(d => d.CountryOriginNavigation)
                    .WithMany(p => p.DocumentTemporaryHousingCoordinatons)
                    .HasForeignKey(d => d.CountryOrigin)
                    .HasConstraintName("FK_Document_Temporary_Housing_Coordinaton_Cat_Country");

                entity.HasOne(d => d.PrivacyNavigation)
                    .WithMany(p => p.DocumentTemporaryHousingCoordinatons)
                    .HasForeignKey(d => d.Privacy)
                    .HasConstraintName("FK_Document_Temporary_Housing_Coordinaton_Cat_Privacy");

                entity.HasOne(d => d.RelationshipNavigation)
                    .WithMany(p => p.DocumentTemporaryHousingCoordinatons)
                    .HasForeignKey(d => d.Relationship)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Temporary_Housing_Coordinaton_dependent_information");

                entity.HasOne(d => d.TemporaryHousingCoordination)
                    .WithMany(p => p.DocumentTemporaryHousingCoordinatons)
                    .HasForeignKey(d => d.TemporaryHousingCoordinationId)
                    .HasConstraintName("FK_Document_Temporary_Housing_Coordinaton_Temporary_Housing_Coordinaton");
            });

            modelBuilder.Entity<DocumentTenancyManagement>(entity =>
            {
                entity.ToTable("Document_Tenancy_Management");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasColumnName("file_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Relationship).HasColumnName("relationship");

                entity.Property(e => e.TenancyManagementId).HasColumnName("tenancy_management_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CountryOriginNavigation)
                    .WithMany(p => p.DocumentTenancyManagements)
                    .HasForeignKey(d => d.CountryOrigin)
                    .HasConstraintName("FK_Document_Tenancy_Management_Cat_Country");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentTenancyManagements)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Tenancy_Management_Cat_DocumentType");

                entity.HasOne(d => d.RelationshipNavigation)
                    .WithMany(p => p.DocumentTenancyManagements)
                    .HasForeignKey(d => d.Relationship)
                    .HasConstraintName("FK_Document_Tenancy_Management_dependent_information");

                entity.HasOne(d => d.TenancyManagement)
                    .WithMany(p => p.DocumentTenancyManagements)
                    .HasForeignKey(d => d.TenancyManagementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Document_Tenancy_Management_Tenancy_Management");
            });

            modelBuilder.Entity<DocumentTransportation>(entity =>
            {
                entity.ToTable("Document_Transportation");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Privacy).HasColumnName("privacy");

                entity.Property(e => e.Relationship).HasColumnName("relationship");

                entity.Property(e => e.TransportationId).HasColumnName("transportation_id");

                entity.HasOne(d => d.CountryOriginNavigation)
                    .WithMany(p => p.DocumentTransportations)
                    .HasForeignKey(d => d.CountryOrigin)
                    .HasConstraintName("FK_Document_Transportation_Cat_Country");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentTransportations)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Transportation_Cat_DocumentType");

                entity.HasOne(d => d.PrivacyNavigation)
                    .WithMany(p => p.DocumentTransportations)
                    .HasForeignKey(d => d.Privacy)
                    .HasConstraintName("FK_Document_Transportation_Cat_Privacy");

                entity.HasOne(d => d.RelationshipNavigation)
                    .WithMany(p => p.DocumentTransportations)
                    .HasForeignKey(d => d.Relationship)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Transportation_dependent_information");

                entity.HasOne(d => d.Transportation)
                    .WithMany(p => p.DocumentTransportations)
                    .HasForeignKey(d => d.TransportationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Transportation_Transportation");
            });

            modelBuilder.Entity<DocumentVehicleConsultant>(entity =>
            {
                entity.ToTable("Document_Vehicle_Consultant");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.City).HasColumnName("city");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FilePath)
                    .IsRequired()
                    .HasColumnName("file_path")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Privacy).HasColumnName("privacy");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.VehicleConsultant).HasColumnName("vehicle_consultant");

                entity.HasOne(d => d.CityNavigation)
                    .WithMany(p => p.DocumentVehicleConsultants)
                    .HasForeignKey(d => d.City)
                    .HasConstraintName("FK_Document_Vehicle_Consultant_Cat_State");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentVehicleConsultants)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Vehicle_Consultant_Cat_DocumentType");

                entity.HasOne(d => d.PrivacyNavigation)
                    .WithMany(p => p.DocumentVehicleConsultants)
                    .HasForeignKey(d => d.Privacy)
                    .HasConstraintName("FK_Document_Vehicle_Consultant_Cat_Privacy");

                entity.HasOne(d => d.VehicleConsultantNavigation)
                    .WithMany(p => p.DocumentVehicleConsultants)
                    .HasForeignKey(d => d.VehicleConsultant)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Vehicle_Consultant_Vehicle_Consultant");
            });

            modelBuilder.Entity<DocumentVehicleService>(entity =>
            {
                entity.ToTable("Document_Vehicle_Service");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.City).HasColumnName("city");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FilePath)
                    .IsRequired()
                    .HasColumnName("file_path")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Privacy).HasColumnName("privacy");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.VehicleService).HasColumnName("vehicle_service");

                entity.HasOne(d => d.CityNavigation)
                    .WithMany(p => p.DocumentVehicleServices)
                    .HasForeignKey(d => d.City)
                    .HasConstraintName("FK_Document_Vehicle_Service_Cat_State");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentVehicleServices)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Vehicle_Service_Cat_DocumentType");

                entity.HasOne(d => d.PrivacyNavigation)
                    .WithMany(p => p.DocumentVehicleServices)
                    .HasForeignKey(d => d.Privacy)
                    .HasConstraintName("FK_Document_Vehicle_Service_Cat_Privacy");

                entity.HasOne(d => d.VehicleServiceNavigation)
                    .WithMany(p => p.DocumentVehicleServices)
                    .HasForeignKey(d => d.VehicleService)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Vehicle_Service_Vehicle_Service");
            });

            modelBuilder.Entity<DocumentVisaDeregistration>(entity =>
            {
                entity.ToTable("Document_Visa_Deregistration");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Relationship).HasColumnName("relationship");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.VisaDeregistrationId).HasColumnName("visa_deregistration_id");

                entity.HasOne(d => d.CountryOriginNavigation)
                    .WithMany(p => p.DocumentVisaDeregistrations)
                    .HasForeignKey(d => d.CountryOrigin)
                    .HasConstraintName("FK_Document_Visa_Deregistration_Cat_Country");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentVisaDeregistrations)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Visa_Deregistration_Cat_DocumentType");

                entity.HasOne(d => d.RelationshipNavigation)
                    .WithMany(p => p.DocumentVisaDeregistrations)
                    .HasForeignKey(d => d.Relationship)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Visa_Deregistration_dependent_information");

                entity.HasOne(d => d.VisaDeregistration)
                    .WithMany(p => p.DocumentVisaDeregistrations)
                    .HasForeignKey(d => d.VisaDeregistrationId)
                    .HasConstraintName("FK_Document_Visa_Deregistration_Visa_Deregistration");
            });

            modelBuilder.Entity<DocumentWorkPermit>(entity =>
            {
                entity.ToTable("Document_Work_Permit");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CountryOrigin).HasColumnName("country_origin");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Relationship).HasColumnName("relationship");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.WorkPermitId).HasColumnName("work_permit_id");

                entity.HasOne(d => d.CountryOriginNavigation)
                    .WithMany(p => p.DocumentWorkPermits)
                    .HasForeignKey(d => d.CountryOrigin)
                    .HasConstraintName("FK_Document_Work_Permit_Cat_Country");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.DocumentWorkPermits)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_Document_Work_Permit_Cat_DocumentType");

                entity.HasOne(d => d.RelationshipNavigation)
                    .WithMany(p => p.DocumentWorkPermits)
                    .HasForeignKey(d => d.Relationship)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_Work_Permit_dependent_information");

                entity.HasOne(d => d.WorkPermit)
                    .WithMany(p => p.DocumentWorkPermits)
                    .HasForeignKey(d => d.WorkPermitId)
                    .HasConstraintName("FK_Document_Work_Permit_Work_Permit");
            });

            modelBuilder.Entity<EducationalBackground>(entity =>
            {
                entity.ToTable("educational_background");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Degree)
                    .HasColumnName("degree")
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("date");

                entity.Property(e => e.FieldStudy)
                    .HasColumnName("field_study")
                    .HasMaxLength(50);

                entity.Property(e => e.ImmigrationProfileId).HasColumnName("immigration_profile_id");

                entity.Property(e => e.Institution)
                    .HasColumnName("institution")
                    .HasMaxLength(50);

                entity.Property(e => e.ListProfessionalLicenses)
                    .HasColumnName("list_professional_licenses")
                    .HasMaxLength(200);

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.ImmigrationProfile)
                    .WithMany(p => p.EducationalBackgrounds)
                    .HasForeignKey(d => d.ImmigrationProfileId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_educational_background_Immigration_profile");
            });

            modelBuilder.Entity<Email>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CountryId).HasColumnName("country_id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("date");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NickName)
                    .HasColumnName("nick_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceId).HasColumnName("service_id");

                entity.Property(e => e.Subject)
                    .HasColumnName("subject")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.Emails)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Emails_Cat_Country");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.Emails)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_Emails_Cat_Category");
            });

            modelBuilder.Entity<EmailSend>(entity =>
            {
                entity.ToTable("Email_Send");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Completed).HasColumnName("completed");

                entity.Property(e => e.Date)
                    .HasColumnName("date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EmailId).HasColumnName("email_id");

                entity.Property(e => e.ServiceLineId).HasColumnName("service_line_id");

                entity.Property(e => e.ServiceRecordId).HasColumnName("service_record_id");

                entity.HasOne(d => d.Email)
                    .WithMany(p => p.EmailSends)
                    .HasForeignKey(d => d.EmailId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Email_Send_Cat_Email_Send");

                entity.HasOne(d => d.ServiceLine)
                    .WithMany(p => p.EmailSends)
                    .HasForeignKey(d => d.ServiceLineId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Email_Send_Cat_Service_Line");

                entity.HasOne(d => d.ServiceRecord)
                    .WithMany(p => p.EmailSends)
                    .HasForeignKey(d => d.ServiceRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Email_Send_Service_Record");
            });

            modelBuilder.Entity<EmailServiceRecord>(entity =>
            {
                entity.ToTable("Email_Service_Record");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Completed).HasColumnName("completed");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("date");

                entity.Property(e => e.Date)
                    .HasColumnName("date")
                    .HasColumnType("date");

                entity.Property(e => e.EmailId).HasColumnName("email_id");

                entity.Property(e => e.ServiceLine).HasColumnName("service_line");

                entity.Property(e => e.ServiceRecordId).HasColumnName("service_record_id");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.Email)
                    .WithMany(p => p.EmailServiceRecords)
                    .HasForeignKey(d => d.EmailId)
                    .HasConstraintName("FK_Email_Service_Record_Emails");

                entity.HasOne(d => d.ServiceLineNavigation)
                    .WithMany(p => p.EmailServiceRecords)
                    .HasForeignKey(d => d.ServiceLine)
                    .HasConstraintName("FK_Email_Service_Record_Cat_Service_Line");

                entity.HasOne(d => d.ServiceRecord)
                    .WithMany(p => p.EmailServiceRecords)
                    .HasForeignKey(d => d.ServiceRecordId)
                    .HasConstraintName("FK_Email_Service_Record_Service_Record");
            });

            modelBuilder.Entity<EmergencyContact>(entity =>
            {
                entity.ToTable("Emergency_Contact");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ContactName)
                    .HasColumnName("contact_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HomeNumber)
                    .HasColumnName("home_number")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Location)
                    .HasColumnName("location")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneNumber)
                    .HasColumnName("phone_number")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Profile).HasColumnName("profile");

                entity.Property(e => e.Relationship).HasColumnName("relationship");

                entity.HasOne(d => d.ProfileNavigation)
                    .WithMany(p => p.EmergencyContacts)
                    .HasForeignKey(d => d.Profile)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Emergency_Contact_Profile_User");

                entity.HasOne(d => d.RelationshipNavigation)
                    .WithMany(p => p.EmergencyContacts)
                    .HasForeignKey(d => d.Relationship)
                    .HasConstraintName("FK_Emergency_Contact_Cat_Relationship");
            });

            modelBuilder.Entity<EntryVisa>(entity =>
            {
                entity.ToTable("Entry_Visa");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApplicantId).HasColumnName("applicant_id");

                entity.Property(e => e.ApplicationApprovalDate)
                    .HasColumnName("application_approval_date")
                    .HasColumnType("date");

                entity.Property(e => e.ApplicationSubmissionDate)
                    .HasColumnName("application_submission_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.City)
                    .HasColumnName("city")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CityId).HasColumnName("city_id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ConsularServiceId).HasColumnName("consular_service_id");

                entity.Property(e => e.CountryId).HasColumnName("country_id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DocumentCollectionDompletionDate)
                    .HasColumnName("document_collection_dompletion_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentCollectionStartDate)
                    .HasColumnName("document_collection_start_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentDeliveryDate)
                    .HasColumnName("document_delivery_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentExpirationDate)
                    .HasColumnName("document_expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceCompletionDate)
                    .HasColumnName("service_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.VisaTypeId)
                    .HasColumnName("visa_type_id")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WorkOrderServicesId).HasColumnName("work_order_services_id");

                entity.HasOne(d => d.ConsularService)
                    .WithMany(p => p.EntryVisas)
                    .HasForeignKey(d => d.ConsularServiceId)
                    .HasConstraintName("FK_Entry_Visa_Cat_Consular_Service");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.EntryVisas)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Entry_Visa_Cat_Country");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.EntryVisas)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Entry_Visa_Cat_Status");

                entity.HasOne(d => d.WorkOrderServices)
                    .WithMany(p => p.EntryVisas)
                    .HasForeignKey(d => d.WorkOrderServicesId)
                    .HasConstraintName("FK_Entry_Visa_Service_Order_Services");
            });

            modelBuilder.Entity<Evaluation>(entity =>
            {
                entity.ToTable("Evaluation");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Content).HasColumnName("content");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Element).HasColumnName("element");

                entity.Property(e => e.Order).HasColumnName("order");

                entity.Property(e => e.Question)
                    .HasColumnName("question")
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.Required).HasColumnName("required");

                entity.Property(e => e.Text)
                    .HasColumnName("text")
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.ContentNavigation)
                    .WithMany(p => p.Evaluations)
                    .HasForeignKey(d => d.Content)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Evaluation_Content");

                entity.HasOne(d => d.ElementNavigation)
                    .WithMany(p => p.Evaluations)
                    .HasForeignKey(d => d.Element)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Evaluation_Cat_Element1");
            });

            modelBuilder.Entity<ExperienceSurvey>(entity =>
            {
                entity.ToTable("Experience_Survey");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CompleteServiceRecord).HasColumnName("complete_service_record");

                entity.Property(e => e.CompletedDate)
                    .HasColumnName("completed_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceLine).HasColumnName("service_line");

                entity.Property(e => e.ServiceRecord).HasColumnName("service_record");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.WorkOrderServicesId).HasColumnName("work_order_services_id");

                entity.HasOne(d => d.ServiceLineNavigation)
                    .WithMany(p => p.ExperienceSurveys)
                    .HasForeignKey(d => d.ServiceLine)
                    .HasConstraintName("FK_Experience_Survey_Cat_Service_Line");

                entity.HasOne(d => d.ServiceRecordNavigation)
                    .WithMany(p => p.ExperienceSurveys)
                    .HasForeignKey(d => d.ServiceRecord)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Experience_Survey_Service_Record");

                entity.HasOne(d => d.WorkOrderServices)
                    .WithMany(p => p.ExperienceSurveys)
                    .HasForeignKey(d => d.WorkOrderServicesId)
                    .HasConstraintName("FK_Experience_Survey_Work_Order_Services");
            });

            modelBuilder.Entity<ExperienceSurveySupplier>(entity =>
            {
                entity.ToTable("Experience_Survey_Supplier");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Attention).HasColumnName("attention");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.ExperienceSurveyId).HasColumnName("experience_survey_id");

                entity.Property(e => e.Feedback)
                    .HasColumnName("feedback")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.General).HasColumnName("general");

                entity.Property(e => e.Price).HasColumnName("price");

                entity.Property(e => e.Professionalism).HasColumnName("professionalism");

                entity.Property(e => e.Punctuality).HasColumnName("punctuality");

                entity.Property(e => e.ResponseTime).HasColumnName("response_time");

                entity.Property(e => e.ServiceQuality).HasColumnName("service_quality");

                entity.Property(e => e.SupplierConsultant).HasColumnName("supplier_consultant");

                entity.Property(e => e.SupplierService).HasColumnName("supplier_service");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.ExperienceSurvey)
                    .WithMany(p => p.ExperienceSurveySuppliers)
                    .HasForeignKey(d => d.ExperienceSurveyId)
                    .HasConstraintName("FK_Experience_Survey_Supplier_Experience_Survey");

                entity.HasOne(d => d.SupplierConsultantNavigation)
                    .WithMany(p => p.ExperienceSurveySuppliers)
                    .HasForeignKey(d => d.SupplierConsultant)
                    .HasConstraintName("FK_Experience_Survey_Supplier_Cat_Supplier1");
            });

            modelBuilder.Entity<ExtensionAirportTransportationService>(entity =>
            {
                entity.ToTable("Extension_Airport_Transportation_Services");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AirportTransportationServicesId).HasColumnName("airport_transportation_services_id");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthorizedBy).HasColumnName("authorized_by");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.RequestedBy).HasColumnName("requested_by");

                entity.Property(e => e.Time).HasColumnName("time");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.AirportTransportationServices)
                    .WithMany(p => p.ExtensionAirportTransportationServices)
                    .HasForeignKey(d => d.AirportTransportationServicesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Extension_Airport_Transportation_Services_Airport_Transportation_Services");
            });

            modelBuilder.Entity<ExtensionAreaOrientation>(entity =>
            {
                entity.ToTable("Extension_Area_Orientation");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AreaOrientationId).HasColumnName("area_orientation_id");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthorizedBy).HasColumnName("authorized_by");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.RequestedBy).HasColumnName("requested_by");

                entity.Property(e => e.Time).HasColumnName("time");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.AreaOrientation)
                    .WithMany(p => p.ExtensionAreaOrientations)
                    .HasForeignKey(d => d.AreaOrientationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Extension_Area_Orientation_Area_Orientation");
            });

            modelBuilder.Entity<ExtensionDeparture>(entity =>
            {
                entity.ToTable("Extension_Departure");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthorizedBy).HasColumnName("authorized_by");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DepartureId).HasColumnName("departure_id");

                entity.Property(e => e.RequestedBy).HasColumnName("requested_by");

                entity.Property(e => e.Time).HasColumnName("time");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Departure)
                    .WithMany(p => p.ExtensionDepartures)
                    .HasForeignKey(d => d.DepartureId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Extension_Departure_Departure");
            });

            modelBuilder.Entity<ExtensionEntryVisa>(entity =>
            {
                entity.ToTable("Extension_Entry_Visa");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EntryVisaId).HasColumnName("entry_visa_id");

                entity.Property(e => e.Time).HasColumnName("time");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.EntryVisa)
                    .WithMany(p => p.ExtensionEntryVisas)
                    .HasForeignKey(d => d.EntryVisaId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Extension_Entry_Visa_Entry_Visa");
            });

            modelBuilder.Entity<ExtensionHomeFinding>(entity =>
            {
                entity.ToTable("Extension_Home_Finding");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthorizedBy).HasColumnName("authorized_by");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.HomeFindingId).HasColumnName("home_finding_id");

                entity.Property(e => e.RequestedBy).HasColumnName("requested_by");

                entity.Property(e => e.Time).HasColumnName("time");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.HomeFinding)
                    .WithMany(p => p.ExtensionHomeFindings)
                    .HasForeignKey(d => d.HomeFindingId)
                    .HasConstraintName("FK_Extension_Home_Finding_Home_Finding");
            });

            modelBuilder.Entity<ExtensionPredecisionOrientation>(entity =>
            {
                entity.ToTable("Extension_Predecision_Orientation");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthorizedBy).HasColumnName("authorized_by");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.PredecisionOrientationId).HasColumnName("predecision_orientation_id");

                entity.Property(e => e.RequestedBy).HasColumnName("requested_by");

                entity.Property(e => e.Tine).HasColumnName("tine");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.PredecisionOrientation)
                    .WithMany(p => p.ExtensionPredecisionOrientations)
                    .HasForeignKey(d => d.PredecisionOrientationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Extension_Predecision_Orientation_Predecision_Orientation");
            });

            modelBuilder.Entity<ExtensionRentalFurnitureCoordination>(entity =>
            {
                entity.ToTable("Extension_Rental_Furniture_Coordination");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthorizedBy).HasColumnName("authorized_by");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.RentalFurnitureCoordinationId).HasColumnName("rental_furniture_coordination_id");

                entity.Property(e => e.RequestedBy).HasColumnName("requested_by");

                entity.Property(e => e.Time).HasColumnName("time");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RentalFurnitureCoordination)
                    .WithMany(p => p.ExtensionRentalFurnitureCoordinations)
                    .HasForeignKey(d => d.RentalFurnitureCoordinationId)
                    .HasConstraintName("FK_Extension_Rental_Furniture_Coordination_Rental_Furniture_Coordination");
            });

            modelBuilder.Entity<ExtensionSchoolingSearch>(entity =>
            {
                entity.ToTable("Extension_Schooling_Search");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthorizedBy).HasColumnName("authorized_by");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.RequestedBy).HasColumnName("requested_by");

                entity.Property(e => e.SchoolingSearchId).HasColumnName("schooling_search_id");

                entity.Property(e => e.Time).HasColumnName("time");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.SchoolingSearch)
                    .WithMany(p => p.ExtensionSchoolingSearches)
                    .HasForeignKey(d => d.SchoolingSearchId)
                    .HasConstraintName("FK_Extension_Schooling_Search_Schooling_Search");
            });

            modelBuilder.Entity<ExtensionSettlingIn>(entity =>
            {
                entity.ToTable("Extension_Settling_In");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthorizedBy).HasColumnName("authorized_by");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.RequestedBy).HasColumnName("requested_by");

                entity.Property(e => e.SettlingInId).HasColumnName("settling_in_id");

                entity.Property(e => e.Time).HasColumnName("time");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.SettlingIn)
                    .WithMany(p => p.ExtensionSettlingIns)
                    .HasForeignKey(d => d.SettlingInId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Extension_Settling_In_Settling_In");
            });

            modelBuilder.Entity<ExtensionTemporaryHousingCoordinaton>(entity =>
            {
                entity.ToTable("Extension_Temporary_Housing_Coordinaton");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthorizedBy).HasColumnName("authorized_by");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.RequestedBy).HasColumnName("requested_by");

                entity.Property(e => e.TemporaryHousingCoordinationId).HasColumnName("temporary_housing_coordination_id");

                entity.Property(e => e.Time).HasColumnName("time");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.TemporaryHousingCoordination)
                    .WithMany(p => p.ExtensionTemporaryHousingCoordinatons)
                    .HasForeignKey(d => d.TemporaryHousingCoordinationId)
                    .HasConstraintName("FK_Extension_Temporary_Housing_Coordinaton_Temporary_Housing_Coordinaton");
            });

            modelBuilder.Entity<ExtensionTransportation>(entity =>
            {
                entity.ToTable("Extension_Transportation");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthorizedBy).HasColumnName("authorized_by");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.RequestedBy).HasColumnName("requested_by");

                entity.Property(e => e.Time).HasColumnName("time");

                entity.Property(e => e.TransportationId).HasColumnName("transportation_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Transportation)
                    .WithMany(p => p.ExtensionTransportations)
                    .HasForeignKey(d => d.TransportationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Extension_Transportation_Transportation");
            });

            modelBuilder.Entity<FamilyMemberTransportService>(entity =>
            {
                entity.HasKey(e => new { e.TransportService, e.FamilyMember });

                entity.ToTable("Family_Member_Transport_Service");

                entity.Property(e => e.TransportService).HasColumnName("transport_service");

                entity.Property(e => e.FamilyMember).HasColumnName("family_member");

                entity.HasOne(d => d.FamilyMemberNavigation)
                    .WithMany(p => p.FamilyMemberTransportServices)
                    .HasForeignKey(d => d.FamilyMember)
                    .HasConstraintName("FK_Family_Member_Transport_Service_dependent_information");

                entity.HasOne(d => d.TransportServiceNavigation)
                    .WithMany(p => p.FamilyMemberTransportServices)
                    .HasForeignKey(d => d.TransportService)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Family_Member_Transport_Service_Airport_Transportation_Services");
            });

            modelBuilder.Entity<FamilyMemberTransportation>(entity =>
            {
                entity.HasKey(e => new { e.TransportService, e.FamilyMember });

                entity.ToTable("Family_Member_Transportation");

                entity.Property(e => e.TransportService).HasColumnName("transport_service");

                entity.Property(e => e.FamilyMember).HasColumnName("family_member");

                entity.HasOne(d => d.FamilyMemberNavigation)
                    .WithMany(p => p.FamilyMemberTransportations)
                    .HasForeignKey(d => d.FamilyMember)
                    .HasConstraintName("FK_Family_Member_Transportation_dependent_information");

                entity.HasOne(d => d.TransportServiceNavigation)
                    .WithMany(p => p.FamilyMemberTransportations)
                    .HasForeignKey(d => d.TransportService)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Family_Member_Transportation_Transportation");
            });

            modelBuilder.Entity<File>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasColumnName("file_name")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Path)
                    .IsRequired()
                    .HasColumnName("path")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Theme).HasColumnName("theme");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.ThemeNavigation)
                    .WithMany(p => p.Files)
                    .HasForeignKey(d => d.Theme)
                    .HasConstraintName("FK_Files_Theme");
            });

            modelBuilder.Entity<Filter>(entity =>
            {
                entity.ToTable("Filter");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Filter1).HasColumnName("filter");

                entity.Property(e => e.FirstDate)
                    .HasColumnName("first_date")
                    .HasColumnType("date");

                entity.Property(e => e.Report).HasColumnName("report");

                entity.Property(e => e.SecondDate)
                    .HasColumnName("second_date")
                    .HasColumnType("date");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Value).HasColumnName("value");

                entity.HasOne(d => d.Filter1Navigation)
                    .WithMany(p => p.Filters)
                    .HasForeignKey(d => d.Filter1)
                    .HasConstraintName("FK_Filter_Cat_FilterReport");

                entity.HasOne(d => d.ReportNavigation)
                    .WithMany(p => p.Filters)
                    .HasForeignKey(d => d.Report)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Filter_Report");
            });

            modelBuilder.Entity<Follow>(entity =>
            {
                entity.ToTable("Follow");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ServiceRecordId).HasColumnName("service_record_id");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.ServiceRecord)
                    .WithMany(p => p.Follows)
                    .HasForeignKey(d => d.ServiceRecordId)
                    .HasConstraintName("FK_Follow_Service_Record");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Follows)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Follow_Users");
            });

            modelBuilder.Entity<GeneralContractPricingInfo>(entity =>
            {
                entity.ToTable("General_Contract_Pricing_Info");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ContractEffectiveDate)
                    .HasColumnName("contract_effective_date")
                    .HasColumnType("date");

                entity.Property(e => e.ContractExpirationDate)
                    .HasColumnName("contract_expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.IdClientPartnerProfile).HasColumnName("id_client_partner_profile");

                entity.Property(e => e.IdPaymentRecurrence).HasColumnName("id_payment_recurrence");

                entity.Property(e => e.IdPricingSchedule).HasColumnName("id_pricing_schedule");

                entity.Property(e => e.IdReferralFee).HasColumnName("id_referral_fee");

                entity.Property(e => e.ReferralFee)
                    .HasColumnName("referral_fee")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdClientPartnerProfileNavigation)
                    .WithMany(p => p.GeneralContractPricingInfos)
                    .HasForeignKey(d => d.IdClientPartnerProfile)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_General_Contract_Pricing_Info_Client_Partner_Profile");

                entity.HasOne(d => d.IdPaymentRecurrenceNavigation)
                    .WithMany(p => p.GeneralContractPricingInfos)
                    .HasForeignKey(d => d.IdPaymentRecurrence)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_General_Contract_Pricing_Info_Cat_Payment_Recurrence1");

                entity.HasOne(d => d.IdPricingScheduleNavigation)
                    .WithMany(p => p.GeneralContractPricingInfos)
                    .HasForeignKey(d => d.IdPricingSchedule)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_General_Contract_Pricing_Info_Pricing_Schedule");

                entity.HasOne(d => d.IdReferralFeeNavigation)
                    .WithMany(p => p.GeneralContractPricingInfos)
                    .HasForeignKey(d => d.IdReferralFee)
                    .HasConstraintName("FK_General_Contract_Pricing_Info_Referral_Fee");
            });

            modelBuilder.Entity<HomeFinding>(entity =>
            {
                entity.ToTable("Home_Finding");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.ClientSecurityInspectionRequired).HasColumnName("client_security_inspection_required");

                entity.Property(e => e.ComissionAmount)
                    .HasColumnName("comission_amount")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ComissionCurrency).HasColumnName("comission_currency");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.CommentRelatedSupplier)
                    .HasColumnName("comment_related_supplier")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Coordination).HasColumnName("coordination");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.CurrencyPurchaseDesiredPrice).HasColumnName("currency_purchase_desired_price");

                entity.Property(e => e.CurrencyPurchaseFinalPrice).HasColumnName("currency_purchase_final_price");

                entity.Property(e => e.LeaseGuarentee).HasColumnName("lease_guarentee");

                entity.Property(e => e.LeaseSignator).HasColumnName("lease_signator");

                entity.Property(e => e.LeaseTemplate).HasColumnName("lease_template");

                entity.Property(e => e.PropertComission)
                    .HasColumnName("propert_comission")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PurchaseDesiredPrice)
                    .HasColumnName("purchase_desired_price")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.PurchaseFinalPrice)
                    .HasColumnName("purchase_final_price")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.PurchaseStatus).HasColumnName("purchase_status");

                entity.Property(e => e.Realtor).HasColumnName("realtor");

                entity.Property(e => e.RelatedSupplier).HasColumnName("related_supplier");

                entity.Property(e => e.ServiceCompletionDate)
                    .HasColumnName("service_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.SupplierPartner).HasColumnName("supplier_partner");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.WorkOrderServicesId).HasColumnName("work_order_services_id");

                entity.HasOne(d => d.ComissionCurrencyNavigation)
                    .WithMany(p => p.HomeFindingComissionCurrencyNavigations)
                    .HasForeignKey(d => d.ComissionCurrency)
                    .HasConstraintName("FK_Home_Finding_Cat_currency");

                entity.HasOne(d => d.CurrencyPurchaseDesiredPriceNavigation)
                    .WithMany(p => p.HomeFindingCurrencyPurchaseDesiredPriceNavigations)
                    .HasForeignKey(d => d.CurrencyPurchaseDesiredPrice)
                    .HasConstraintName("FK_Home_Finding_Cat_currency1");

                entity.HasOne(d => d.CurrencyPurchaseFinalPriceNavigation)
                    .WithMany(p => p.HomeFindingCurrencyPurchaseFinalPriceNavigations)
                    .HasForeignKey(d => d.CurrencyPurchaseFinalPrice)
                    .HasConstraintName("FK_Home_Finding_Cat_currency2");

                entity.HasOne(d => d.LeaseGuarenteeNavigation)
                    .WithMany(p => p.HomeFindings)
                    .HasForeignKey(d => d.LeaseGuarentee)
                    .HasConstraintName("FK_Home_Finding_Cat_LeaseGuarantee");

                entity.HasOne(d => d.LeaseSignatorNavigation)
                    .WithMany(p => p.HomeFindings)
                    .HasForeignKey(d => d.LeaseSignator)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Home_Finding_dependent_information");

                entity.HasOne(d => d.LeaseTemplateNavigation)
                    .WithMany(p => p.HomeFindings)
                    .HasForeignKey(d => d.LeaseTemplate)
                    .HasConstraintName("FK_Home_Finding_Cat_LeaseTemplate");

                entity.HasOne(d => d.PurchaseStatusNavigation)
                    .WithMany(p => p.HomeFindings)
                    .HasForeignKey(d => d.PurchaseStatus)
                    .HasConstraintName("FK_Home_Finding_Cat_PurchaseStatus");

                entity.HasOne(d => d.RealtorNavigation)
                    .WithMany(p => p.HomeFindings)
                    .HasForeignKey(d => d.Realtor)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Home_Finding_Consultant_Contacts_Service");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.HomeFindings)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_Home_Finding_Cat_StatusWorkOrder");

                entity.HasOne(d => d.SupplierPartnerNavigation)
                    .WithMany(p => p.HomeFindings)
                    .HasForeignKey(d => d.SupplierPartner)
                    .HasConstraintName("FK_Home_Finding_Supplier_Partner_Profile_Service");

                entity.HasOne(d => d.WorkOrderServices)
                    .WithMany(p => p.HomeFindings)
                    .HasForeignKey(d => d.WorkOrderServicesId)
                    .HasConstraintName("FK_Home_Finding_Work_Order_Services");
            });

            modelBuilder.Entity<HomeFindingRepair>(entity =>
            {
                entity.ToTable("Home_Finding_Repair");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.HomeFindingId).HasColumnName("home_finding_id");

                entity.Property(e => e.RepairEndDate)
                    .HasColumnName("repair_end_date")
                    .HasColumnType("date");

                entity.Property(e => e.RepairStartDate)
                    .HasColumnName("repair_start_date")
                    .HasColumnType("date");

                entity.Property(e => e.RepairType).HasColumnName("repair_type");

                entity.Property(e => e.SupplierPartner).HasColumnName("supplier_partner");

                entity.Property(e => e.TotalDays).HasColumnName("total_days");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.RepairTypeNavigation)
                    .WithMany(p => p.HomeFindingRepairs)
                    .HasForeignKey(d => d.RepairType)
                    .HasConstraintName("FK_Home_Finding_Repair_Cat_RepairType");

                entity.HasOne(d => d.SupplierPartnerNavigation)
                    .WithMany(p => p.HomeFindingRepairs)
                    .HasForeignKey(d => d.SupplierPartner)
                    .HasConstraintName("FK_Home_Finding_Repair_Cat_SupplierCompany");
            });

            modelBuilder.Entity<HomePurchase>(entity =>
            {
                entity.ToTable("Home_Purchase");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Agency)
                    .HasColumnName("agency")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CommissionAmount)
                    .HasColumnName("commission_amount")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ContactEmail)
                    .HasColumnName("contact_email")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContactName)
                    .HasColumnName("contact_name")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ContactPhoneNo)
                    .HasColumnName("contact_phone_no")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Coordination).HasColumnName("coordination");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.CurrencyCommissionId).HasColumnName("currency_commission_id");

                entity.Property(e => e.CurrencyPurchaseDesiredPriceId).HasColumnName("currency_purchase_desired_price_id");

                entity.Property(e => e.CurrencyPurchaseFinalPriceId).HasColumnName("currency_purchase_final_price_id");

                entity.Property(e => e.DeliverTo).HasColumnName("deliver_to");

                entity.Property(e => e.PropertyCommission).HasColumnName("property_commission");

                entity.Property(e => e.PurchaseDesiredPrice)
                    .HasColumnName("purchase_desired_price")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.PurchaseFinalPrice)
                    .HasColumnName("purchase_final_price")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.PurchaseStatusId).HasColumnName("purchase_status_id");

                entity.Property(e => e.RelatedSupplier).HasColumnName("related_supplier");

                entity.Property(e => e.ServiceCompletionDate)
                    .HasColumnName("service_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.WorkOrderServices).HasColumnName("work_order_services");

                entity.HasOne(d => d.CurrencyCommission)
                    .WithMany(p => p.HomePurchaseCurrencyCommissions)
                    .HasForeignKey(d => d.CurrencyCommissionId)
                    .HasConstraintName("FK_Home_Purchase_Cat_currency");

                entity.HasOne(d => d.CurrencyPurchaseDesiredPrice)
                    .WithMany(p => p.HomePurchaseCurrencyPurchaseDesiredPrices)
                    .HasForeignKey(d => d.CurrencyPurchaseDesiredPriceId)
                    .HasConstraintName("FK_Home_Purchase_Cat_currency1");

                entity.HasOne(d => d.CurrencyPurchaseFinalPrice)
                    .WithMany(p => p.HomePurchaseCurrencyPurchaseFinalPrices)
                    .HasForeignKey(d => d.CurrencyPurchaseFinalPriceId)
                    .HasConstraintName("FK_Home_Purchase_Cat_currency2");

                entity.HasOne(d => d.DeliverToNavigation)
                    .WithMany(p => p.HomePurchases)
                    .HasForeignKey(d => d.DeliverTo)
                    .HasConstraintName("FK_Home_Purchase_dependent_information");

                entity.HasOne(d => d.PurchaseStatus)
                    .WithMany(p => p.HomePurchases)
                    .HasForeignKey(d => d.PurchaseStatusId)
                    .HasConstraintName("FK_Home_Purchase_Cat_Status_Home_Purchase");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.HomePurchases)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_Home_Purchase_Cat_Status");

                entity.HasOne(d => d.WorkOrderServicesNavigation)
                    .WithMany(p => p.HomePurchases)
                    .HasForeignKey(d => d.WorkOrderServices)
                    .HasConstraintName("FK_Home_Purchase_Work_Order_Services");
            });

            modelBuilder.Entity<HomeSale>(entity =>
            {
                entity.ToTable("Home_Sale");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Agency)
                    .HasColumnName("agency")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CommissionAmount)
                    .HasColumnName("commission_amount")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ContactEmail)
                    .HasColumnName("contact_email")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContactName)
                    .HasColumnName("contact_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContactPhoneNo)
                    .HasColumnName("contact_phone_no")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Coordination).HasColumnName("coordination");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.CurrencyCommissionId).HasColumnName("currency_commission_id");

                entity.Property(e => e.CurrencyFinalPriceId).HasColumnName("currency_final_price_id");

                entity.Property(e => e.CurrencyListPriceId).HasColumnName("currency_list_price_id");

                entity.Property(e => e.DeliverTo).HasColumnName("deliver_to");

                entity.Property(e => e.ListPrice)
                    .HasColumnName("list_price")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Property).HasColumnName("property");

                entity.Property(e => e.PropertyCommission).HasColumnName("property_commission");

                entity.Property(e => e.PropertyId).HasColumnName("property_id");

                entity.Property(e => e.PurchaseFinalPrice)
                    .HasColumnName("purchase_final_price")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.SaleStatusId).HasColumnName("sale_status_id");

                entity.Property(e => e.ServiceCompletionDate)
                    .HasColumnName("service_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.WorkOrderServices).HasColumnName("work_order_services");

                entity.HasOne(d => d.CurrencyCommission)
                    .WithMany(p => p.HomeSaleCurrencyCommissions)
                    .HasForeignKey(d => d.CurrencyCommissionId)
                    .HasConstraintName("FK_Home_Sale_Cat_currency");

                entity.HasOne(d => d.CurrencyFinalPrice)
                    .WithMany(p => p.HomeSaleCurrencyFinalPrices)
                    .HasForeignKey(d => d.CurrencyFinalPriceId)
                    .HasConstraintName("FK_Home_Sale_Cat_currency1");

                entity.HasOne(d => d.CurrencyListPrice)
                    .WithMany(p => p.HomeSaleCurrencyListPrices)
                    .HasForeignKey(d => d.CurrencyListPriceId)
                    .HasConstraintName("FK_Home_Sale_Cat_currency2");

                entity.HasOne(d => d.DeliverToNavigation)
                    .WithMany(p => p.HomeSales)
                    .HasForeignKey(d => d.DeliverTo)
                    .HasConstraintName("FK_Home_Sale_dependent_information");

                entity.HasOne(d => d.PropertyNavigation)
                    .WithMany(p => p.HomeSales)
                    .HasForeignKey(d => d.PropertyId)
                    .HasConstraintName("FK_Home_Sale_Housing_List");

                entity.HasOne(d => d.SaleStatus)
                    .WithMany(p => p.HomeSales)
                    .HasForeignKey(d => d.SaleStatusId)
                    .HasConstraintName("FK_Home_Sale_Cat_Status_Sale");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.HomeSales)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_Home_Sale_Cat_Status");

                entity.HasOne(d => d.WorkOrderServicesNavigation)
                    .WithMany(p => p.HomeSales)
                    .HasForeignKey(d => d.WorkOrderServices)
                    .HasConstraintName("FK_Home_Sale_Work_Order_Services");
            });

            modelBuilder.Entity<HousingList>(entity =>
            {
                entity.ToTable("Housing_List");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AdditionalComments)
                    .HasColumnName("additional_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Address)
                    .HasColumnName("address")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Bathrooms).HasColumnName("bathrooms");

                entity.Property(e => e.Bedrooms).HasColumnName("bedrooms");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Currency).HasColumnName("currency");

                entity.Property(e => e.HousingStatus).HasColumnName("housing_status");

                entity.Property(e => e.ParkingSpaces).HasColumnName("parking_spaces");

                entity.Property(e => e.Price)
                    .HasColumnName("price")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.PropertyNo).HasColumnName("property_no");

                entity.Property(e => e.PropertyType).HasColumnName("property_type");

                entity.Property(e => e.Sample).HasColumnName("sample");

                entity.Property(e => e.Service).HasColumnName("service");

                entity.Property(e => e.ServiceType).HasColumnName("service_type");

                entity.Property(e => e.Supplier).HasColumnName("supplier");

                entity.Property(e => e.SupplierPartner).HasColumnName("supplier_partner");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.VisitDate)
                    .HasColumnName("visit_date")
                    .HasColumnType("date");

                entity.Property(e => e.WebSite)
                    .HasColumnName("web_site")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.WorkOrder).HasColumnName("work_order");

                entity.Property(e => e.Zip).HasColumnName("zip");

                entity.HasOne(d => d.CurrencyNavigation)
                    .WithMany(p => p.HousingLists)
                    .HasForeignKey(d => d.Currency)
                    .HasConstraintName("FK_Housing_List_Cat_currency");

                entity.HasOne(d => d.HousingStatusNavigation)
                    .WithMany(p => p.HousingLists)
                    .HasForeignKey(d => d.HousingStatus)
                    .HasConstraintName("FK_Housing_List_Cat_StatusHousing");

                entity.HasOne(d => d.PropertyTypeNavigation)
                    .WithMany(p => p.HousingLists)
                    .HasForeignKey(d => d.PropertyType)
                    .HasConstraintName("FK_Housing_List_Cat_PropertyTypeHousing");

                entity.HasOne(d => d.SupplierNavigation)
                    .WithMany(p => p.HousingLists)
                    .HasForeignKey(d => d.Supplier)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Housing_List_Cat_Supplier");

                entity.HasOne(d => d.SupplierPartnerNavigation)
                    .WithMany(p => p.HousingLists)
                    .HasForeignKey(d => d.SupplierPartner)
                    .HasConstraintName("FK_Housing_List_Cat_SupplierCompany");

                entity.HasOne(d => d.WorkOrderNavigation)
                    .WithMany(p => p.HousingLists)
                    .HasForeignKey(d => d.WorkOrder)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Housing_List_work_order");
            });

            modelBuilder.Entity<HousingReport>(entity =>
            {
                entity.ToTable("Housing_Report");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("date");

                entity.Property(e => e.HousingList).HasColumnName("housing_list");

                entity.Property(e => e.ReportDetails)
                    .HasColumnName("report_details")
                    .IsUnicode(false);

                entity.Property(e => e.SampleProperty).HasColumnName("sample_property");

                entity.Property(e => e.ServiceId).HasColumnName("service_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.WorkOrder).HasColumnName("work_order");

                entity.HasOne(d => d.HousingListNavigation)
                    .WithMany(p => p.HousingReports)
                    .HasForeignKey(d => d.HousingList)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Housing_Report_Housing_List");
            });

            modelBuilder.Entity<HousingSpecification>(entity =>
            {
                entity.ToTable("Housing_Specification");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AdditionalComments)
                    .HasColumnName("additional_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.AreaInterest)
                    .IsRequired()
                    .HasColumnName("area_interest")
                    .HasMaxLength(250);

                entity.Property(e => e.Bathroom).HasColumnName("bathroom");

                entity.Property(e => e.Bedroom).HasColumnName("bedroom");

                entity.Property(e => e.Budget)
                    .HasColumnName("budget")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ContractTypeId).HasColumnName("contract_type_id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.CurrencyId).HasColumnName("currency_id");

                entity.Property(e => e.DesiredCommuteTime)
                    .HasColumnName("desired_commute_time")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IntendedStartDate)
                    .HasColumnName("intended_start_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.MetricId).HasColumnName("metric_id");

                entity.Property(e => e.ParkingSpace).HasColumnName("parking_space");

                entity.Property(e => e.PropertyTypeId).HasColumnName("property_type_id");

                entity.Property(e => e.Size)
                    .HasColumnName("size")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TypeService).HasColumnName("type_service");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.WorkOrderServices).HasColumnName("work_order_services");

                entity.HasOne(d => d.ContractType)
                    .WithMany(p => p.HousingSpecifications)
                    .HasForeignKey(d => d.ContractTypeId)
                    .HasConstraintName("FK_Housing_Specification_Cat_contract_type");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.HousingSpecifications)
                    .HasForeignKey(d => d.CurrencyId)
                    .HasConstraintName("FK_Housing_Specification_Cat_currency");

                entity.HasOne(d => d.Metric)
                    .WithMany(p => p.HousingSpecifications)
                    .HasForeignKey(d => d.MetricId)
                    .HasConstraintName("FK_Housing_Specification_Cat_metric");

                entity.HasOne(d => d.PropertyType)
                    .WithMany(p => p.HousingSpecifications)
                    .HasForeignKey(d => d.PropertyTypeId)
                    .HasConstraintName("FK_Housing_Specification_Cat_property_type");

                entity.HasOne(d => d.TypeServiceNavigation)
                    .WithMany(p => p.HousingSpecifications)
                    .HasForeignKey(d => d.TypeService)
                    .HasConstraintName("FK_Housing_Specification_Cat_TypeHousing");

                entity.HasOne(d => d.WorkOrderServicesNavigation)
                    .WithMany(p => p.HousingSpecifications)
                    .HasForeignKey(d => d.WorkOrderServices)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Housing_Specification_Service_Record");
            });

            modelBuilder.Entity<HousingStatusHistory>(entity =>
            {
                entity.ToTable("Housing_Status_History");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.HousingId).HasColumnName("housing_id");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.HousingStatusHistories)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_Housing_Status_History_Users");

                entity.HasOne(d => d.Housing)
                    .WithMany(p => p.HousingStatusHistories)
                    .HasForeignKey(d => d.HousingId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Housing_Status_History_Housing_List");

                entity.HasOne(d => d.StatusNavigation)
                    .WithMany(p => p.HousingStatusHistories)
                    .HasForeignKey(d => d.Status)
                    .HasConstraintName("FK_Housing_Status_History_Cat_StatusHousing");
            });

            modelBuilder.Entity<ImmigrationCoodinator>(entity =>
            {
                entity.ToTable("immigration_coodinator");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Accepted)
                    .HasColumnName("accepted")
                    .HasColumnType("date");

                entity.Property(e => e.Assigned)
                    .HasColumnName("assigned")
                    .HasColumnType("date");

                entity.Property(e => e.CoordinatorId).HasColumnName("coordinator_id");

                entity.Property(e => e.CoordinatorTypeId).HasColumnName("coordinator_type_id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ServiceRecordId).HasColumnName("service_record_id");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Coordinator)
                    .WithMany(p => p.ImmigrationCoodinators)
                    .HasForeignKey(d => d.CoordinatorId)
                    .HasConstraintName("FK_immigration_coodinator_Profile_User");

                entity.HasOne(d => d.CoordinatorType)
                    .WithMany(p => p.ImmigrationCoodinators)
                    .HasForeignKey(d => d.CoordinatorTypeId)
                    .HasConstraintName("FK_immigration_coodinator_Cat_CoordinatorType");

                entity.HasOne(d => d.ServiceRecord)
                    .WithMany(p => p.ImmigrationCoodinators)
                    .HasForeignKey(d => d.ServiceRecordId)
                    .HasConstraintName("FK_immigration_coodinator_Service_Record");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.ImmigrationCoodinators)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_immigration_coodinator_Cat_StatusSupplierCoordinator");
            });

            modelBuilder.Entity<ImmigrationProfile>(entity =>
            {
                entity.ToTable("Immigration_profile");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AssigmentInformationId).HasColumnName("assigment_information_id");

                entity.Property(e => e.HighestLevelEducationalId).HasColumnName("highest_level_educational_id");

                entity.Property(e => e.PassportInformationId).HasColumnName("passport_information_id");

                entity.Property(e => e.PreviousHostCountryId).HasColumnName("previous_host_country_id");

                entity.Property(e => e.ServiceRecordId).HasColumnName("service_record_id");

                entity.HasOne(d => d.AssigmentInformation)
                    .WithMany(p => p.ImmigrationProfiles)
                    .HasForeignKey(d => d.AssigmentInformationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Immigration_profile_assigment_information");

                entity.HasOne(d => d.HighestLevelEducational)
                    .WithMany(p => p.ImmigrationProfiles)
                    .HasForeignKey(d => d.HighestLevelEducationalId)
                    .HasConstraintName("FK_Immigration_profile_Cat_HighestLevelEducation");

                entity.HasOne(d => d.PassportInformation)
                    .WithMany(p => p.ImmigrationProfiles)
                    .HasForeignKey(d => d.PassportInformationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Immigration_profile_passport_information");

                entity.HasOne(d => d.PreviousHostCountry)
                    .WithMany(p => p.ImmigrationProfiles)
                    .HasForeignKey(d => d.PreviousHostCountryId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Immigration_profile_previous_host_country");

                entity.HasOne(d => d.ServiceRecord)
                    .WithMany(p => p.ImmigrationProfiles)
                    .HasForeignKey(d => d.ServiceRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Immigration_profile_Service_Record");
            });

            modelBuilder.Entity<ImmigrationSupplierPartner>(entity =>
            {
                entity.ToTable("immigration_supplier_partner");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AcceptedDate)
                    .HasColumnName("accepted_date")
                    .HasColumnType("date");

                entity.Property(e => e.AssignedDate)
                    .HasColumnName("assigned_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ServiceRecordId).HasColumnName("service_record_id");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.SupplierCompanyId).HasColumnName("supplier_company_id");

                entity.Property(e => e.SupplierId).HasColumnName("supplier_id");

                entity.Property(e => e.SupplierTypeId).HasColumnName("supplier_type_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.ServiceRecord)
                    .WithMany(p => p.ImmigrationSupplierPartners)
                    .HasForeignKey(d => d.ServiceRecordId)
                    .HasConstraintName("FK_immigration_supplier_partner_Service_Record");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.ImmigrationSupplierPartners)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_immigration_supplier_partner_Cat_StatusSupplierCoordinator");

                entity.HasOne(d => d.SupplierCompany)
                    .WithMany(p => p.ImmigrationSupplierPartners)
                    .HasForeignKey(d => d.SupplierCompanyId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_immigration_supplier_partner_Supplier_Partner_Profile_Consultant");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.ImmigrationSupplierPartners)
                    .HasForeignKey(d => d.SupplierId)
                    .HasConstraintName("FK_immigration_supplier_partner_Consultant_Contacts_Consultant");

                entity.HasOne(d => d.SupplierType)
                    .WithMany(p => p.ImmigrationSupplierPartners)
                    .HasForeignKey(d => d.SupplierTypeId)
                    .HasConstraintName("FK_immigration_supplier_partner_Cat_Country");
            });

            modelBuilder.Entity<IncludedRent>(entity =>
            {
                entity.ToTable("Included_Rent");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Amount)
                    .HasColumnName("amount")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Currency)
                    .HasColumnName("currency")
                    .HasColumnType("date");

                entity.Property(e => e.Expense)
                    .HasColumnName("expense")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.HomeFindingId).HasColumnName("home_finding_id");

                entity.Property(e => e.Included).HasColumnName("included");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<Inspection>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FinalInspectionDate)
                    .HasColumnName("final_inspection_date")
                    .HasColumnType("date");

                entity.Property(e => e.HousingList).HasColumnName("housing_list");

                entity.Property(e => e.InitialInspectionDate)
                    .HasColumnName("initial_inspection_date")
                    .HasColumnType("date");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.HousingListNavigation)
                    .WithMany(p => p.Inspections)
                    .HasForeignKey(d => d.HousingList)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Inspections_Housing_List");
            });

            modelBuilder.Entity<InspectionHomeFinding>(entity =>
            {
                entity.ToTable("Inspection_Home_Finding");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FinalInspectionDate)
                    .HasColumnName("final_inspection_date")
                    .HasColumnType("date");

                entity.Property(e => e.HomeFindingId).HasColumnName("home_finding_id");

                entity.Property(e => e.InitialInspectionDate)
                    .HasColumnName("initial_inspection_date")
                    .HasColumnType("date");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<Invoice>(entity =>
            {
                entity.ToTable("Invoice");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Consultant).HasColumnName("consultant");

                entity.Property(e => e.Contact).HasColumnName("contact");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.InoviceNo)
                    .HasColumnName("inovice_no")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceType).HasColumnName("invoice_type");

                entity.Property(e => e.MethodPayment).HasColumnName("method_payment");

                entity.Property(e => e.Office).HasColumnName("office");

                entity.Property(e => e.PaymentId).HasColumnName("payment_id");

                entity.Property(e => e.PaymentNumber)
                    .HasColumnName("payment_number")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceRecord).HasColumnName("service_record");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.ContactNavigation)
                    .WithMany(p => p.Invoices)
                    .HasForeignKey(d => d.Contact)
                    .HasConstraintName("FK_Invoice_Office_Contact");

                entity.HasOne(d => d.InvoiceTypeNavigation)
                    .WithMany(p => p.Invoices)
                    .HasForeignKey(d => d.InvoiceType)
                    .HasConstraintName("FK_Invoice_Cat_InvoiceType");

                entity.HasOne(d => d.OfficeNavigation)
                    .WithMany(p => p.Invoices)
                    .HasForeignKey(d => d.Office)
                    .HasConstraintName("FK_Invoice_Office_Information");

                entity.HasOne(d => d.ServiceRecordNavigation)
                    .WithMany(p => p.Invoices)
                    .HasForeignKey(d => d.ServiceRecord)
                    .HasConstraintName("FK_Invoice_Service_Record");
            });

            modelBuilder.Entity<KeyInventory>(entity =>
            {
                entity.ToTable("Key_Inventory");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyReport).HasColumnName("property_report");

                entity.Property(e => e.Quantity).HasColumnName("quantity");

                entity.Property(e => e.Section).HasColumnName("section");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.PropertyReportNavigation)
                    .WithMany(p => p.KeyInventories)
                    .HasForeignKey(d => d.PropertyReport)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Key_Inventory_Property_Report");

                entity.HasOne(d => d.SectionNavigation)
                    .WithMany(p => p.KeyInventories)
                    .HasForeignKey(d => d.Section)
                    .HasConstraintName("FK_Key_Inventory_Cat_PropertySection");
            });

            modelBuilder.Entity<LandLordBank>(entity =>
            {
                entity.ToTable("LandLord_Bank");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountType).HasColumnName("account_type");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.GeneralComments)
                    .HasColumnName("general_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.HomeFindingId).HasColumnName("home_finding_id");

                entity.HasOne(d => d.AccountTypeNavigation)
                    .WithMany(p => p.LandLordBanks)
                    .HasForeignKey(d => d.AccountType)
                    .HasConstraintName("FK_LandLord_Bank_Cat_BankAccountType");
            });

            modelBuilder.Entity<LandLordBankDetail>(entity =>
            {
                entity.ToTable("LandLord_Bank_Details");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountHoldersName)
                    .HasColumnName("account_holders_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNumber)
                    .HasColumnName("account_number")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.AccountType).HasColumnName("account_type");

                entity.Property(e => e.BankAddress)
                    .HasColumnName("bank_address")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.BankName)
                    .HasColumnName("bank_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreditCard).HasColumnName("credit_card");

                entity.Property(e => e.Currency).HasColumnName("currency");

                entity.Property(e => e.FiscalInvoice).HasColumnName("fiscal_invoice");

                entity.Property(e => e.InternationalPaymentAcceptance).HasColumnName("international_payment_acceptance");

                entity.Property(e => e.LandlordBankId).HasColumnName("landlord_bank_id");

                entity.Property(e => e.PayToOrderOf)
                    .HasColumnName("pay_to_order_of")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentMethod).HasColumnName("payment_method");

                entity.Property(e => e.RoutingNumber)
                    .HasColumnName("routing_number")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.SwiftBicCode)
                    .HasColumnName("swift_bic_code")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.WireFeeApprox)
                    .HasColumnName("wire_fee_approx")
                    .HasColumnType("decimal(18, 0)");

                entity.HasOne(d => d.AccountTypeNavigation)
                    .WithMany(p => p.LandLordBankDetails)
                    .HasForeignKey(d => d.AccountType)
                    .HasConstraintName("FK_LandLord_Bank_Details_Cat_BankAccountType");

                entity.HasOne(d => d.CreditCardNavigation)
                    .WithMany(p => p.LandLordBankDetails)
                    .HasForeignKey(d => d.CreditCard)
                    .HasConstraintName("FK_LandLord_Bank_Details_Cat_CreditCards");

                entity.HasOne(d => d.LandlordBank)
                    .WithMany(p => p.LandLordBankDetails)
                    .HasForeignKey(d => d.LandlordBankId)
                    .HasConstraintName("FK_LandLord_Bank_Details_LandLord_Bank");

                entity.HasOne(d => d.PaymentMethodNavigation)
                    .WithMany(p => p.LandLordBankDetails)
                    .HasForeignKey(d => d.PaymentMethod)
                    .HasConstraintName("FK_LandLord_Bank_Details_Cat_PaymetMethods");
            });

            modelBuilder.Entity<LandlordDetail>(entity =>
            {
                entity.ToTable("Landlord_Details");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.HomeFindingId).HasColumnName("home_finding_id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PrincipalEmail)
                    .HasColumnName("principal_email")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PrincipalPhone)
                    .HasColumnName("principal_phone")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SecondaryEmail)
                    .HasColumnName("secondary_email")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SecondaryPhone)
                    .HasColumnName("secondary_phone")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LandlordDetailsHome>(entity =>
            {
                entity.ToTable("Landlord_Details_Home");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .ValueGeneratedNever();

                entity.Property(e => e.AccountHoldersName)
                    .HasColumnName("account_holders_name")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNumber)
                    .HasColumnName("account_number")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.AccountType).HasColumnName("account_type");

                entity.Property(e => e.BankAddress)
                    .HasColumnName("bank_address")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.BankName)
                    .HasColumnName("bank_name")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Cash).HasColumnName("cash");

                entity.Property(e => e.Checks).HasColumnName("checks");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.CreditCard).HasColumnName("credit_card");

                entity.Property(e => e.Currency).HasColumnName("currency");

                entity.Property(e => e.FiscalInvoice).HasColumnName("fiscal_invoice");

                entity.Property(e => e.GeneralComments)
                    .HasColumnName("general_comments")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.InternationalPayment).HasColumnName("international_payment");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.PayToOrderOf)
                    .HasColumnName("pay_to_order_of")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PrincipalEmail)
                    .HasColumnName("principal_email")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PrincipalPhone)
                    .HasColumnName("principal_phone")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RoutingNumber)
                    .HasColumnName("routing_number")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.SecondaryEmail)
                    .HasColumnName("secondary_email")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SecundaryPhone)
                    .HasColumnName("secundary_phone")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SwiftBicCode)
                    .HasColumnName("swift_bic_code")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.WireFree)
                    .HasColumnName("wire_free")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.WireTransfer).HasColumnName("wire_transfer");

                entity.HasOne(d => d.AccountTypeNavigation)
                    .WithMany(p => p.LandlordDetailsHomes)
                    .HasForeignKey(d => d.AccountType)
                    .HasConstraintName("FK_Landlord_Details_Home_Cat_BankAccountType");

                entity.HasOne(d => d.CurrencyNavigation)
                    .WithMany(p => p.LandlordDetailsHomes)
                    .HasForeignKey(d => d.Currency)
                    .HasConstraintName("FK_Landlord_Details_Home_Cat_currency");

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.LandlordDetailsHome)
                    .HasForeignKey<LandlordDetailsHome>(d => d.Id)
                    .HasConstraintName("FK_Landlord_Details_Home_Housing_List");
            });

            modelBuilder.Entity<LanguageDependentInformation>(entity =>
            {
                entity.HasKey(e => new { e.Dependent, e.Language });

                entity.ToTable("language_dependent_information");

                entity.Property(e => e.Dependent).HasColumnName("dependent");

                entity.Property(e => e.Language).HasColumnName("language");

                entity.HasOne(d => d.DependentNavigation)
                    .WithMany(p => p.LanguageDependentInformations)
                    .HasForeignKey(d => d.Dependent)
                    .HasConstraintName("FK_language_dependent_information_dependent_information");

                entity.HasOne(d => d.LanguageNavigation)
                    .WithMany(p => p.LanguageDependentInformations)
                    .HasForeignKey(d => d.Language)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_language_dependent_information_Cat_Languages");
            });

            modelBuilder.Entity<LanguagesConsultantContactsConsultant>(entity =>
            {
                entity.HasKey(e => new { e.ConsultantContactsService, e.Language });

                entity.ToTable("Languages_Consultant_Contacts_Consultant");

                entity.Property(e => e.ConsultantContactsService).HasColumnName("consultant_contacts_service");

                entity.Property(e => e.Language).HasColumnName("language");

                entity.HasOne(d => d.ConsultantContactsServiceNavigation)
                    .WithMany(p => p.LanguagesConsultantContactsConsultants)
                    .HasForeignKey(d => d.ConsultantContactsService)
                    .HasConstraintName("FK_Languages_Consultant_Contacts_Consultant_Consultant_Contacts_Consultant");

                entity.HasOne(d => d.LanguageNavigation)
                    .WithMany(p => p.LanguagesConsultantContactsConsultants)
                    .HasForeignKey(d => d.Language)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Languages_Consultant_Contacts_Consultant_Cat_Languages");
            });

            modelBuilder.Entity<LanguagesConsultantContactsService>(entity =>
            {
                entity.HasKey(e => new { e.ConsultantContactsService, e.Language });

                entity.ToTable("Languages_Consultant_Contacts_Service");

                entity.Property(e => e.ConsultantContactsService).HasColumnName("consultant_contacts_service");

                entity.Property(e => e.Language).HasColumnName("language");

                entity.HasOne(d => d.ConsultantContactsServiceNavigation)
                    .WithMany(p => p.LanguagesConsultantContactsServices)
                    .HasForeignKey(d => d.ConsultantContactsService)
                    .HasConstraintName("FK_Languages_Consultant_Contacts_Service_Consultant_Contacts_Service");

                entity.HasOne(d => d.LanguageNavigation)
                    .WithMany(p => p.LanguagesConsultantContactsServices)
                    .HasForeignKey(d => d.Language)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Languages_Consultant_Contacts_Service_Cat_Languages");
            });

            modelBuilder.Entity<LanguagesSpoken>(entity =>
            {
                entity.HasKey(e => new { e.AssignneInformation, e.Languages });

                entity.ToTable("Languages_Spoken");

                entity.Property(e => e.AssignneInformation).HasColumnName("assignne_information");

                entity.Property(e => e.Languages).HasColumnName("languages");

                entity.HasOne(d => d.AssignneInformationNavigation)
                    .WithMany(p => p.LanguagesSpokens)
                    .HasForeignKey(d => d.AssignneInformation)
                    .HasConstraintName("FK_Languages_Spoken_assignee_information");
            });

            modelBuilder.Entity<LanguagesSpokenSchoolingAreaOrientation>(entity =>
            {
                entity.HasKey(e => new { e.Schooling, e.LanguagesSpoken })
                    .HasName("PK_Languages_Spoken_Schooling_Area_Orientation_1");

                entity.ToTable("Languages_Spoken_Schooling_Area_Orientation");

                entity.Property(e => e.Schooling).HasColumnName("schooling");

                entity.Property(e => e.LanguagesSpoken).HasColumnName("languages_spoken");

                entity.HasOne(d => d.LanguagesSpokenNavigation)
                    .WithMany(p => p.LanguagesSpokenSchoolingAreaOrientations)
                    .HasForeignKey(d => d.LanguagesSpoken)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Languages_Spoken_Schooling_Area_Orientation_Cat_Languages");

                entity.HasOne(d => d.SchoolingNavigation)
                    .WithMany(p => p.LanguagesSpokenSchoolingAreaOrientations)
                    .HasForeignKey(d => d.Schooling)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Languages_Spoken_Schooling_Area_Orientation_Schooling_Area_Orientation1");
            });

            modelBuilder.Entity<LanguangeSpokenSchoolingInformation>(entity =>
            {
                entity.HasKey(e => new { e.SchoolingInformation, e.LanguageSpoken });

                entity.ToTable("Languange_Spoken_Schooling_Information");

                entity.Property(e => e.SchoolingInformation).HasColumnName("schooling_information");

                entity.Property(e => e.LanguageSpoken).HasColumnName("language_spoken");

                entity.HasOne(d => d.LanguageSpokenNavigation)
                    .WithMany(p => p.LanguangeSpokenSchoolingInformations)
                    .HasForeignKey(d => d.LanguageSpoken)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Languange_Spoken_Schooling_Information_Cat_Languages");

                entity.HasOne(d => d.SchoolingInformationNavigation)
                    .WithMany(p => p.LanguangeSpokenSchoolingInformations)
                    .HasForeignKey(d => d.SchoolingInformation)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Languange_Spoken_Schooling_Information_Schooling_Information");
            });

            modelBuilder.Entity<LeaseRenewal>(entity =>
            {
                entity.ToTable("Lease_Renewal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreationBy).HasColumnName("creation_by");

                entity.Property(e => e.DeliverTo).HasColumnName("deliver_to");

                entity.Property(e => e.Property).HasColumnName("property");

                entity.Property(e => e.ServiceCompletionDate)
                    .HasColumnName("service_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.WorkOrderServices).HasColumnName("work_order_services");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.LeaseRenewals)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_Lease_Renewal_Cat_Status");

                entity.HasOne(d => d.WorkOrderServicesNavigation)
                    .WithMany(p => p.LeaseRenewals)
                    .HasForeignKey(d => d.WorkOrderServices)
                    .HasConstraintName("FK_Lease_Renewal_Work_Order_Services");
            });

            modelBuilder.Entity<LegalReview>(entity =>
            {
                entity.ToTable("Legal_Review");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApplicantId).HasColumnName("applicant_id");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.BilliableHours).HasColumnName("billiable_hours");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.HostCountryId).HasColumnName("host_country_id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceCompletionDate)
                    .HasColumnName("service_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.WorkOrderServicesId).HasColumnName("work_order_services_id");

                entity.HasOne(d => d.HostCountry)
                    .WithMany(p => p.LegalReviews)
                    .HasForeignKey(d => d.HostCountryId)
                    .HasConstraintName("FK_Legal_Review_Cat_Country");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.LegalReviews)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Legal_Review_Cat_Status");

                entity.HasOne(d => d.WorkOrderServices)
                    .WithMany(p => p.LegalReviews)
                    .HasForeignKey(d => d.WorkOrderServicesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Legal_Review_Service_Order_Services");
            });

            modelBuilder.Entity<LenguageProficiency>(entity =>
            {
                entity.ToTable("lenguage_proficiency");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(50);

                entity.Property(e => e.ImmigrationProfileId).HasColumnName("immigration_profile_id");

                entity.Property(e => e.LanguageId).HasColumnName("language_id");

                entity.Property(e => e.ProficiencyId).HasColumnName("proficiency_id");

                entity.HasOne(d => d.ImmigrationProfile)
                    .WithMany(p => p.LenguageProficiencies)
                    .HasForeignKey(d => d.ImmigrationProfileId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_lenguage_proficiency_Immigration_profile");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.LenguageProficiencies)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_lenguage_proficiency_Cat_Languages");

                entity.HasOne(d => d.Proficiency)
                    .WithMany(p => p.LenguageProficiencies)
                    .HasForeignKey(d => d.ProficiencyId)
                    .HasConstraintName("FK_lenguage_proficiency_Cat_Proficiency");
            });

            modelBuilder.Entity<LifeCircle>(entity =>
            {
                entity.ToTable("Life_Circle");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.LifeCircle1)
                    .IsRequired()
                    .HasColumnName("life_circle")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<LocalDocumentation>(entity =>
            {
                entity.ToTable("Local_Documentation");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApplicantId).HasColumnName("applicant_id");

                entity.Property(e => e.ApplicationApprovalDate)
                    .HasColumnName("application_approval_date")
                    .HasColumnType("date");

                entity.Property(e => e.ApplicationSubmissionDate)
                    .HasColumnName("application_submission_date")
                    .HasColumnType("date");

                entity.Property(e => e.AppointmentDate)
                    .HasColumnName("appointment_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DocumentCollectionCompletionDate)
                    .HasColumnName("document_collection_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentCollectionStartDate)
                    .HasColumnName("document_collection_start_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentDeliveryDate)
                    .HasColumnName("document_delivery_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentExpirationDate)
                    .HasColumnName("document_expiration_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentTypeId).HasColumnName("document_type_id");

                entity.Property(e => e.HostCityId).HasColumnName("host_city_id");

                entity.Property(e => e.HostCountryId).HasColumnName("host_country_id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectFee)
                    .HasColumnName("project_fee")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceCompletionDate)
                    .HasColumnName("service_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.ServiceId).HasColumnName("service_id");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.SupplierId).HasColumnName("supplier_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.WorkOrderServicesId).HasColumnName("work_order_services_id");

                entity.HasOne(d => d.DocumentType)
                    .WithMany(p => p.LocalDocumentations)
                    .HasForeignKey(d => d.DocumentTypeId)
                    .HasConstraintName("FK_Local_Documentation_Cat_DocumentType");

                entity.HasOne(d => d.HostCity)
                    .WithMany(p => p.LocalDocumentations)
                    .HasForeignKey(d => d.HostCityId)
                    .HasConstraintName("FK_Local_Documentation_Cat_State");

                entity.HasOne(d => d.HostCountry)
                    .WithMany(p => p.LocalDocumentations)
                    .HasForeignKey(d => d.HostCountryId)
                    .HasConstraintName("FK_Local_Documentation_Cat_Country");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.LocalDocumentations)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_Local_Documentation_Cat_Service");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.LocalDocumentations)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Local_Documentation_Cat_Status");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.LocalDocumentations)
                    .HasForeignKey(d => d.SupplierId)
                    .HasConstraintName("FK_Local_Documentation_Profile_User");

                entity.HasOne(d => d.WorkOrderServices)
                    .WithMany(p => p.LocalDocumentations)
                    .HasForeignKey(d => d.WorkOrderServicesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Local_Documentation_Service_Order_Services");
            });

            modelBuilder.Entity<Location>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Address)
                    .HasColumnName("address")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Latitude)
                    .HasColumnName("latitude")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LocationName)
                    .HasColumnName("location_name")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LocationType).HasColumnName("location_type");

                entity.Property(e => e.Longitude)
                    .HasColumnName("longitude")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MapItId).HasColumnName("map_it_id");

                entity.Property(e => e.Service).HasColumnName("service");

                entity.HasOne(d => d.LocationTypeNavigation)
                    .WithMany(p => p.Locations)
                    .HasForeignKey(d => d.LocationType)
                    .HasConstraintName("FK_Locations_Cat_LocationType");

                entity.HasOne(d => d.MapIt)
                    .WithMany(p => p.Locations)
                    .HasForeignKey(d => d.MapItId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Locations_Map_It");
            });

            modelBuilder.Entity<MapIt>(entity =>
            {
                entity.ToTable("Map_It");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CompletedDate)
                    .HasColumnName("completed_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DriverContact)
                    .HasColumnName("driver_contact")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DriverName)
                    .HasColumnName("driver_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PlateNumber)
                    .HasColumnName("plate_number")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceLine).HasColumnName("service_line");

                entity.Property(e => e.ServiceRecord).HasColumnName("service_record");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("date");

                entity.Property(e => e.SupplierPartner).HasColumnName("supplier_partner");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.Vehicle)
                    .HasColumnName("vehicle")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.ServiceRecordNavigation)
                    .WithMany(p => p.MapIts)
                    .HasForeignKey(d => d.ServiceRecord)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Map_It_Service_Record");

                entity.HasOne(d => d.SupplierPartnerNavigation)
                    .WithMany(p => p.MapIts)
                    .HasForeignKey(d => d.SupplierPartner)
                    .HasConstraintName("FK_Map_It_Cat_Supplier");
            });

            modelBuilder.Entity<Message>(entity =>
            {
                entity.ToTable("Message");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Conversation).HasColumnName("conversation");

                entity.Property(e => e.Message1)
                    .IsRequired()
                    .HasColumnName("message")
                    .HasMaxLength(512);

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.Time).HasColumnName("time");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.ConversationNavigation)
                    .WithMany(p => p.Messages)
                    .HasForeignKey(d => d.Conversation)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Message_Conversation");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Messages)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Message_Users");
            });

            modelBuilder.Entity<Nationality>(entity =>
            {
                entity.ToTable("Nationality");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nationality1)
                    .IsRequired()
                    .HasColumnName("nationality")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<Notification>(entity =>
            {
                entity.ToTable("Notification");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApplicantId).HasColumnName("applicant_id");

                entity.Property(e => e.ApplicationApprovalDate)
                    .HasColumnName("application_approval_date")
                    .HasColumnType("date");

                entity.Property(e => e.ApplicationSubmissionDate)
                    .HasColumnName("application_submission_date")
                    .HasColumnType("date");

                entity.Property(e => e.AppointmentDate)
                    .HasColumnName("appointment_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.HostCityId).HasColumnName("host_city_id");

                entity.Property(e => e.HostCountryId).HasColumnName("host_country_id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NotificationTypeId).HasColumnName("notification_type_id");

                entity.Property(e => e.ServiceCompletionDate)
                    .HasColumnName("service_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.WorkOrderServicesId).HasColumnName("work_order_services_id");

                entity.HasOne(d => d.HostCity)
                    .WithMany(p => p.Notifications)
                    .HasForeignKey(d => d.HostCityId)
                    .HasConstraintName("FK_Notification_Cat_State");

                entity.HasOne(d => d.HostCountry)
                    .WithMany(p => p.Notifications)
                    .HasForeignKey(d => d.HostCountryId)
                    .HasConstraintName("FK_Notification_Cat_Country");

                entity.HasOne(d => d.NotificationType)
                    .WithMany(p => p.Notifications)
                    .HasForeignKey(d => d.NotificationTypeId)
                    .HasConstraintName("FK_Notification_Cat_NotificationType");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Notifications)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Notification_Cat_Status");

                entity.HasOne(d => d.WorkOrderServices)
                    .WithMany(p => p.Notifications)
                    .HasForeignKey(d => d.WorkOrderServicesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Notification_Service_Order_Services");
            });

            modelBuilder.Entity<NotificationSystem>(entity =>
            {
                entity.ToTable("Notification_System");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Accept).HasColumnName("accept");

                entity.Property(e => e.Archive).HasColumnName("archive");

                entity.Property(e => e.Color)
                    .HasColumnName("color")
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.NotificationType).HasColumnName("notification_type");

                entity.Property(e => e.ServiceRecord).HasColumnName("service_record");

                entity.Property(e => e.Time).HasColumnName("time");

                entity.Property(e => e.UserFrom).HasColumnName("user_from");

                entity.Property(e => e.UserTo).HasColumnName("user_to");

                entity.Property(e => e.View).HasColumnName("view");

                entity.HasOne(d => d.NotificationTypeNavigation)
                    .WithMany(p => p.NotificationSystems)
                    .HasForeignKey(d => d.NotificationType)
                    .HasConstraintName("FK_Notification_System_Cat_NotificationSystemType");

                entity.HasOne(d => d.ServiceRecordNavigation)
                    .WithMany(p => p.NotificationSystems)
                    .HasForeignKey(d => d.ServiceRecord)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Notification_System_Service_Record");

                entity.HasOne(d => d.UserFromNavigation)
                    .WithMany(p => p.NotificationSystemUserFromNavigations)
                    .HasForeignKey(d => d.UserFrom)
                    .HasConstraintName("FK_Notification_System_Users");

                entity.HasOne(d => d.UserToNavigation)
                    .WithMany(p => p.NotificationSystemUserToNavigations)
                    .HasForeignKey(d => d.UserTo)
                    .HasConstraintName("FK_Notification_System_Users1");
            });

            modelBuilder.Entity<Office>(entity =>
            {
                entity.HasKey(e => new { e.Consultant, e.Office1 });

                entity.Property(e => e.Consultant).HasColumnName("consultant");

                entity.Property(e => e.Office1).HasColumnName("office");

                entity.HasOne(d => d.ConsultantNavigation)
                    .WithMany(p => p.Offices)
                    .HasForeignKey(d => d.Consultant)
                    .HasConstraintName("FK_Offices_Profile_User");

                entity.HasOne(d => d.Office1Navigation)
                    .WithMany(p => p.Offices)
                    .HasForeignKey(d => d.Office1)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Offices_Cat_Office");
            });

            modelBuilder.Entity<OfficeContact>(entity =>
            {
                entity.ToTable("Office_Contact");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ContactName)
                    .IsRequired()
                    .HasColumnName("contact_name")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("email")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdCity).HasColumnName("id_city");

                entity.Property(e => e.IdContactType).HasColumnName("id_contact_type");

                entity.Property(e => e.IdOfficeInformation).HasColumnName("id_Office_Information");

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasColumnName("phone_number")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tittle)
                    .IsRequired()
                    .HasColumnName("tittle")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCityNavigation)
                    .WithMany(p => p.OfficeContacts)
                    .HasForeignKey(d => d.IdCity)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Office_Contact_Cat_City");

                entity.HasOne(d => d.IdContactTypeNavigation)
                    .WithMany(p => p.OfficeContacts)
                    .HasForeignKey(d => d.IdContactType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Office_Contact_Office_Contact_Type");

                entity.HasOne(d => d.IdOfficeInformationNavigation)
                    .WithMany(p => p.OfficeContacts)
                    .HasForeignKey(d => d.IdOfficeInformation)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Office_Contact_Office_Information");
            });

            modelBuilder.Entity<OfficeContactType>(entity =>
            {
                entity.ToTable("Office_Contact_Type");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ContactType)
                    .IsRequired()
                    .HasColumnName("contact_type")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OfficeInformation>(entity =>
            {
                entity.ToTable("Office_Information");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CommercialName)
                    .IsRequired()
                    .HasColumnName("commercial_name")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentAddress)
                    .IsRequired()
                    .HasColumnName("current_address")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.IdCity).HasColumnName("id_city");

                entity.Property(e => e.IdClientPartnerProfile).HasColumnName("id_client_partner_profile");

                entity.Property(e => e.IdCountry).HasColumnName("id_country");

                entity.Property(e => e.IdTypeOffice).HasColumnName("id_type_office");

                entity.Property(e => e.LegalName)
                    .IsRequired()
                    .HasColumnName("legal_name")
                    .HasMaxLength(450)
                    .IsUnicode(false);

                entity.Property(e => e.ZipCode).HasColumnName("zip_code");

                entity.HasOne(d => d.IdCityNavigation)
                    .WithMany(p => p.OfficeInformations)
                    .HasForeignKey(d => d.IdCity)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Office_Information_Cat_City");

                entity.HasOne(d => d.IdClientPartnerProfileNavigation)
                    .WithMany(p => p.OfficeInformations)
                    .HasForeignKey(d => d.IdClientPartnerProfile)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Office_Information_Client_Partner_Profile");

                entity.HasOne(d => d.IdCountryNavigation)
                    .WithMany(p => p.OfficeInformations)
                    .HasForeignKey(d => d.IdCountry)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Office_Information_Cat_Country");

                entity.HasOne(d => d.IdTypeOfficeNavigation)
                    .WithMany(p => p.OfficeInformations)
                    .HasForeignKey(d => d.IdTypeOffice)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Office_Information_Type_Office");
            });

            modelBuilder.Entity<OperationLeader>(entity =>
            {
                entity.HasKey(e => new { e.CreatedBy, e.Consultant });

                entity.ToTable("Operation_Leader");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.Consultant).HasColumnName("consultant");

                entity.HasOne(d => d.ConsultantNavigation)
                    .WithMany(p => p.OperationLeaderConsultantNavigations)
                    .HasForeignKey(d => d.Consultant)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Operation_Leader_Profile_User1");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.OperationLeaderCreatedByNavigations)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_Operation_Leader_Profile_User");
            });

            modelBuilder.Entity<Other>(entity =>
            {
                entity.ToTable("Other");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.Coordination).HasColumnName("coordination");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DeliverTo).HasColumnName("deliver_to");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceCompletionDate)
                    .HasColumnName("service_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.WorkOrderServices).HasColumnName("work_order_services");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Others)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_Other_Cat_Status");

                entity.HasOne(d => d.WorkOrderServicesNavigation)
                    .WithMany(p => p.Others)
                    .HasForeignKey(d => d.WorkOrderServices)
                    .HasConstraintName("FK_Other_Work_Order_Services");
            });

            modelBuilder.Entity<Participant>(entity =>
            {
                entity.ToTable("Participant");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CompletedDate)
                    .HasColumnName("completed_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Percentage)
                    .HasColumnName("percentage")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Score).HasColumnName("score");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.Training).HasColumnName("training");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.UserParticipant).HasColumnName("user_participant");

                entity.HasOne(d => d.StatusNavigation)
                    .WithMany(p => p.Participants)
                    .HasForeignKey(d => d.Status)
                    .HasConstraintName("FK_Participant_Cat_Participant_Status");

                entity.HasOne(d => d.TrainingNavigation)
                    .WithMany(p => p.Participants)
                    .HasForeignKey(d => d.Training)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Participant_Training");

                entity.HasOne(d => d.UserParticipantNavigation)
                    .WithMany(p => p.Participants)
                    .HasForeignKey(d => d.UserParticipant)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Participant_Users");
            });

            modelBuilder.Entity<ParticipantContent>(entity =>
            {
                entity.ToTable("Participant_Content");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Complete).HasColumnName("complete");

                entity.Property(e => e.Content).HasColumnName("content");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Participant).HasColumnName("participant");

                entity.Property(e => e.Score).HasColumnName("score");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.ContentNavigation)
                    .WithMany(p => p.ParticipantContents)
                    .HasForeignKey(d => d.Content)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Participant_Content_Content");

                entity.HasOne(d => d.ParticipantNavigation)
                    .WithMany(p => p.ParticipantContents)
                    .HasForeignKey(d => d.Participant)
                    .HasConstraintName("FK_Participant_Content_Participant");
            });

            modelBuilder.Entity<ParticipantEvaluation>(entity =>
            {
                entity.ToTable("Participant_Evaluation");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Answer).HasColumnName("answer");

                entity.Property(e => e.Correct).HasColumnName("correct");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.ParticipantContent).HasColumnName("participant_content");

                entity.Property(e => e.Question).HasColumnName("question");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.AnswerNavigation)
                    .WithMany(p => p.ParticipantEvaluations)
                    .HasForeignKey(d => d.Answer)
                    .HasConstraintName("FK_Participant_Evaluation_Answer");

                entity.HasOne(d => d.ParticipantContentNavigation)
                    .WithMany(p => p.ParticipantEvaluations)
                    .HasForeignKey(d => d.ParticipantContent)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Participant_Evaluation_Participant_Content");

                entity.HasOne(d => d.QuestionNavigation)
                    .WithMany(p => p.ParticipantEvaluations)
                    .HasForeignKey(d => d.Question)
                    .HasConstraintName("FK_Participant_Evaluation_Evaluation");
            });

            modelBuilder.Entity<PassportInformation>(entity =>
            {
                entity.ToTable("passport_information");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CurrentAddress)
                    .HasColumnName("current_address")
                    .HasMaxLength(200);

                entity.Property(e => e.Expiration)
                    .HasColumnName("expiration")
                    .HasColumnType("date");

                entity.Property(e => e.Issue)
                    .HasColumnName("issue")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(50);

                entity.Property(e => e.Number)
                    .HasColumnName("number")
                    .HasMaxLength(50);

                entity.Property(e => e.PlaceIssue)
                    .HasColumnName("place_issue")
                    .HasMaxLength(50);

                entity.Property(e => e.SpecificAttentionPoints)
                    .HasColumnName("specific_attention_points")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<Payment>(entity =>
            {
                entity.ToTable("Payment");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AdvenceFee)
                    .HasColumnName("advence_fee")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.CurrencyAdvanceFee).HasColumnName("currency_advance_fee");

                entity.Property(e => e.CurrencyManagementFee).HasColumnName("currency_management_fee");

                entity.Property(e => e.CurrencyPaymentAmount).HasColumnName("currency_payment_amount");

                entity.Property(e => e.CurrencyWireFee).HasColumnName("currency_wire_fee");

                entity.Property(e => e.Desciption)
                    .HasColumnName("desciption")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DueDate)
                    .HasColumnName("due_date")
                    .HasColumnType("date");

                entity.Property(e => e.Fee).HasColumnName("fee");

                entity.Property(e => e.FiscalInvoice).HasColumnName("fiscal_invoice");

                entity.Property(e => e.IfSupplierPartner).HasColumnName("if_supplier_partner");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnName("invoice_date")
                    .HasColumnType("date");

                entity.Property(e => e.InvoiceNo)
                    .HasColumnName("invoice_no")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ManagementFee)
                    .HasColumnName("management_fee")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentAmount)
                    .HasColumnName("payment_amount")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.PaymentDate)
                    .HasColumnName("payment_date")
                    .HasColumnType("date");

                entity.Property(e => e.PaymentMethod).HasColumnName("payment_method");

                entity.Property(e => e.Recurrence).HasColumnName("recurrence");

                entity.Property(e => e.RequestPayment).HasColumnName("request_payment");

                entity.Property(e => e.SameWithoutFee).HasColumnName("same_without_fee");

                entity.Property(e => e.Service).HasColumnName("service");

                entity.Property(e => e.ServiceRecord).HasColumnName("service_record");

                entity.Property(e => e.Supplier).HasColumnName("supplier");

                entity.Property(e => e.SupplierInvoiceDate)
                    .HasColumnName("supplier_invoice_date")
                    .HasColumnType("date");

                entity.Property(e => e.SupplierInvoiceNo)
                    .HasColumnName("supplier_invoice_no")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierName)
                    .HasColumnName("supplier_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierPartner).HasColumnName("supplier_partner");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Urgent).HasColumnName("urgent");

                entity.Property(e => e.WireFee)
                    .HasColumnName("wire_fee")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WorkOrder).HasColumnName("work_order");

                entity.Property(e => e.WorkOrderServices).HasColumnName("work_order_services");

                entity.HasOne(d => d.CurrencyAdvanceFeeNavigation)
                    .WithMany(p => p.PaymentCurrencyAdvanceFeeNavigations)
                    .HasForeignKey(d => d.CurrencyAdvanceFee)
                    .HasConstraintName("FK_Payment_Concept_Cat_currency2");

                entity.HasOne(d => d.CurrencyManagementFeeNavigation)
                    .WithMany(p => p.PaymentCurrencyManagementFeeNavigations)
                    .HasForeignKey(d => d.CurrencyManagementFee)
                    .HasConstraintName("FK_Payment_Concept_Cat_currency");

                entity.HasOne(d => d.CurrencyPaymentAmountNavigation)
                    .WithMany(p => p.PaymentCurrencyPaymentAmountNavigations)
                    .HasForeignKey(d => d.CurrencyPaymentAmount)
                    .HasConstraintName("FK_Payment_Concept_Cat_currency3");

                entity.HasOne(d => d.CurrencyWireFeeNavigation)
                    .WithMany(p => p.PaymentCurrencyWireFeeNavigations)
                    .HasForeignKey(d => d.CurrencyWireFee)
                    .HasConstraintName("FK_Payment_Concept_Cat_currency1");

                entity.HasOne(d => d.RequestPaymentNavigation)
                    .WithMany(p => p.Payments)
                    .HasForeignKey(d => d.RequestPayment)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Payment_Concept_Request_Payment");

                entity.HasOne(d => d.SupplierNavigation)
                    .WithMany(p => p.Payments)
                    .HasForeignKey(d => d.Supplier)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Payment_Concept_Consultant_Contacts_Service");

                entity.HasOne(d => d.SupplierPartnerNavigation)
                    .WithMany(p => p.Payments)
                    .HasForeignKey(d => d.SupplierPartner)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Payment_Concept_Supplier_Partner_Profile_Service");
            });

            modelBuilder.Entity<PaymentAirportTransportationService>(entity =>
            {
                entity.ToTable("Payment_Airport_Transportation_Services");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AirportTransportationServicesId).HasColumnName("airport_transportation_services_id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.PaymentResponsibility)
                    .HasColumnName("payment_responsibility")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentType)
                    .HasColumnName("payment_type")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.AirportTransportationServices)
                    .WithMany(p => p.PaymentAirportTransportationServices)
                    .HasForeignKey(d => d.AirportTransportationServicesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Payment_Airport_Transportation_Services_Airport_Transportation_Services");
            });

            modelBuilder.Entity<PaymentHomeFinding>(entity =>
            {
                entity.ToTable("Payment_Home_Finding");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.HomeFindingId).HasColumnName("home_finding_id");

                entity.Property(e => e.OngoingPayment)
                    .HasColumnName("ongoing_payment")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentType)
                    .HasColumnName("payment_type")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<PaymentHousing>(entity =>
            {
                entity.ToTable("Payment_Housing");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.HousingList).HasColumnName("housing_list");

                entity.Property(e => e.PaymentType).HasColumnName("payment_type");

                entity.Property(e => e.Responsible).HasColumnName("responsible");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.HousingListNavigation)
                    .WithMany(p => p.PaymentHousings)
                    .HasForeignKey(d => d.HousingList)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Payment_Housing_Housing_List");

                entity.HasOne(d => d.PaymentTypeNavigation)
                    .WithMany(p => p.PaymentHousings)
                    .HasForeignKey(d => d.PaymentType)
                    .HasConstraintName("FK_Payment_Housing_Cat_PaymentType");

                entity.HasOne(d => d.PaymentType1)
                    .WithMany(p => p.PaymentHousings)
                    .HasForeignKey(d => d.PaymentType)
                    .HasConstraintName("FK_Payment_Housing_Cat_PaymentTypeStatus");

                entity.HasOne(d => d.ResponsibleNavigation)
                    .WithMany(p => p.PaymentHousings)
                    .HasForeignKey(d => d.Responsible)
                    .HasConstraintName("FK_Payment_Housing_Cat_ResponsablePayment");
            });

            modelBuilder.Entity<PaymentInformationConsultant>(entity =>
            {
                entity.ToTable("Payment_Information_Consultant");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AreasCoverageConsultant).HasColumnName("areas_coverage_consultant");

                entity.Property(e => e.Cash).HasColumnName("cash");

                entity.Property(e => e.Checks).HasColumnName("checks");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreditCard).HasColumnName("credit_card");

                entity.Property(e => e.FiscalInvoice).HasColumnName("fiscal_invoice");

                entity.Property(e => e.GeneralComment)
                    .HasColumnName("general_comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PayToOrderOf)
                    .HasColumnName("pay_to_order_of")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.AreasCoverageConsultantNavigation)
                    .WithMany(p => p.PaymentInformationConsultants)
                    .HasForeignKey(d => d.AreasCoverageConsultant)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Payment_Information_Consultant_Areas_Coverage_Consultant");
            });

            modelBuilder.Entity<PaymentInformationOffice>(entity =>
            {
                entity.ToTable("Payment_Information_Office");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cash).HasColumnName("cash");

                entity.Property(e => e.Checks).HasColumnName("checks");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreditCard).HasColumnName("credit_card");

                entity.Property(e => e.FiscalInvoice).HasColumnName("fiscal_invoice");

                entity.Property(e => e.GeneralComment)
                    .HasColumnName("general_comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IdOfficeInformation).HasColumnName("id_Office_Information");

                entity.Property(e => e.PayToOrderOf)
                    .HasColumnName("pay_to_order_of")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.IdOfficeInformationNavigation)
                    .WithMany(p => p.PaymentInformationOffices)
                    .HasForeignKey(d => d.IdOfficeInformation)
                    .HasConstraintName("FK_Payment_Information_Office_Office_Information");
            });

            modelBuilder.Entity<PaymentInformationProfile>(entity =>
            {
                entity.ToTable("Payment_Information_Profile");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountHoldersName)
                    .HasColumnName("account_holders_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNumber).HasColumnName("account_number");

                entity.Property(e => e.AccountType).HasColumnName("account_type");

                entity.Property(e => e.BankAddress)
                    .HasColumnName("bank_address")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.BankName)
                    .HasColumnName("bank_name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Clabe).HasColumnName("clabe");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Currency).HasColumnName("currency");

                entity.Property(e => e.FiscalInvoice).HasColumnName("fiscal_invoice");

                entity.Property(e => e.InternationalPaymentAcceptance).HasColumnName("international_payment_acceptance");

                entity.Property(e => e.Profile).HasColumnName("profile");

                entity.Property(e => e.RoutingNumber).HasColumnName("routing_number");

                entity.Property(e => e.SwiftBicCode)
                    .HasColumnName("SWIFT_BIC_code")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.WireFeeApprox).HasColumnName("wire_fee_approx");

                entity.Property(e => e.WireTransfer).HasColumnName("wire_transfer");

                entity.HasOne(d => d.AccountTypeNavigation)
                    .WithMany(p => p.PaymentInformationProfiles)
                    .HasForeignKey(d => d.AccountType)
                    .HasConstraintName("FK_Payment_Information_Profile_Cat_BankAccountType");

                entity.HasOne(d => d.CurrencyNavigation)
                    .WithMany(p => p.PaymentInformationProfiles)
                    .HasForeignKey(d => d.Currency)
                    .HasConstraintName("FK_Payment_Information_Profile_Cat_currency");

                entity.HasOne(d => d.ProfileNavigation)
                    .WithMany(p => p.PaymentInformationProfiles)
                    .HasForeignKey(d => d.Profile)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Payment_Information_Profile_Profile_User");
            });

            modelBuilder.Entity<PaymentInformationService>(entity =>
            {
                entity.ToTable("Payment_Information_Service");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AreasCoverageService).HasColumnName("areas_coverage_service");

                entity.Property(e => e.Cash).HasColumnName("cash");

                entity.Property(e => e.Checks).HasColumnName("checks");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreditCard).HasColumnName("credit_card");

                entity.Property(e => e.FiscalInvoice).HasColumnName("fiscal_invoice");

                entity.Property(e => e.GeneralComment)
                    .HasColumnName("general_comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PayToOrderOf)
                    .HasColumnName("pay_to_order_of")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.AreasCoverageServiceNavigation)
                    .WithMany(p => p.PaymentInformationServices)
                    .HasForeignKey(d => d.AreasCoverageService)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Payment_Information_Service_Areas_Coverage_Service");
            });

            modelBuilder.Entity<PaymentRecurrence>(entity =>
            {
                entity.ToTable("Payment_Recurrence");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PaymentRecurrence1)
                    .IsRequired()
                    .HasColumnName("payment_recurrence")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PaymentTransportation>(entity =>
            {
                entity.ToTable("Payment_Transportation");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.PaymentResponsibility)
                    .HasColumnName("payment_responsibility")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentType)
                    .HasColumnName("payment_type")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TransportationId).HasColumnName("transportation_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.Transportation)
                    .WithMany(p => p.PaymentTransportations)
                    .HasForeignKey(d => d.TransportationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Payment_Transportation_Transportation");
            });

            modelBuilder.Entity<PaymentsRentalFurnitureCoordination>(entity =>
            {
                entity.ToTable("Payments_Rental_Furniture_Coordination");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentResponsibility)
                    .HasColumnName("payment_responsibility")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentType)
                    .HasColumnName("payment_type")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RentalFurnitureCoordinationId).HasColumnName("rental_furniture_coordination_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.RentalFurnitureCoordination)
                    .WithMany(p => p.PaymentsRentalFurnitureCoordinations)
                    .HasForeignKey(d => d.RentalFurnitureCoordinationId)
                    .HasConstraintName("FK_Payments_Rental_Furniture_Coordination_Rental_Furniture_Coordination");
            });

            modelBuilder.Entity<PermanentHome>(entity =>
            {
                entity.ToTable("Permanent_Home");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Address)
                    .HasColumnName("address")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Baths).HasColumnName("baths");

                entity.Property(e => e.Beds).HasColumnName("beds");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.HomeFindingId).HasColumnName("home_finding_id");

                entity.Property(e => e.PorpertyNo).HasColumnName("porperty_no");

                entity.Property(e => e.PropertyType).HasColumnName("property_type");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.WebSite)
                    .HasColumnName("web_site")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.PorpertyNoNavigation)
                    .WithMany(p => p.PermanentHomes)
                    .HasForeignKey(d => d.PorpertyNo)
                    .HasConstraintName("FK_Permanent_Home_Cat_Property");

                entity.HasOne(d => d.PropertyTypeNavigation)
                    .WithMany(p => p.PermanentHomes)
                    .HasForeignKey(d => d.PropertyType)
                    .HasConstraintName("FK_Permanent_Home_Cat_PropertyTypeHousing");
            });

            modelBuilder.Entity<Permission>(entity =>
            {
                entity.ToTable("Permission");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Deleting).HasColumnName("deleting");

                entity.Property(e => e.Editing).HasColumnName("editing");

                entity.Property(e => e.IdCatMenu).HasColumnName("id_cat_menu");

                entity.Property(e => e.IdCatSeccion).HasColumnName("id_cat_seccion");

                entity.Property(e => e.IdCatSubMenu).HasColumnName("id_cat_sub_menu");

                entity.Property(e => e.Reading).HasColumnName("reading");

                entity.Property(e => e.Role).HasColumnName("role");

                entity.Property(e => e.Show).HasColumnName("show");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Writing).HasColumnName("writing");

                entity.HasOne(d => d.IdCatMenuNavigation)
                    .WithMany(p => p.Permissions)
                    .HasForeignKey(d => d.IdCatMenu)
                    .HasConstraintName("FK_Permits_Cat_Section");

                entity.HasOne(d => d.IdCatSeccionNavigation)
                    .WithMany(p => p.Permissions)
                    .HasForeignKey(d => d.IdCatSeccion)
                    .HasConstraintName("FK_Permission_Cat_Section");

                entity.HasOne(d => d.IdCatSubMenuNavigation)
                    .WithMany(p => p.Permissions)
                    .HasForeignKey(d => d.IdCatSubMenu)
                    .HasConstraintName("FK_Permission_Cat_Sub_Menu");

                entity.HasOne(d => d.RoleNavigation)
                    .WithMany(p => p.Permissions)
                    .HasForeignKey(d => d.Role)
                    .HasConstraintName("FK_Permits_Cat_Role");
            });

            modelBuilder.Entity<PersonalInformation>(entity =>
            {
                entity.ToTable("Personal_Information");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .ValueGeneratedNever();

                entity.Property(e => e.Allergies)
                    .HasColumnName("allergies")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.City).HasColumnName("city");

                entity.Property(e => e.Country).HasColumnName("country");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.CurrentAddress)
                    .HasColumnName("current_address")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateBirth)
                    .HasColumnName("date_birth")
                    .HasColumnType("date");

                entity.Property(e => e.GeneralComments)
                    .HasColumnName("general_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Graduation)
                    .HasColumnName("graduation")
                    .HasColumnType("date");

                entity.Property(e => e.HobbiesPassions)
                    .HasColumnName("hobbies_passions")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Major)
                    .HasColumnName("major")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nationality)
                    .HasColumnName("nationality")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PersonalEmail)
                    .HasColumnName("personal_email")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PersonalPhone)
                    .HasColumnName("personal_phone")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RhComments)
                    .HasColumnName("rh_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.School)
                    .HasColumnName("school")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TotalCompesation)
                    .HasColumnName("total_compesation")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.ZipCode).HasColumnName("zip_code");

                entity.HasOne(d => d.CityNavigation)
                    .WithMany(p => p.PersonalInformations)
                    .HasForeignKey(d => d.City)
                    .HasConstraintName("FK_Profile_Cat_State");

                entity.HasOne(d => d.CountryNavigation)
                    .WithMany(p => p.PersonalInformations)
                    .HasForeignKey(d => d.Country)
                    .HasConstraintName("FK_Profile_Cat_Country");

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.PersonalInformation)
                    .HasForeignKey<PersonalInformation>(d => d.Id)
                    .HasConstraintName("FK_Profile_User_Consultant_Contacts_Consultant");
            });

            modelBuilder.Entity<Pet>(entity =>
            {
                entity.ToTable("pet");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Age).HasColumnName("age");

                entity.Property(e => e.AssigneeInformationId).HasColumnName("assignee_information_id");

                entity.Property(e => e.BirthDate)
                    .HasColumnName("birth_date")
                    .HasColumnType("date");

                entity.Property(e => e.BreedId)
                    .HasColumnName("breed_id")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50);

                entity.Property(e => e.PetTypeId).HasColumnName("pet_type_id");

                entity.Property(e => e.Photo)
                    .HasColumnName("photo")
                    .IsUnicode(false);

                entity.Property(e => e.SizeId).HasColumnName("size_id");

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.WeightMeasuresId).HasColumnName("weight_measures_id");

                entity.HasOne(d => d.AssigneeInformation)
                    .WithMany(p => p.PetsNavigation)
                    .HasForeignKey(d => d.AssigneeInformationId)
                    .HasConstraintName("FK_pet_assignee_information");

                entity.HasOne(d => d.PetType)
                    .WithMany(p => p.Pets)
                    .HasForeignKey(d => d.PetTypeId)
                    .HasConstraintName("FK_pet_Cat_PetType");

                entity.HasOne(d => d.Size)
                    .WithMany(p => p.Pets)
                    .HasForeignKey(d => d.SizeId)
                    .HasConstraintName("FK_pet_Cat_Size");

                entity.HasOne(d => d.WeightMeasures)
                    .WithMany(p => p.Pets)
                    .HasForeignKey(d => d.WeightMeasuresId)
                    .HasConstraintName("FK_pet_Cat_WeightMeasures");
            });

            modelBuilder.Entity<PhotoBillPropertyManagement>(entity =>
            {
                entity.ToTable("Photo_Bill_Property_Management");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.NamePhoto)
                    .HasColumnName("name_photo")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Photo)
                    .HasColumnName("photo")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyManagement).HasColumnName("property_management");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.PropertyManagementNavigation)
                    .WithMany(p => p.PhotoBillPropertyManagements)
                    .HasForeignKey(d => d.PropertyManagement)
                    .HasConstraintName("FK_Photo_Bill_Property_Management_Property_Management");
            });

            modelBuilder.Entity<PhotoCityAbout>(entity =>
            {
                entity.ToTable("Photo_City_About");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("create_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasColumnName("file_name")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IdCityAbout).HasColumnName("id_city_about");

                entity.HasOne(d => d.IdCityAboutNavigation)
                    .WithMany(p => p.PhotoCityAbouts)
                    .HasForeignKey(d => d.IdCityAbout)
                    .HasConstraintName("FK_Photo_City_About_City_About");
            });

            modelBuilder.Entity<PhotoCityAttraction>(entity =>
            {
                entity.ToTable("Photo_City_Attractions");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("create_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasColumnName("file_name")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IdAttractionAbout).HasColumnName("id_attraction_about");

                entity.HasOne(d => d.IdAttractionAboutNavigation)
                    .WithMany(p => p.PhotoCityAttractions)
                    .HasForeignKey(d => d.IdAttractionAbout)
                    .HasConstraintName("FK_Photo_City_Attractions_City_Attractions");
            });

            modelBuilder.Entity<PhotoCityEmergency>(entity =>
            {
                entity.ToTable("Photo_City_Emergency");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("create_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasColumnName("file_name")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IdEmergencyAbout).HasColumnName("id_emergency_about");

                entity.HasOne(d => d.IdEmergencyAboutNavigation)
                    .WithMany(p => p.PhotoCityEmergencies)
                    .HasForeignKey(d => d.IdEmergencyAbout)
                    .HasConstraintName("FK_Phone_City_Emergency_City_Emergency");
            });

            modelBuilder.Entity<PhotoInspectionPropertyManagement>(entity =>
            {
                entity.ToTable("Photo_Inspection_Property_Management");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.NamePhoto)
                    .HasColumnName("name_photo")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Photo)
                    .HasColumnName("photo")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyManagement).HasColumnName("property_management");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.PropertyManagementNavigation)
                    .WithMany(p => p.PhotoInspectionPropertyManagements)
                    .HasForeignKey(d => d.PropertyManagement)
                    .HasConstraintName("FK_Photo_Inspection_Property_Management_Property_Management");
            });

            modelBuilder.Entity<PhotoMailPropertyManagement>(entity =>
            {
                entity.ToTable("Photo_Mail_Property_Management");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.NamePhoto)
                    .HasColumnName("name_photo")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Photo)
                    .HasColumnName("photo")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyManagement).HasColumnName("property_management");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.PropertyManagementNavigation)
                    .WithMany(p => p.PhotoMailPropertyManagements)
                    .HasForeignKey(d => d.PropertyManagement)
                    .HasConstraintName("FK_Photo_Mail_Property_Management_Property_Management");
            });

            modelBuilder.Entity<PhotoPropertyManagement>(entity =>
            {
                entity.ToTable("Photo_Property_Management");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.NamePhoto)
                    .HasColumnName("name_photo")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Photo)
                    .HasColumnName("photo")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyManagement).HasColumnName("property_management");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.PropertyManagementNavigation)
                    .WithMany(p => p.PhotoPropertyManagements)
                    .HasForeignKey(d => d.PropertyManagement)
                    .HasConstraintName("FK_Photo_Property_Management_Property_Management");
            });

            modelBuilder.Entity<PhotoReportIssuePropertyManagement>(entity =>
            {
                entity.ToTable("Photo_Report_Issue_Property_Management");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.NamePhoto)
                    .HasColumnName("name_photo")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Photo)
                    .HasColumnName("photo")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyManagement).HasColumnName("property_management");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.PropertyManagementNavigation)
                    .WithMany(p => p.PhotoReportIssuePropertyManagements)
                    .HasForeignKey(d => d.PropertyManagement)
                    .HasConstraintName("FK_Photo_Report_Issue_Property_Management_Property_Management");
            });

            modelBuilder.Entity<PhotoWhatToDo>(entity =>
            {
                entity.ToTable("Photo_What_To_Do");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("create_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasColumnName("file_name")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IdWhatToDoAbout).HasColumnName("id_what_to_do_about");

                entity.HasOne(d => d.IdWhatToDoAboutNavigation)
                    .WithMany(p => p.PhotoWhatToDos)
                    .HasForeignKey(d => d.IdWhatToDoAbout)
                    .HasConstraintName("FK_Photo_What_To_Do_City_What_To_Do");
            });

            modelBuilder.Entity<PhotoWhereEat>(entity =>
            {
                entity.ToTable("Photo_Where_Eat");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("create_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasColumnName("file_name")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IdWhereEat).HasColumnName("id_where_eat");

                entity.HasOne(d => d.IdWhereEatNavigation)
                    .WithMany(p => p.PhotoWhereEats)
                    .HasForeignKey(d => d.IdWhereEat)
                    .HasConstraintName("FK_Photo_Where_Eat_Country_Where_Eat");
            });

            modelBuilder.Entity<PhotosInventory>(entity =>
            {
                entity.ToTable("Photos_Inventory");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Photo)
                    .HasColumnName("photo")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.PhotoName)
                    .HasColumnName("photo_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.SectionInventory).HasColumnName("section_inventory");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.SectionInventoryNavigation)
                    .WithMany(p => p.PhotosInventories)
                    .HasForeignKey(d => d.SectionInventory)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Photos_Inventory_Section_Inventory");
            });

            modelBuilder.Entity<PhotosPropertyReportSection>(entity =>
            {
                entity.ToTable("Photos_Property_Report_Section");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Photo)
                    .HasColumnName("photo")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.PhotoName)
                    .HasColumnName("photo_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyReportSectionId).HasColumnName("property_report_section_id");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.PropertyReportSection)
                    .WithMany(p => p.PhotosPropertyReportSections)
                    .HasForeignKey(d => d.PropertyReportSectionId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Photos_Property_Report_Section_Property_Report_Section");
            });

            modelBuilder.Entity<PhotosVehicleConsultant>(entity =>
            {
                entity.ToTable("Photos_Vehicle_Consultant");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Exterior).HasColumnName("exterior");

                entity.Property(e => e.Interior).HasColumnName("interior");

                entity.Property(e => e.Photo)
                    .HasColumnName("photo")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Safety).HasColumnName("safety");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.VehicleConsultant).HasColumnName("vehicle_consultant");

                entity.HasOne(d => d.VehicleConsultantNavigation)
                    .WithMany(p => p.PhotosVehicleConsultants)
                    .HasForeignKey(d => d.VehicleConsultant)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Photos_Vehicle_Consultant_Vehicle_Consultant");
            });

            modelBuilder.Entity<PhotosVehicleService>(entity =>
            {
                entity.ToTable("Photos_Vehicle_Service");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Exterior).HasColumnName("exterior");

                entity.Property(e => e.Interior).HasColumnName("interior");

                entity.Property(e => e.Photo)
                    .HasColumnName("photo")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Safety).HasColumnName("safety");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.VehicleService).HasColumnName("vehicle_service");

                entity.HasOne(d => d.VehicleServiceNavigation)
                    .WithMany(p => p.PhotosVehicleServices)
                    .HasForeignKey(d => d.VehicleService)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Photos_Vehicle_Service_Vehicle_Service");
            });

            modelBuilder.Entity<PostIt>(entity =>
            {
                entity.ToTable("Post_It");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Color)
                    .HasColumnName("color")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Post)
                    .HasColumnName("post")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.PostIts)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_Post_It_Users");
            });

            modelBuilder.Entity<PredecisionOrientation>(entity =>
            {
                entity.ToTable("Predecision_Orientation");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoAcceptanceDateExtension)
                    .HasColumnName("autho_acceptance_date_extension")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDateExtension)
                    .HasColumnName("autho_date_extension")
                    .HasColumnType("date");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Coordination).HasColumnName("coordination");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ExtracurricularActivities).HasColumnName("extracurricular_activities");

                entity.Property(e => e.Housing).HasColumnName("housing");

                entity.Property(e => e.Parks).HasColumnName("parks");

                entity.Property(e => e.Schooling).HasColumnName("schooling");

                entity.Property(e => e.ServiceCompletionDate)
                    .HasColumnName("service_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.ShoppingSocialAreas).HasColumnName("shopping_social_areas");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.Supermarks).HasColumnName("supermarks");

                entity.Property(e => e.Time)
                    .HasColumnName("time")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.WorkOrderServicesId).HasColumnName("work_order_services_id");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.PredecisionOrientations)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Predecision_Orientation_Cat_StatusWorkOrder");

                entity.HasOne(d => d.WorkOrderServices)
                    .WithMany(p => p.PredecisionOrientations)
                    .HasForeignKey(d => d.WorkOrderServicesId)
                    .HasConstraintName("FK_Predicision_Orientation_Service_Order_Services");
            });

            modelBuilder.Entity<PreviousHostCountry>(entity =>
            {
                entity.ToTable("previous_host_country");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Expiration)
                    .HasColumnName("expiration")
                    .HasColumnType("date");

                entity.Property(e => e.IdAssignedNumber)
                    .HasColumnName("id_assigned_number")
                    .HasMaxLength(50);

                entity.Property(e => e.Issue)
                    .HasColumnName("issue")
                    .HasColumnType("date");

                entity.Property(e => e.IssuingAuthority)
                    .HasColumnName("issuing_authority")
                    .HasMaxLength(50);

                entity.Property(e => e.PlaceIssue)
                    .HasColumnName("place_issue")
                    .HasMaxLength(50);

                entity.Property(e => e.PositionEmployer)
                    .HasColumnName("position_employer")
                    .HasMaxLength(50);

                entity.Property(e => e.PositionResponsabilities)
                    .HasColumnName("position_responsabilities")
                    .HasMaxLength(50);

                entity.Property(e => e.PriorHostCountryVisaIssued).HasColumnName("prior_host_country_visa_issued");

                entity.Property(e => e.VisaCategoryId).HasColumnName("visa_category_id");

                entity.Property(e => e.VisaNumber)
                    .HasColumnName("visa_number")
                    .HasMaxLength(50);

                entity.HasOne(d => d.VisaCategory)
                    .WithMany(p => p.PreviousHostCountries)
                    .HasForeignKey(d => d.VisaCategoryId)
                    .HasConstraintName("FK_previous_host_country_Cat_VisaCategory");
            });

            modelBuilder.Entity<PricingSchedule>(entity =>
            {
                entity.ToTable("Pricing_Schedule");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PricingSchedule1)
                    .IsRequired()
                    .HasColumnName("pricing_schedule")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PricingType>(entity =>
            {
                entity.ToTable("Pricing_Type");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PricingType1)
                    .IsRequired()
                    .HasColumnName("pricing_type")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ProfileUser>(entity =>
            {
                entity.ToTable("Profile_User");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AreasCoverage).HasColumnName("areas_coverage");

                entity.Property(e => e.City).HasColumnName("city");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Country).HasColumnName("country");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Immigration).HasColumnName("immigration");

                entity.Property(e => e.LastName)
                    .HasColumnName("last_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.MotherLastName)
                    .HasColumnName("mother_last_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneNumber)
                    .HasColumnName("phone_number")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Photo)
                    .HasColumnName("photo")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ProfessionalBiography)
                    .HasColumnName("professional_biography")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Relocation).HasColumnName("relocation");

                entity.Property(e => e.ResponsablePremierOffice).HasColumnName("responsable_premier_office");

                entity.Property(e => e.SupplierType).HasColumnName("supplier_type");

                entity.Property(e => e.Title).HasColumnName("title");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.AreasCoverageNavigation)
                    .WithMany(p => p.ProfileUsers)
                    .HasForeignKey(d => d.AreasCoverage)
                    .HasConstraintName("FK_Consultant_Contacts_Consultant_Areas_Coverage_Consultant");

                entity.HasOne(d => d.CityNavigation)
                    .WithMany(p => p.ProfileUsers)
                    .HasForeignKey(d => d.City)
                    .HasConstraintName("FK_Consultant_Contacts_Consultant_Cat_State");

                entity.HasOne(d => d.CountryNavigation)
                    .WithMany(p => p.ProfileUsers)
                    .HasForeignKey(d => d.Country)
                    .HasConstraintName("FK_Profile_User_Cat_Country");

                entity.HasOne(d => d.ResponsablePremierOfficeNavigation)
                    .WithMany(p => p.ProfileUsers)
                    .HasForeignKey(d => d.ResponsablePremierOffice)
                    .HasConstraintName("FK_Profile_User_Cat_Office");

                entity.HasOne(d => d.SupplierTypeNavigation)
                    .WithMany(p => p.ProfileUsers)
                    .HasForeignKey(d => d.SupplierType)
                    .HasConstraintName("FK_Consultant_Contacts_Consultant_Cat_SupplierType");

                entity.HasOne(d => d.TitleNavigation)
                    .WithMany(p => p.ProfileUsers)
                    .HasForeignKey(d => d.Title)
                    .HasConstraintName("FK_Consultant_Contacts_Consultant_Cat_Title");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ProfileUsers)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Consultant_Contacts_Consultant_Users");
            });

            modelBuilder.Entity<PropertyExpense>(entity =>
            {
                entity.ToTable("Property_Expense");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Amount)
                    .HasColumnName("amount")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ContractDetail).HasColumnName("contract_detail");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Currency).HasColumnName("currency");

                entity.Property(e => e.Expense)
                    .HasColumnName("expense")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Included).HasColumnName("included");

                entity.Property(e => e.Recurrence).HasColumnName("recurrence");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.ContractDetailNavigation)
                    .WithMany(p => p.PropertyExpenses)
                    .HasForeignKey(d => d.ContractDetail)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Property_Expense_Contract_Details");

                entity.HasOne(d => d.CurrencyNavigation)
                    .WithMany(p => p.PropertyExpenses)
                    .HasForeignKey(d => d.Currency)
                    .HasConstraintName("FK_Property_Expense_Cat_currency");

                entity.HasOne(d => d.RecurrenceNavigation)
                    .WithMany(p => p.PropertyExpenses)
                    .HasForeignKey(d => d.Recurrence)
                    .HasConstraintName("FK_Property_Expense_Cat_Duration");
            });

            modelBuilder.Entity<PropertyManagement>(entity =>
            {
                entity.ToTable("Property_Management");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.BillType).HasColumnName("bill_type");

                entity.Property(e => e.CommentBill)
                    .HasColumnName("comment_bill")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CommentMail)
                    .HasColumnName("comment_mail")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(550)
                    .IsUnicode(false);

                entity.Property(e => e.CommentsQuestion)
                    .HasColumnName("comments_question")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Coordination).HasColumnName("coordination");

                entity.Property(e => e.CountVisit).HasColumnName("count_visit");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DescriptionReportIssue)
                    .HasColumnName("description_report_issue")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ItemOngoingMaintanance).HasColumnName("item_ongoing_maintanance");

                entity.Property(e => e.LastPropertyInspection)
                    .HasColumnName("last_property_inspection")
                    .HasColumnType("datetime");

                entity.Property(e => e.LeaseNegotiation)
                    .HasColumnName("lease_negotiation")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Library).HasColumnName("library");

                entity.Property(e => e.LibraryPaymentCoordination).HasColumnName("library_payment_coordination");

                entity.Property(e => e.Links)
                    .HasColumnName("links")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Marketing)
                    .HasColumnName("marketing")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NextPropertyInspection)
                    .HasColumnName("next_property_inspection")
                    .HasColumnType("datetime");

                entity.Property(e => e.OfferApprovedTenantSelected).HasColumnName("offer_approved_tenant_selected");

                entity.Property(e => e.OfferReceived)
                    .HasColumnName("offer_received")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PropertAddress)
                    .HasColumnName("propert_address")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ProviderPayment).HasColumnName("provider_payment");

                entity.Property(e => e.ProviderPaymentBill).HasColumnName("provider_payment_bill");

                entity.Property(e => e.ProviderVisit).HasColumnName("provider_visit");

                entity.Property(e => e.QuoteApproval)
                    .HasColumnName("quote_approval")
                    .HasColumnType("datetime");

                entity.Property(e => e.Rented).HasColumnName("rented");

                entity.Property(e => e.Report)
                    .HasColumnName("report")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SendDraft)
                    .HasColumnName("send_draft")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceCompletionDate)
                    .HasColumnName("service_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.Severity).HasColumnName("severity");

                entity.Property(e => e.SignatureCoordination)
                    .HasColumnName("signature_coordination")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.StatusReportIssue).HasColumnName("status_report_issue");

                entity.Property(e => e.Submit)
                    .HasColumnName("submit")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TenancySupport)
                    .HasColumnName("tenancy_support")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.UpcommingVisit)
                    .HasColumnName("upcomming_visit")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.Vacant).HasColumnName("vacant");

                entity.Property(e => e.WorkOrderServices).HasColumnName("work_order_services");

                entity.HasOne(d => d.BillTypeNavigation)
                    .WithMany(p => p.PropertyManagements)
                    .HasForeignKey(d => d.BillType)
                    .HasConstraintName("FK_Property_Management_Cat_Bill_Type");

                entity.HasOne(d => d.LibraryNavigation)
                    .WithMany(p => p.PropertyManagements)
                    .HasForeignKey(d => d.Library)
                    .HasConstraintName("FK_Property_Management_Cat_Library");

                entity.HasOne(d => d.SeverityNavigation)
                    .WithMany(p => p.PropertyManagements)
                    .HasForeignKey(d => d.Severity)
                    .HasConstraintName("FK_Property_Management_Cat_Severity");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.PropertyManagements)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_Property_Management_Cat_Status");

                entity.HasOne(d => d.StatusReportIssueNavigation)
                    .WithMany(p => p.PropertyManagements)
                    .HasForeignKey(d => d.StatusReportIssue)
                    .HasConstraintName("FK_Property_Management_Cat_Status_Report_Issue");

                entity.HasOne(d => d.WorkOrderServicesNavigation)
                    .WithMany(p => p.PropertyManagements)
                    .HasForeignKey(d => d.WorkOrderServices)
                    .HasConstraintName("FK_Property_Management_Work_Order_Services");
            });

            modelBuilder.Entity<PropertyReport>(entity =>
            {
                entity.ToTable("Property_Report");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.HousingList).HasColumnName("housing_list");

                entity.Property(e => e.Notes)
                    .HasColumnName("notes")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyAddress)
                    .HasColumnName("property_address")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyInspection).HasColumnName("property_inspection");

                entity.Property(e => e.ReportDate)
                    .HasColumnName("report_date")
                    .HasColumnType("date");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.ZipCode).HasColumnName("zip_code");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.PropertyReports)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_Property_Report_Users");

                entity.HasOne(d => d.HousingListNavigation)
                    .WithMany(p => p.PropertyReports)
                    .HasForeignKey(d => d.HousingList)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Property_Report_Housing_List");

                entity.HasOne(d => d.PropertyInspectionNavigation)
                    .WithMany(p => p.PropertyReports)
                    .HasForeignKey(d => d.PropertyInspection)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Property_Report_Cat_PropertyInspection");
            });

            modelBuilder.Entity<PropertyReportSection>(entity =>
            {
                entity.ToTable("Property_Report_Section");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.NeedRepair).HasColumnName("need_repair");

                entity.Property(e => e.PropertyReport).HasColumnName("property_report");

                entity.Property(e => e.PropertySection).HasColumnName("property_section");

                entity.Property(e => e.ReportDate)
                    .HasColumnName("report_date")
                    .HasColumnType("date");

                entity.Property(e => e.ReportDetails)
                    .HasColumnName("report_details")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.PropertyReportNavigation)
                    .WithMany(p => p.PropertyReportSections)
                    .HasForeignKey(d => d.PropertyReport)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Property_Report_Section_Property_Report");

                entity.HasOne(d => d.PropertySectionNavigation)
                    .WithMany(p => p.PropertyReportSections)
                    .HasForeignKey(d => d.PropertySection)
                    .HasConstraintName("FK_Property_Report_Section_Cat_PropertySection");

                entity.HasOne(d => d.StatusNavigation)
                    .WithMany(p => p.PropertyReportSections)
                    .HasForeignKey(d => d.Status)
                    .HasConstraintName("FK_Property_Report_Section_Cat_StatusPropertySection");
            });

            modelBuilder.Entity<RecurrencePaymentConcept>(entity =>
            {
                entity.ToTable("Recurrence_Payment_Concept");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnName("date");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("date");

                entity.Property(e => e.Never).HasColumnName("never");

                entity.Property(e => e.PaymentConcept).HasColumnName("payment_concept");

                entity.Property(e => e.Period).HasColumnName("period");

                entity.Property(e => e.RepeatEvery).HasColumnName("repeat_every");

                entity.Property(e => e.RepeatThe)
                    .HasColumnName("repeat_the")
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("date");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.PaymentConceptNavigation)
                    .WithMany(p => p.RecurrencePaymentConcepts)
                    .HasForeignKey(d => d.PaymentConcept)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Recurrence_Payment_Concept_Payment_Concept");

                entity.HasOne(d => d.PeriodNavigation)
                    .WithMany(p => p.RecurrencePaymentConcepts)
                    .HasForeignKey(d => d.Period)
                    .HasConstraintName("FK_Recurrence_Payment_Concept_Cat_Duration");
            });

            modelBuilder.Entity<RecurrenceRequestPayment>(entity =>
            {
                entity.ToTable("Recurrence_Request_Payment");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnName("date");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasColumnType("date");

                entity.Property(e => e.Never).HasColumnName("never");

                entity.Property(e => e.Period).HasColumnName("period");

                entity.Property(e => e.RepeatEvery).HasColumnName("repeat_every");

                entity.Property(e => e.RequestPayment).HasColumnName("request_payment");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasColumnType("date");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.PeriodNavigation)
                    .WithMany(p => p.RecurrenceRequestPayments)
                    .HasForeignKey(d => d.Period)
                    .HasConstraintName("FK_Recurrence_Request_Payment_Cat_Duration");

                entity.HasOne(d => d.RequestPaymentNavigation)
                    .WithMany(p => p.RecurrenceRequestPayments)
                    .HasForeignKey(d => d.RequestPayment)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Recurrence_Request_Payment_Request_Payment");
            });

            modelBuilder.Entity<ReferralFee>(entity =>
            {
                entity.ToTable("Referral_Fee");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ReferralFee1)
                    .IsRequired()
                    .HasColumnName("referral_fee")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RelHousingAmenitie>(entity =>
            {
                entity.HasKey(e => new { e.HousingSpecificationId, e.AmenitieId });

                entity.ToTable("Rel_housing_amenitie");

                entity.Property(e => e.HousingSpecificationId).HasColumnName("housing_specification_id");

                entity.Property(e => e.AmenitieId).HasColumnName("amenitie_id");

                entity.HasOne(d => d.Amenitie)
                    .WithMany(p => p.RelHousingAmenities)
                    .HasForeignKey(d => d.AmenitieId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Rel_housing_amenitie_Cat_amenitie1");

                entity.HasOne(d => d.HousingSpecification)
                    .WithMany(p => p.RelHousingAmenities)
                    .HasForeignKey(d => d.HousingSpecificationId)
                    .HasConstraintName("FK_Rel_housing_amenitie_Housing_Specification");
            });

            modelBuilder.Entity<RelHousingAreaOrientation>(entity =>
            {
                entity.HasKey(e => new { e.HousingSpecificationId, e.AmenitieId });

                entity.ToTable("Rel_Housing_Area_Orientation");

                entity.Property(e => e.HousingSpecificationId).HasColumnName("housing_specification_id");

                entity.Property(e => e.AmenitieId).HasColumnName("amenitie_id");

                entity.HasOne(d => d.Amenitie)
                    .WithMany(p => p.RelHousingAreaOrientations)
                    .HasForeignKey(d => d.AmenitieId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Rel_Housing_Area_Orientation_Cat_amenitie");
            });

            modelBuilder.Entity<RelocationCoordinator>(entity =>
            {
                entity.ToTable("relocation_coordinator");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Accepted)
                    .HasColumnName("accepted")
                    .HasColumnType("date");

                entity.Property(e => e.Assigned)
                    .HasColumnName("assigned")
                    .HasColumnType("date");

                entity.Property(e => e.CoordinatorId).HasColumnName("coordinator_id");

                entity.Property(e => e.CoordinatorTypeId).HasColumnName("coordinator_type_id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ServiceRecordId).HasColumnName("service_record_id");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Coordinator)
                    .WithMany(p => p.RelocationCoordinators)
                    .HasForeignKey(d => d.CoordinatorId)
                    .HasConstraintName("FK_relocation_coordinator_Profile_User");

                entity.HasOne(d => d.CoordinatorType)
                    .WithMany(p => p.RelocationCoordinators)
                    .HasForeignKey(d => d.CoordinatorTypeId)
                    .HasConstraintName("FK_relocation_coordinator_Cat_CoordinatorType");

                entity.HasOne(d => d.ServiceRecord)
                    .WithMany(p => p.RelocationCoordinators)
                    .HasForeignKey(d => d.ServiceRecordId)
                    .HasConstraintName("FK_relocation_coordinator_Service_Record");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.RelocationCoordinators)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_relocation_coordinator_Cat_StatusSupplierCoordinator");
            });

            modelBuilder.Entity<RelocationSupplierPartner>(entity =>
            {
                entity.ToTable("relocation_supplier_partner");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AcceptedDate)
                    .HasColumnName("accepted_date")
                    .HasColumnType("date");

                entity.Property(e => e.AssignedDate)
                    .HasColumnName("assigned_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ServiceRecordId).HasColumnName("service_record_id");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.SupplierCompanyId).HasColumnName("supplier_company_id");

                entity.Property(e => e.SupplierId).HasColumnName("supplier_id");

                entity.Property(e => e.SupplierTypeId).HasColumnName("supplier_type_id");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.ServiceRecord)
                    .WithMany(p => p.RelocationSupplierPartners)
                    .HasForeignKey(d => d.ServiceRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_relocation_supplier_partner_Service_Record");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.RelocationSupplierPartners)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_relocation_supplier_partner_Cat_StatusSupplierCoordinator");

                entity.HasOne(d => d.SupplierCompany)
                    .WithMany(p => p.RelocationSupplierPartners)
                    .HasForeignKey(d => d.SupplierCompanyId)
                    .HasConstraintName("FK_relocation_supplier_partner_Cat_SupplierCompany");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.RelocationSupplierPartners)
                    .HasForeignKey(d => d.SupplierId)
                    .HasConstraintName("FK_relocation_supplier_partner_Cat_Supplier");

                entity.HasOne(d => d.SupplierType)
                    .WithMany(p => p.RelocationSupplierPartners)
                    .HasForeignKey(d => d.SupplierTypeId)
                    .HasConstraintName("FK_relocation_supplier_partner_Cat_Country");
            });

            modelBuilder.Entity<RemiderCorporateAssistance>(entity =>
            {
                entity.ToTable("Remider_Corporate_Assistance");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CorporateAssistanceId).HasColumnName("corporate_assistance_id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.ReminderComments)
                    .IsRequired()
                    .HasColumnName("reminder_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReminderDate)
                    .HasColumnName("reminder_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.CorporateAssistance)
                    .WithMany(p => p.RemiderCorporateAssistances)
                    .HasForeignKey(d => d.CorporateAssistanceId)
                    .HasConstraintName("FK_Remider_Corporate_Assistance_Corporate_Assistance");
            });

            modelBuilder.Entity<ReminderAirportTransportationService>(entity =>
            {
                entity.ToTable("Reminder_Airport_Transportation_Services");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AirportTransportationServicesId).HasColumnName("airport_transportation_services_id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.ReminderComments)
                    .IsRequired()
                    .HasColumnName("reminder_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReminderDate)
                    .HasColumnName("reminder_date")
                    .HasColumnType("date");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.AirportTransportationServices)
                    .WithMany(p => p.ReminderAirportTransportationServices)
                    .HasForeignKey(d => d.AirportTransportationServicesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Reminder_Airport_Transportation_Services_Airport_Transportation_Services");
            });

            modelBuilder.Entity<ReminderAreaOrientation>(entity =>
            {
                entity.ToTable("Reminder_Area_Orientation");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AreaOrientationId).HasColumnName("area_orientation_id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ReminderComments)
                    .IsRequired()
                    .HasColumnName("reminder_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReminderDate)
                    .HasColumnName("reminder_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.AreaOrientation)
                    .WithMany(p => p.ReminderAreaOrientations)
                    .HasForeignKey(d => d.AreaOrientationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Reminder_Area_Orientation_Area_Orientation");
            });

            modelBuilder.Entity<ReminderDeparture>(entity =>
            {
                entity.ToTable("Reminder_Departure");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DepartaureId).HasColumnName("departaure_id");

                entity.Property(e => e.ReminderComments)
                    .IsRequired()
                    .HasColumnName("reminder_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReminderDate)
                    .HasColumnName("reminder_date")
                    .HasColumnType("date");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Departaure)
                    .WithMany(p => p.ReminderDepartures)
                    .HasForeignKey(d => d.DepartaureId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Reminder_Departure_Departure");
            });

            modelBuilder.Entity<ReminderDocumentManagement>(entity =>
            {
                entity.ToTable("Reminder_Document_Management");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DocumentManagementId).HasColumnName("document_management_id");

                entity.Property(e => e.ReminderComments)
                    .IsRequired()
                    .HasColumnName("reminder_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReminderDate)
                    .HasColumnName("reminder_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.DocumentManagement)
                    .WithMany(p => p.ReminderDocumentManagements)
                    .HasForeignKey(d => d.DocumentManagementId)
                    .HasConstraintName("FK_Reminder_Document_Management_Document_Management");
            });

            modelBuilder.Entity<ReminderEntryVisa>(entity =>
            {
                entity.ToTable("Reminder_Entry_Visa");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.EntryVisaId).HasColumnName("entry_visa_id");

                entity.Property(e => e.ReminderComments)
                    .IsRequired()
                    .HasColumnName("reminder_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReminderDate)
                    .HasColumnName("reminder_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.EntryVisa)
                    .WithMany(p => p.ReminderEntryVisas)
                    .HasForeignKey(d => d.EntryVisaId)
                    .HasConstraintName("FK_Reminder_Entry_Visa_Entry_Visa");
            });

            modelBuilder.Entity<ReminderHomeFinding>(entity =>
            {
                entity.ToTable("Reminder_Home_Finding");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.HomeFindingId).HasColumnName("home_finding_id");

                entity.Property(e => e.ReminderComments)
                    .IsRequired()
                    .HasColumnName("reminder_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReminderDate)
                    .HasColumnName("reminder_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.HomeFinding)
                    .WithMany(p => p.ReminderHomeFindings)
                    .HasForeignKey(d => d.HomeFindingId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Reminder_Home_Finding_Home_Finding");
            });

            modelBuilder.Entity<ReminderHomePurchase>(entity =>
            {
                entity.ToTable("Reminder_Home_Purchase");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.HomePurchase).HasColumnName("home_purchase");

                entity.Property(e => e.ReminderComments)
                    .IsRequired()
                    .HasColumnName("reminder_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReminderDate)
                    .HasColumnName("reminder_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.HomePurchaseNavigation)
                    .WithMany(p => p.ReminderHomePurchases)
                    .HasForeignKey(d => d.HomePurchase)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Reminder_Home_Purchase_Home_Purchase");
            });

            modelBuilder.Entity<ReminderHomeSale>(entity =>
            {
                entity.ToTable("Reminder_Home_Sale");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.HomeSale).HasColumnName("home_sale");

                entity.Property(e => e.ReminderComments)
                    .IsRequired()
                    .HasColumnName("reminder_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReminderDate)
                    .HasColumnName("reminder_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.HomeSaleNavigation)
                    .WithMany(p => p.ReminderHomeSales)
                    .HasForeignKey(d => d.HomeSale)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Reminder_Home_Sale_Home_Sale");
            });

            modelBuilder.Entity<ReminderLeaseRenewal>(entity =>
            {
                entity.ToTable("Reminder_Lease_Renewal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.LeaseRenewal).HasColumnName("lease_renewal");

                entity.Property(e => e.ReminderComments)
                    .IsRequired()
                    .HasColumnName("reminder_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReminderDate)
                    .HasColumnName("reminder_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.LeaseRenewalNavigation)
                    .WithMany(p => p.ReminderLeaseRenewals)
                    .HasForeignKey(d => d.LeaseRenewal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Reminder_Lease_Renewal_Lease_Renewal");
            });

            modelBuilder.Entity<ReminderLegalReview>(entity =>
            {
                entity.ToTable("Reminder_Legal_Review");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.LegalReviewId).HasColumnName("legal_review_id");

                entity.Property(e => e.ReminderComments)
                    .IsRequired()
                    .HasColumnName("reminder_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReminderDate)
                    .HasColumnName("reminder_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.LegalReview)
                    .WithMany(p => p.ReminderLegalReviews)
                    .HasForeignKey(d => d.LegalReviewId)
                    .HasConstraintName("FK_Reminder_Legal_Review_Legal_Review");
            });

            modelBuilder.Entity<ReminderLocalDocumentation>(entity =>
            {
                entity.ToTable("Reminder_Local_Documentation");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.LocalDocumentationId).HasColumnName("local_documentation_id");

                entity.Property(e => e.ReminderComments)
                    .IsRequired()
                    .HasColumnName("reminder_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReminderDate)
                    .HasColumnName("reminder_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.LocalDocumentation)
                    .WithMany(p => p.ReminderLocalDocumentations)
                    .HasForeignKey(d => d.LocalDocumentationId)
                    .HasConstraintName("FK_Reminder_Local_Documentation_Local_Documentation");
            });

            modelBuilder.Entity<ReminderNotification>(entity =>
            {
                entity.ToTable("Reminder_Notification");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.NotificationId).HasColumnName("notification_id");

                entity.Property(e => e.ReminderComments)
                    .IsRequired()
                    .HasColumnName("reminder_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReminderDate)
                    .HasColumnName("reminder_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.Notification)
                    .WithMany(p => p.ReminderNotifications)
                    .HasForeignKey(d => d.NotificationId)
                    .HasConstraintName("FK_Reminder_Notification_Notification");
            });

            modelBuilder.Entity<ReminderOther>(entity =>
            {
                entity.ToTable("Reminder_Other");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Other).HasColumnName("other");

                entity.Property(e => e.ReminderComments)
                    .IsRequired()
                    .HasColumnName("reminder_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReminderDate)
                    .HasColumnName("reminder_date")
                    .HasColumnType("date");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.OtherNavigation)
                    .WithMany(p => p.ReminderOthers)
                    .HasForeignKey(d => d.Other)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Reminder_Other_Other");
            });

            modelBuilder.Entity<ReminderPredecisionOrientation>(entity =>
            {
                entity.ToTable("Reminder_Predecision_Orientation");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.PredecisionOrientationId).HasColumnName("predecision_orientation_id");

                entity.Property(e => e.ReminderComments)
                    .IsRequired()
                    .HasColumnName("reminder_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReminderDate)
                    .HasColumnName("reminder_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.PredecisionOrientation)
                    .WithMany(p => p.ReminderPredecisionOrientations)
                    .HasForeignKey(d => d.PredecisionOrientationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Reminder_Predicision_Orientation_Predicision_Orientation");
            });

            modelBuilder.Entity<ReminderPropertyManagement>(entity =>
            {
                entity.ToTable("Reminder_Property_Management");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.PropertyManagement).HasColumnName("property_management");

                entity.Property(e => e.ReminderComments)
                    .IsRequired()
                    .HasColumnName("reminder_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReminderDate)
                    .HasColumnName("reminder_date")
                    .HasColumnType("date");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.PropertyManagementNavigation)
                    .WithMany(p => p.ReminderPropertyManagements)
                    .HasForeignKey(d => d.PropertyManagement)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Reminder_Property_Management_Property_Management");
            });

            modelBuilder.Entity<ReminderRenewal>(entity =>
            {
                entity.ToTable("Reminder_Renewal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.ReminderComments)
                    .IsRequired()
                    .HasColumnName("reminder_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReminderDate)
                    .HasColumnName("reminder_date")
                    .HasColumnType("date");

                entity.Property(e => e.RenewalId).HasColumnName("renewal_id");

                entity.HasOne(d => d.Renewal)
                    .WithMany(p => p.ReminderRenewals)
                    .HasForeignKey(d => d.RenewalId)
                    .HasConstraintName("FK_Reminder_Renewal_Renewal");
            });

            modelBuilder.Entity<ReminderRentalFurnitureCoordination>(entity =>
            {
                entity.ToTable("Reminder_Rental_Furniture_Coordination");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.ReminderComments)
                    .IsRequired()
                    .HasColumnName("reminder_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReminderDate)
                    .HasColumnName("reminder_date")
                    .HasColumnType("date");

                entity.Property(e => e.RentalFurnitureCoordinationId).HasColumnName("rental_furniture_coordination_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.RentalFurnitureCoordination)
                    .WithMany(p => p.ReminderRentalFurnitureCoordinations)
                    .HasForeignKey(d => d.RentalFurnitureCoordinationId)
                    .HasConstraintName("FK_Reminder_Rental_Furniture_Coordination_Rental_Furniture_Coordination");
            });

            modelBuilder.Entity<ReminderResidencyPermit>(entity =>
            {
                entity.ToTable("Reminder_Residency_Permit");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.ReminderComments)
                    .IsRequired()
                    .HasColumnName("reminder_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReminderDate)
                    .HasColumnName("reminder_date")
                    .HasColumnType("date");

                entity.Property(e => e.ResidencyPermitId).HasColumnName("residency_permit_id");

                entity.HasOne(d => d.ResidencyPermit)
                    .WithMany(p => p.ReminderResidencyPermits)
                    .HasForeignKey(d => d.ResidencyPermitId)
                    .HasConstraintName("FK_Reminder_Residency_Permit_Residency_Permit");
            });

            modelBuilder.Entity<ReminderSchoolingSearch>(entity =>
            {
                entity.ToTable("Reminder_Schooling_Search");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ReminderComments)
                    .IsRequired()
                    .HasColumnName("reminder_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReminderDate)
                    .HasColumnName("reminder_date")
                    .HasColumnType("date");

                entity.Property(e => e.SchoolingSearchId).HasColumnName("schooling_search_id");

                entity.HasOne(d => d.SchoolingSearch)
                    .WithMany(p => p.ReminderSchoolingSearches)
                    .HasForeignKey(d => d.SchoolingSearchId)
                    .HasConstraintName("FK_Reminder_Schooling_Search_Schooling_Search");
            });

            modelBuilder.Entity<ReminderSettlingIn>(entity =>
            {
                entity.ToTable("Reminder_Settling_In");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ReminderComments)
                    .IsRequired()
                    .HasColumnName("reminder_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReminderDate)
                    .HasColumnName("reminder_date")
                    .HasColumnType("date");

                entity.Property(e => e.SettlingInId).HasColumnName("settling_in_id");

                entity.HasOne(d => d.SettlingIn)
                    .WithMany(p => p.ReminderSettlingIns)
                    .HasForeignKey(d => d.SettlingInId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Reminder_Settling_In_Settling_In");
            });

            modelBuilder.Entity<ReminderTemporaryHousingCoordinaton>(entity =>
            {
                entity.ToTable("Reminder_Temporary_Housing_Coordinaton");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.ReminderComments)
                    .IsRequired()
                    .HasColumnName("reminder_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReminderDate)
                    .HasColumnName("reminder_date")
                    .HasColumnType("date");

                entity.Property(e => e.TemporaryHousingCoordinationId).HasColumnName("temporary_housing_coordination_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.TemporaryHousingCoordination)
                    .WithMany(p => p.ReminderTemporaryHousingCoordinatons)
                    .HasForeignKey(d => d.TemporaryHousingCoordinationId)
                    .HasConstraintName("FK_Reminder_Temporary_Housing_Coordinaton_Temporary_Housing_Coordinaton");
            });

            modelBuilder.Entity<ReminderTenancyManagement>(entity =>
            {
                entity.ToTable("Reminder_Tenancy_Management");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Remi)
                    .HasColumnName("remi")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ReminderComments)
                    .IsRequired()
                    .HasColumnName("reminder_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReminderDate)
                    .HasColumnName("reminder_date")
                    .HasColumnType("date");

                entity.Property(e => e.TenancyManagementId).HasColumnName("tenancy_management_id");

                entity.HasOne(d => d.TenancyManagement)
                    .WithMany(p => p.ReminderTenancyManagements)
                    .HasForeignKey(d => d.TenancyManagementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Reminder_Tenancy_Management_Tenancy_Management");
            });

            modelBuilder.Entity<ReminderTransportation>(entity =>
            {
                entity.ToTable("Reminder_Transportation");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.ReminderComments)
                    .IsRequired()
                    .HasColumnName("reminder_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReminderDate)
                    .HasColumnName("reminder_date")
                    .HasColumnType("date");

                entity.Property(e => e.TransportationId).HasColumnName("transportation_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.Transportation)
                    .WithMany(p => p.ReminderTransportations)
                    .HasForeignKey(d => d.TransportationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Reminder_Transportation_Transportation");
            });

            modelBuilder.Entity<ReminderVisaDeregistration>(entity =>
            {
                entity.ToTable("Reminder_Visa_Deregistration");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.ReminderComments)
                    .IsRequired()
                    .HasColumnName("reminder_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReminderDate)
                    .HasColumnName("reminder_date")
                    .HasColumnType("date");

                entity.Property(e => e.VisaDeregistrationId).HasColumnName("visa_deregistration_id");

                entity.HasOne(d => d.VisaDeregistration)
                    .WithMany(p => p.ReminderVisaDeregistrations)
                    .HasForeignKey(d => d.VisaDeregistrationId)
                    .HasConstraintName("FK_Reminder_Visa_Deregistration_Visa_Deregistration");
            });

            modelBuilder.Entity<ReminderWorkPermit>(entity =>
            {
                entity.ToTable("Reminder_Work_Permit");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.ReminderComments)
                    .HasColumnName("reminder_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReminderDate)
                    .HasColumnName("reminder_date")
                    .HasColumnType("date");

                entity.Property(e => e.WorkPermitId).HasColumnName("work_permit_id");

                entity.HasOne(d => d.WorkPermit)
                    .WithMany(p => p.ReminderWorkPermits)
                    .HasForeignKey(d => d.WorkPermitId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Reminder_Work_Permit_Work_Permit");
            });

            modelBuilder.Entity<Renewal>(entity =>
            {
                entity.ToTable("Renewal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApplicantId).HasColumnName("applicant_id");

                entity.Property(e => e.ApplicationApprovalDate)
                    .HasColumnName("application_approval_date")
                    .HasColumnType("date");

                entity.Property(e => e.ApplicationSubmissionDate)
                    .HasColumnName("application_submission_date")
                    .HasColumnType("date");

                entity.Property(e => e.AppointmentDate)
                    .HasColumnName("appointment_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentCollectionCompletionDate)
                    .HasColumnName("document_collection_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentCollectionStartDate)
                    .HasColumnName("document_collection_start_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentDeliveryDate)
                    .HasColumnName("document_delivery_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentExpirationDate)
                    .HasColumnName("document_expiration_Date")
                    .HasColumnType("date");

                entity.Property(e => e.HostCityId).HasColumnName("host_city_id");

                entity.Property(e => e.HostCountryId).HasColumnName("host_country_id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceCompletionDate)
                    .HasColumnName("service_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.ServiceTypeId).HasColumnName("service_type_id");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.WorkOrderServicesId).HasColumnName("work_order_services_id");

                entity.HasOne(d => d.HostCity)
                    .WithMany(p => p.Renewals)
                    .HasForeignKey(d => d.HostCityId)
                    .HasConstraintName("FK_Renewal_Cat_State");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.Renewals)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .HasConstraintName("FK_Renewal_Cat_Type_Service");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Renewals)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_Renewal_Cat_Status");

                entity.HasOne(d => d.WorkOrderServices)
                    .WithMany(p => p.Renewals)
                    .HasForeignKey(d => d.WorkOrderServicesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Renewal_Service_Order_Services");
            });

            modelBuilder.Entity<RenewalDetail>(entity =>
            {
                entity.ToTable("Renewal_Detail");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AdditionalRent)
                    .HasColumnName("additional_rent")
                    .HasColumnType("date");

                entity.Property(e => e.AutomaticallyRenewal).HasColumnName("automatically_renewal");

                entity.Property(e => e.HomeFindingId).HasColumnName("home_finding_id");

                entity.Property(e => e.RenewalNotification).HasColumnName("renewal_notification");
            });

            modelBuilder.Entity<RenewalDetailHome>(entity =>
            {
                entity.ToTable("Renewal_Detail_Home");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .ValueGeneratedNever();

                entity.Property(e => e.AdditionalRentIncreaseDate)
                    .HasColumnName("additional_rent_increase_date")
                    .HasColumnType("date");

                entity.Property(e => e.Automatically).HasColumnName("automatically");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.RecurrentIncreasePeriod)
                    .HasColumnName("recurrent_increase_period")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RenewalNotification).HasColumnName("renewal_notification");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.RenewalDetailHome)
                    .HasForeignKey<RenewalDetailHome>(d => d.Id)
                    .HasConstraintName("FK_Renewal_Detail_Home_Housing_List");
            });

            modelBuilder.Entity<RentalFurnitureCoordination>(entity =>
            {
                entity.ToTable("Rental_Furniture_Coordination");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.Baths).HasColumnName("baths");

                entity.Property(e => e.Beds).HasColumnName("beds");

                entity.Property(e => e.Budget)
                    .HasColumnName("budget")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Coordination).HasColumnName("coordination");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Currency).HasColumnName("currency");

                entity.Property(e => e.CurrencyExtension).HasColumnName("currency_extension");

                entity.Property(e => e.DeliverTo).HasColumnName("deliver_to");

                entity.Property(e => e.DeliveredDate)
                    .HasColumnName("delivered_date")
                    .HasColumnType("date");

                entity.Property(e => e.DeliveredTo).HasColumnName("delivered_to");

                entity.Property(e => e.FamilyMembers).HasColumnName("family_members");

                entity.Property(e => e.MainContact).HasColumnName("main_contact");

                entity.Property(e => e.PaymentDue)
                    .HasColumnName("payment_due")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.PaymentResponsibility).HasColumnName("payment_responsibility");

                entity.Property(e => e.PropertyAddress)
                    .HasColumnName("property_address")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RentalAmount)
                    .HasColumnName("rental_amount")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ReturnSecurityDeposit).HasColumnName("return_security_deposit");

                entity.Property(e => e.ScheduledPickUpDate)
                    .HasColumnName("scheduled_pick_up_Date")
                    .HasColumnType("date");

                entity.Property(e => e.SecurityDeposit)
                    .HasColumnName("security_deposit")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ServiceCompletionDate)
                    .HasColumnName("service_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.SupplierPartner).HasColumnName("supplier_partner");

                entity.Property(e => e.TotalDays).HasColumnName("total_days");

                entity.Property(e => e.TotalTimeAllowed).HasColumnName("total_time_allowed");

                entity.Property(e => e.TotalTimeAllowedId).HasColumnName("total_time_allowed_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.WorkOrderServicesId).HasColumnName("work_order_services_id");

                entity.HasOne(d => d.CurrencyNavigation)
                    .WithMany(p => p.RentalFurnitureCoordinationCurrencyNavigations)
                    .HasForeignKey(d => d.Currency)
                    .HasConstraintName("FK_Rental_Furniture_Coordination_Cat_currency");

                entity.HasOne(d => d.CurrencyExtensionNavigation)
                    .WithMany(p => p.RentalFurnitureCoordinationCurrencyExtensionNavigations)
                    .HasForeignKey(d => d.CurrencyExtension)
                    .HasConstraintName("FK_Rental_Furniture_Coordination_Cat_currency1");

                entity.HasOne(d => d.MainContactNavigation)
                    .WithMany(p => p.RentalFurnitureCoordinations)
                    .HasForeignKey(d => d.MainContact)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Rental_Furniture_Coordination_Administrative_Contacts_Service");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.RentalFurnitureCoordinations)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Rental_Furniture_Coordination_Cat_StatusWorkOrder");

                entity.HasOne(d => d.SupplierPartnerNavigation)
                    .WithMany(p => p.RentalFurnitureCoordinations)
                    .HasForeignKey(d => d.SupplierPartner)
                    .HasConstraintName("FK_Rental_Furniture_Coordination_Cat_Supplier");

                entity.HasOne(d => d.TotalTimeAllowedNavigation)
                    .WithMany(p => p.RentalFurnitureCoordinations)
                    .HasForeignKey(d => d.TotalTimeAllowedId)
                    .HasConstraintName("FK_Rental_Furniture_Coordination_Cat_Duration");

                entity.HasOne(d => d.WorkOrderServices)
                    .WithMany(p => p.RentalFurnitureCoordinations)
                    .HasForeignKey(d => d.WorkOrderServicesId)
                    .HasConstraintName("FK_Rental_Furniture_Coordination_Service_Order_Services");
            });

            modelBuilder.Entity<Repair>(entity =>
            {
                entity.ToTable("Repair");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Currency).HasColumnName("currency");

                entity.Property(e => e.HousingList).HasColumnName("housing_list");

                entity.Property(e => e.RepairEndDate)
                    .HasColumnName("repair_end_date")
                    .HasColumnType("date");

                entity.Property(e => e.RepairStartDate)
                    .HasColumnName("repair_start_date")
                    .HasColumnType("date");

                entity.Property(e => e.RepairType).HasColumnName("repair_type");

                entity.Property(e => e.SupplierPartner).HasColumnName("supplier_partner");

                entity.Property(e => e.TotalCostRepair)
                    .HasColumnName("total_cost_repair")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.TotalDays).HasColumnName("total_days");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.CurrencyNavigation)
                    .WithMany(p => p.Repairs)
                    .HasForeignKey(d => d.Currency)
                    .HasConstraintName("FK_Repair_Cat_currency");

                entity.HasOne(d => d.HousingListNavigation)
                    .WithMany(p => p.Repairs)
                    .HasForeignKey(d => d.HousingList)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Repair_Housing_List");

                entity.HasOne(d => d.RepairTypeNavigation)
                    .WithMany(p => p.Repairs)
                    .HasForeignKey(d => d.RepairType)
                    .HasConstraintName("FK_Departure_Repair_Cat_RepairType");
            });

            modelBuilder.Entity<RepeatThePaymentConcept>(entity =>
            {
                entity.HasKey(e => new { e.Recurrence, e.Day });

                entity.ToTable("Repeat_The_Payment_Concept");

                entity.Property(e => e.Recurrence).HasColumnName("recurrence");

                entity.Property(e => e.Day).HasColumnName("day");

                entity.HasOne(d => d.DayNavigation)
                    .WithMany(p => p.RepeatThePaymentConcepts)
                    .HasForeignKey(d => d.Day)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Repeat_The_Payment_Concept_Cat_Days");

                entity.HasOne(d => d.RecurrenceNavigation)
                    .WithMany(p => p.RepeatThePaymentConcepts)
                    .HasForeignKey(d => d.Recurrence)
                    .HasConstraintName("FK_Repeat_The_Payment_Concept_Recurrence_Payment_Concept");
            });

            modelBuilder.Entity<RepeatTheRecurrenceRequestPayment>(entity =>
            {
                entity.HasKey(e => new { e.Recurrence, e.Day });

                entity.ToTable("Repeat_The_Recurrence_Request_Payment");

                entity.Property(e => e.Recurrence).HasColumnName("recurrence");

                entity.Property(e => e.Day).HasColumnName("day");

                entity.HasOne(d => d.DayNavigation)
                    .WithMany(p => p.RepeatTheRecurrenceRequestPayments)
                    .HasForeignKey(d => d.Day)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Repeat_The_Recurrence_Request_Payment_Cat_Days");

                entity.HasOne(d => d.RecurrenceNavigation)
                    .WithMany(p => p.RepeatTheRecurrenceRequestPayments)
                    .HasForeignKey(d => d.Recurrence)
                    .HasConstraintName("FK_Repeat_The_Recurrence_Request_Payment_Recurrence_Request_Payment");
            });

            modelBuilder.Entity<Report>(entity =>
            {
                entity.ToTable("Report");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50);

                entity.Property(e => e.ReportType).HasColumnName("report_type");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.ReportTypeNavigation)
                    .WithMany(p => p.Reports)
                    .HasForeignKey(d => d.ReportType)
                    .HasConstraintName("FK_Report_Cat_Report");
            });

            modelBuilder.Entity<ReportAnEvent>(entity =>
            {
                entity.ToTable("Report_An_Event");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.EventCloseDate)
                    .HasColumnName("event_close_date")
                    .HasColumnType("date");

                entity.Property(e => e.EventId).HasColumnName("event_id");

                entity.Property(e => e.EventReportDate)
                    .HasColumnName("event_report_date")
                    .HasColumnType("date");

                entity.Property(e => e.QuoteApproval)
                    .HasColumnName("quote_approval")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SeverityId).HasColumnName("severity_id");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.TenancyManagementId).HasColumnName("tenancy_management_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Event)
                    .WithMany(p => p.ReportAnEvents)
                    .HasForeignKey(d => d.EventId)
                    .HasConstraintName("FK_Report_An_Event_Cat_Event");

                entity.HasOne(d => d.Severity)
                    .WithMany(p => p.ReportAnEvents)
                    .HasForeignKey(d => d.SeverityId)
                    .HasConstraintName("FK_Report_An_Event_Cat_Severity");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.ReportAnEvents)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_Report_An_Event_Cat_Status_Report_An_Event");

                entity.HasOne(d => d.TenancyManagement)
                    .WithMany(p => p.ReportAnEvents)
                    .HasForeignKey(d => d.TenancyManagementId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Report_An_Event_Tenancy_Management");
            });

            modelBuilder.Entity<ReportDay>(entity =>
            {
                entity.ToTable("Report_Day");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Activity)
                    .HasColumnName("activity")
                    .IsUnicode(false);

                entity.Property(e => e.Conclusion)
                    .HasColumnName("conclusion")
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("date");

                entity.Property(e => e.EndTime)
                    .HasColumnName("end_time")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReportBy).HasColumnName("report_by");

                entity.Property(e => e.ReportDate)
                    .HasColumnName("report_date")
                    .HasColumnType("date");

                entity.Property(e => e.ReportNo).HasColumnName("report_no");

                entity.Property(e => e.ServiceLine).HasColumnName("service_line");

                entity.Property(e => e.StartTime)
                    .HasColumnName("start_time")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalTime)
                    .HasColumnName("total_time")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.WorkOrder).HasColumnName("work_order");

                entity.HasOne(d => d.ReportByNavigation)
                    .WithMany(p => p.ReportDays)
                    .HasForeignKey(d => d.ReportBy)
                    .HasConstraintName("FK_Report_Day_Users");

                entity.HasOne(d => d.ServiceLineNavigation)
                    .WithMany(p => p.ReportDays)
                    .HasForeignKey(d => d.ServiceLine)
                    .HasConstraintName("FK_Report_Day_Cat_Service_Line");

                entity.HasOne(d => d.WorkOrderNavigation)
                    .WithMany(p => p.ReportDays)
                    .HasForeignKey(d => d.WorkOrder)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Report_Day_work_order");
            });

            modelBuilder.Entity<RequestAdditionalTime>(entity =>
            {
                entity.ToTable("Request_Additional_Time");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.RequestTime).HasColumnName("request_time");

                entity.Property(e => e.Service).HasColumnName("service");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.WorkOrder).HasColumnName("work_order");

                entity.HasOne(d => d.WorkOrderNavigation)
                    .WithMany(p => p.RequestAdditionalTimes)
                    .HasForeignKey(d => d.WorkOrder)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Request_Additional_Time_work_order");
            });

            modelBuilder.Entity<RequestInformation>(entity =>
            {
                entity.ToTable("request_information");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AuthorizedBy).HasColumnName("authorized_by");

                entity.Property(e => e.Due)
                    .HasColumnName("due")
                    .HasColumnType("date");

                entity.Property(e => e.House).HasColumnName("house");

                entity.Property(e => e.HousingSpecification).HasColumnName("housing_specification");

                entity.Property(e => e.ImmigrationProfile).HasColumnName("immigration_profile");

                entity.Property(e => e.NeedsAssessment).HasColumnName("needs_assessment");

                entity.Property(e => e.SentTo)
                    .HasColumnName("sent_to")
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceRecordId).HasColumnName("service_record_id");

                entity.HasOne(d => d.AuthorizedByNavigation)
                    .WithMany(p => p.RequestInformations)
                    .HasForeignKey(d => d.AuthorizedBy)
                    .HasConstraintName("FK_request_information_Users");

                entity.HasOne(d => d.ServiceRecord)
                    .WithMany(p => p.RequestInformations)
                    .HasForeignKey(d => d.ServiceRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_request_information_Service_Record");
            });

            modelBuilder.Entity<RequestInformationDocument>(entity =>
            {
                entity.ToTable("request_information_document");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DocumentType).HasColumnName("document_type");

                entity.Property(e => e.FileRequest)
                    .HasColumnName("file_request")
                    .HasMaxLength(100);

                entity.Property(e => e.RelationshipId).HasColumnName("relationship_id");

                entity.Property(e => e.RequestInformationId).HasColumnName("request_information_id");

                entity.HasOne(d => d.DocumentTypeNavigation)
                    .WithMany(p => p.RequestInformationDocuments)
                    .HasForeignKey(d => d.DocumentType)
                    .HasConstraintName("FK_request_information_document_Cat_DocumentType");

                entity.HasOne(d => d.Relationship)
                    .WithMany(p => p.RequestInformationDocuments)
                    .HasForeignKey(d => d.RelationshipId)
                    .HasConstraintName("FK_request_information_document_dependent_information1");

                entity.HasOne(d => d.RequestInformation)
                    .WithMany(p => p.RequestInformationDocuments)
                    .HasForeignKey(d => d.RequestInformationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_request_information_document_request_information");
            });

            modelBuilder.Entity<RequestPayment>(entity =>
            {
                entity.ToTable("Request_Payment");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.City).HasColumnName("city");

                entity.Property(e => e.Country).HasColumnName("country");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FundingRequestDate)
                    .HasColumnName("funding_request_date")
                    .HasColumnType("date");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnName("invoice_date")
                    .HasColumnType("date");

                entity.Property(e => e.InvoiceNo)
                    .HasColumnName("invoice_no")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentDate)
                    .HasColumnName("payment_date")
                    .HasColumnType("date");

                entity.Property(e => e.Recurrence).HasColumnName("recurrence");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Urgent).HasColumnName("urgent");

                entity.Property(e => e.WorkOrderServicesId).HasColumnName("work_order_services_id");

                entity.HasOne(d => d.CityNavigation)
                    .WithMany(p => p.RequestPayments)
                    .HasForeignKey(d => d.City)
                    .HasConstraintName("FK_Request_Payment_Cat_State");

                entity.HasOne(d => d.CountryNavigation)
                    .WithMany(p => p.RequestPayments)
                    .HasForeignKey(d => d.Country)
                    .HasConstraintName("FK_Request_Payment_Cat_Country");

                entity.HasOne(d => d.StatusNavigation)
                    .WithMany(p => p.RequestPayments)
                    .HasForeignKey(d => d.Status)
                    .HasConstraintName("FK_Request_Payment_Cat_RequestPaymentStatus");

                entity.HasOne(d => d.WorkOrderServices)
                    .WithMany(p => p.RequestPayments)
                    .HasForeignKey(d => d.WorkOrderServicesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Request_Payment_Work_Order_Services");
            });

            modelBuilder.Entity<ResidencyPermit>(entity =>
            {
                entity.ToTable("Residency_Permit");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApplicantId).HasColumnName("applicant_id");

                entity.Property(e => e.ApplicationApprovalDate)
                    .HasColumnName("application_approval_date")
                    .HasColumnType("date");

                entity.Property(e => e.ApplicationSubmissionDate)
                    .HasColumnName("application_submission_date")
                    .HasColumnType("date");

                entity.Property(e => e.AppointmentDate)
                    .HasColumnName("appointment_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.City)
                    .HasColumnName("city")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ConsularServiceId).HasColumnName("consular_service_id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentCollectionCompletionDate)
                    .HasColumnName("document_collection_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentCollectionStartDate)
                    .HasColumnName("document_collection_start_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentDeliveryDate)
                    .HasColumnName("document_delivery_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentExpirationDate)
                    .HasColumnName("document_expiration_Date")
                    .HasColumnType("date");

                entity.Property(e => e.HostCityId).HasColumnName("host_city_id");

                entity.Property(e => e.HostCountryId).HasColumnName("host_country_id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceCompletionDate)
                    .HasColumnName("service_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.VisaTypeId)
                    .HasColumnName("visa_type_id")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WorkOrderServicesId).HasColumnName("work_order_services_id");

                entity.HasOne(d => d.ConsularService)
                    .WithMany(p => p.ResidencyPermits)
                    .HasForeignKey(d => d.ConsularServiceId)
                    .HasConstraintName("FK_Residency_Permit_Cat_Consular_Service");

                entity.HasOne(d => d.HostCountry)
                    .WithMany(p => p.ResidencyPermits)
                    .HasForeignKey(d => d.HostCountryId)
                    .HasConstraintName("FK_Residency_Permit_Cat_Country");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.ResidencyPermits)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_Residency_Permit_Cat_Status");

                entity.HasOne(d => d.WorkOrderServices)
                    .WithMany(p => p.ResidencyPermits)
                    .HasForeignKey(d => d.WorkOrderServicesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Residency_Permit_Service_Order_Services");
            });

            modelBuilder.Entity<ResponsiblePremierOffice>(entity =>
            {
                entity.ToTable("Responsible_Premier_Office");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ResponsiblePremierOffice1)
                    .IsRequired()
                    .HasColumnName("responsible_premier_office")
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ScalateComment>(entity =>
            {
                entity.ToTable("scalate_comments");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(500);

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Date)
                    .HasColumnName("date")
                    .HasColumnType("date");

                entity.Property(e => e.ScalateServiceId).HasColumnName("scalate_service_id");

                entity.Property(e => e.UserFromId).HasColumnName("user_from_id");

                entity.Property(e => e.UserToId).HasColumnName("user_to_id");

                entity.HasOne(d => d.ScalateService)
                    .WithMany(p => p.ScalateComments)
                    .HasForeignKey(d => d.ScalateServiceId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_scalate_comments_scalate_service");

                entity.HasOne(d => d.UserFrom)
                    .WithMany(p => p.ScalateCommentUserFroms)
                    .HasForeignKey(d => d.UserFromId)
                    .HasConstraintName("FK_scalate_comments_Users");

                entity.HasOne(d => d.UserTo)
                    .WithMany(p => p.ScalateCommentUserTos)
                    .HasForeignKey(d => d.UserToId)
                    .HasConstraintName("FK_scalate_comments_Users1");
            });

            modelBuilder.Entity<ScalateDocument>(entity =>
            {
                entity.ToTable("scalate_documents");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FileRequest)
                    .HasColumnName("file_request")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ScalateServiceId).HasColumnName("scalate_service_id");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.ScalateService)
                    .WithMany(p => p.ScalateDocuments)
                    .HasForeignKey(d => d.ScalateServiceId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_scalate_documents_scalate_service");
            });

            modelBuilder.Entity<ScalateService>(entity =>
            {
                entity.ToTable("scalate_service");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ClosedDate)
                    .HasColumnName("closed_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Escalation)
                    .HasColumnName("escalation")
                    .HasColumnType("date");

                entity.Property(e => e.EscalationLevel).HasColumnName("escalation_level");

                entity.Property(e => e.ServiceId).HasColumnName("service_id");

                entity.Property(e => e.ServiceLineId).HasColumnName("service_line_id");

                entity.Property(e => e.ServiceRecordId).HasColumnName("service_record_id");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.UserFromId).HasColumnName("user_from_id");

                entity.Property(e => e.UserToId).HasColumnName("user_to_id");

                entity.Property(e => e.WorkOrderId).HasColumnName("work_order_id");

                entity.HasOne(d => d.ServiceLine)
                    .WithMany(p => p.ScalateServices)
                    .HasForeignKey(d => d.ServiceLineId)
                    .HasConstraintName("FK_scalate_service_Cat_Service_Line");

                entity.HasOne(d => d.UserFrom)
                    .WithMany(p => p.ScalateServiceUserFroms)
                    .HasForeignKey(d => d.UserFromId)
                    .HasConstraintName("FK_scalate_service_Users1");

                entity.HasOne(d => d.UserTo)
                    .WithMany(p => p.ScalateServiceUserTos)
                    .HasForeignKey(d => d.UserToId)
                    .HasConstraintName("FK_scalate_service_Users");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ScalateServices)
                    .HasForeignKey(d => d.WorkOrderId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_scalate_service_work_order");
            });

            modelBuilder.Entity<Schooling>(entity =>
            {
                entity.ToTable("Schooling");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.Age).HasColumnName("age");

                entity.Property(e => e.Avatar)
                    .HasColumnName("avatar")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Birth)
                    .HasColumnName("birth")
                    .HasColumnType("date");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentGrade).HasColumnName("current_grade");

                entity.Property(e => e.LanguagesSpoken).HasColumnName("languages_spoken");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nationality).HasColumnName("nationality");

                entity.Property(e => e.PredecisionOrientationId).HasColumnName("predecision_orientation_id");

                entity.Property(e => e.RelationshipId).HasColumnName("relationship_id");

                entity.Property(e => e.Sex).HasColumnName("sex");

                entity.HasOne(d => d.CurrentGradeNavigation)
                    .WithMany(p => p.Schoolings)
                    .HasForeignKey(d => d.CurrentGrade)
                    .HasConstraintName("FK_Schooling_Cat_GradeSchooling");

                entity.HasOne(d => d.LanguagesSpokenNavigation)
                    .WithMany(p => p.Schoolings)
                    .HasForeignKey(d => d.LanguagesSpoken)
                    .HasConstraintName("FK_Schooling_Cat_Languages");

                entity.HasOne(d => d.NationalityNavigation)
                    .WithMany(p => p.Schoolings)
                    .HasForeignKey(d => d.Nationality)
                    .HasConstraintName("FK_Schooling_Cat_Country");

                entity.HasOne(d => d.PredecisionOrientation)
                    .WithMany(p => p.Schoolings)
                    .HasForeignKey(d => d.PredecisionOrientationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Schooling_Predicision_Orientation");

                entity.HasOne(d => d.Relationship)
                    .WithMany(p => p.Schoolings)
                    .HasForeignKey(d => d.RelationshipId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Schooling_dependent_information");
            });

            modelBuilder.Entity<SchoolingAreaOrientation>(entity =>
            {
                entity.ToTable("Schooling_Area_Orientation");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.Age).HasColumnName("age");

                entity.Property(e => e.AreaOrientationId).HasColumnName("area_orientation_id");

                entity.Property(e => e.Avatar)
                    .HasColumnName("avatar")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Birth)
                    .HasColumnName("birth")
                    .HasColumnType("date");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.CurrentGrade).HasColumnName("current_grade");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nationality).HasColumnName("nationality");

                entity.Property(e => e.RelationshipId).HasColumnName("relationship_id");

                entity.Property(e => e.Sex).HasColumnName("sex");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.AreaOrientation)
                    .WithMany(p => p.SchoolingAreaOrientations)
                    .HasForeignKey(d => d.AreaOrientationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Schooling_Area_Orientation_Area_Orientation");

                entity.HasOne(d => d.CurrentGradeNavigation)
                    .WithMany(p => p.SchoolingAreaOrientations)
                    .HasForeignKey(d => d.CurrentGrade)
                    .HasConstraintName("FK_Schooling_Area_Orientation_Cat_GradeSchooling");

                entity.HasOne(d => d.NationalityNavigation)
                    .WithMany(p => p.SchoolingAreaOrientations)
                    .HasForeignKey(d => d.Nationality)
                    .HasConstraintName("FK_Schooling_Area_Orientation_Cat_Country");

                entity.HasOne(d => d.Relationship)
                    .WithMany(p => p.SchoolingAreaOrientations)
                    .HasForeignKey(d => d.RelationshipId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Schooling_Area_Orientation_dependent_information");

                entity.HasOne(d => d.SexNavigation)
                    .WithMany(p => p.SchoolingAreaOrientations)
                    .HasForeignKey(d => d.Sex)
                    .HasConstraintName("FK_Schooling_Area_Orientation_Cat_Sex");
            });

            modelBuilder.Entity<SchoolingInformation>(entity =>
            {
                entity.ToTable("Schooling_Information");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.Age).HasColumnName("age");

                entity.Property(e => e.Avatar)
                    .HasColumnName("avatar")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Birth)
                    .HasColumnName("birth")
                    .HasColumnType("date");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.CurrentGrade).HasColumnName("current_grade");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nationality).HasColumnName("nationality");

                entity.Property(e => e.RelationshipId).HasColumnName("relationship_id");

                entity.Property(e => e.SchoolingSearchId).HasColumnName("schooling_search_id");

                entity.Property(e => e.Sex).HasColumnName("sex");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CurrentGradeNavigation)
                    .WithMany(p => p.SchoolingInformations)
                    .HasForeignKey(d => d.CurrentGrade)
                    .HasConstraintName("FK_Schooling_Information_Cat_GradeSchooling1");

                entity.HasOne(d => d.NationalityNavigation)
                    .WithMany(p => p.SchoolingInformations)
                    .HasForeignKey(d => d.Nationality)
                    .HasConstraintName("FK_Schooling_Information_Cat_Country");

                entity.HasOne(d => d.Relationship)
                    .WithMany(p => p.SchoolingInformations)
                    .HasForeignKey(d => d.RelationshipId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Schooling_Information_dependent_information");

                entity.HasOne(d => d.SchoolingSearch)
                    .WithMany(p => p.SchoolingInformations)
                    .HasForeignKey(d => d.SchoolingSearchId)
                    .HasConstraintName("FK_Schooling_Information_Schooling_Search");

                entity.HasOne(d => d.SexNavigation)
                    .WithMany(p => p.SchoolingInformations)
                    .HasForeignKey(d => d.Sex)
                    .HasConstraintName("FK_Schooling_Information_Cat_Sex");
            });

            modelBuilder.Entity<SchoolingReport>(entity =>
            {
                entity.ToTable("Schooling_Report");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("date");

                entity.Property(e => e.Dependent).HasColumnName("dependent");

                entity.Property(e => e.ReportDetails)
                    .HasColumnName("report_details")
                    .IsUnicode(false);

                entity.Property(e => e.SchoolsList).HasColumnName("schools_list");

                entity.Property(e => e.ServiceId).HasColumnName("service_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.WorkOrder).HasColumnName("work_order");

                entity.HasOne(d => d.DependentNavigation)
                    .WithMany(p => p.SchoolingReports)
                    .HasForeignKey(d => d.Dependent)
                    .HasConstraintName("FK_Schooling_Report_dependent_information");

                entity.HasOne(d => d.SchoolsListNavigation)
                    .WithMany(p => p.SchoolingReports)
                    .HasForeignKey(d => d.SchoolsList)
                    .HasConstraintName("FK_Schooling_Report_Schools_List");
            });

            modelBuilder.Entity<SchoolingSearch>(entity =>
            {
                entity.ToTable("Schooling_Search");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Coordination).HasColumnName("coordination");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ServiceCompletionDate)
                    .HasColumnName("service_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.WorkOrderServicesId).HasColumnName("work_order_services_id");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.SchoolingSearches)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Schooling_Search_Cat_Status");

                entity.HasOne(d => d.WorkOrderServices)
                    .WithMany(p => p.SchoolingSearches)
                    .HasForeignKey(d => d.WorkOrderServicesId)
                    .HasConstraintName("FK_Schooling_Search_Service_Order_Services");
            });

            modelBuilder.Entity<SchoolsList>(entity =>
            {
                entity.ToTable("Schools_List");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AdditionalComments)
                    .HasColumnName("additional_comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Address)
                    .HasColumnName("address")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Admision)
                    .HasColumnName("admision")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.City).HasColumnName("city");

                entity.Property(e => e.Country).HasColumnName("country");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Currency).HasColumnName("currency");

                entity.Property(e => e.Dependent).HasColumnName("dependent");

                entity.Property(e => e.FeesEnrollment)
                    .HasColumnName("fees_enrollment")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ForEnrollment)
                    .HasColumnName("for_enrollment")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Grade).HasColumnName("grade");

                entity.Property(e => e.Ib).HasColumnName("ib");

                entity.Property(e => e.Languages).HasColumnName("languages");

                entity.Property(e => e.MedicalRecordNeeded).HasColumnName("medical_record_needed");

                entity.Property(e => e.PerMonth)
                    .HasColumnName("per_month")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.SchoolName)
                    .HasColumnName("school_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SchoolNo).HasColumnName("school_no");

                entity.Property(e => e.SchoolingStatus).HasColumnName("schooling_status");

                entity.Property(e => e.Service).HasColumnName("service");

                entity.Property(e => e.ServiceType).HasColumnName("service_type");

                entity.Property(e => e.Uniform).HasColumnName("uniform");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.VisitDate)
                    .HasColumnName("visit_date")
                    .HasColumnType("date");

                entity.Property(e => e.WebSite)
                    .HasColumnName("web_site")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WorkOrder).HasColumnName("work_order");

                entity.HasOne(d => d.CityNavigation)
                    .WithMany(p => p.SchoolsLists)
                    .HasForeignKey(d => d.City)
                    .HasConstraintName("FK_Schools_List_Cat_State");

                entity.HasOne(d => d.CountryNavigation)
                    .WithMany(p => p.SchoolsLists)
                    .HasForeignKey(d => d.Country)
                    .HasConstraintName("FK_Schools_List_Cat_Country");

                entity.HasOne(d => d.CurrencyNavigation)
                    .WithMany(p => p.SchoolsLists)
                    .HasForeignKey(d => d.Currency)
                    .HasConstraintName("FK_Schools_List_Cat_currency");

                entity.HasOne(d => d.DependentNavigation)
                    .WithMany(p => p.SchoolsLists)
                    .HasForeignKey(d => d.Dependent)
                    .HasConstraintName("FK_Schools_List_dependent_information");

                entity.HasOne(d => d.GradeNavigation)
                    .WithMany(p => p.SchoolsLists)
                    .HasForeignKey(d => d.Grade)
                    .HasConstraintName("FK_Schools_List_Cat_GradeSchooling");

                entity.HasOne(d => d.LanguagesNavigation)
                    .WithMany(p => p.SchoolsLists)
                    .HasForeignKey(d => d.Languages)
                    .HasConstraintName("FK_Schools_List_Cat_Languages");

                entity.HasOne(d => d.SchoolingStatusNavigation)
                    .WithMany(p => p.SchoolsLists)
                    .HasForeignKey(d => d.SchoolingStatus)
                    .HasConstraintName("FK_Schools_List_Cat_PropertyTypeHousing");

                entity.HasOne(d => d.WorkOrderNavigation)
                    .WithMany(p => p.SchoolsLists)
                    .HasForeignKey(d => d.WorkOrder)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Schools_List_work_order");
            });

            modelBuilder.Entity<SectionInventory>(entity =>
            {
                entity.ToTable("Section_Inventory");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Item)
                    .HasColumnName("item")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyReportSectionId).HasColumnName("property_report_section_id");

                entity.Property(e => e.Quantity).HasColumnName("quantity");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.PropertyReportSection)
                    .WithMany(p => p.SectionInventories)
                    .HasForeignKey(d => d.PropertyReportSectionId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Section_Inventory_Property_Report_Section");
            });

            modelBuilder.Entity<Service>(entity =>
            {
                entity.ToTable("Service");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Service1).HasColumnName("service");

                entity.Property(e => e.ServiceLine).HasColumnName("service_line");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.Service1Navigation)
                    .WithMany(p => p.Services)
                    .HasForeignKey(d => d.Service1)
                    .HasConstraintName("FK_Service_Cat_Service");

                entity.HasOne(d => d.ServiceLineNavigation)
                    .WithMany(p => p.Services)
                    .HasForeignKey(d => d.ServiceLine)
                    .HasConstraintName("FK_Service_Cat_Service_Line");
            });

            modelBuilder.Entity<ServiceCountry>(entity =>
            {
                entity.ToTable("Service_Country");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Country).HasColumnName("country");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.ScopeDescription)
                    .HasColumnName("scope_description")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.ScopeDocuments).HasColumnName("scope_documents");

                entity.Property(e => e.ScopeTitle)
                    .HasColumnName("scope_title")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Service).HasColumnName("service");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.CountryNavigation)
                    .WithMany(p => p.ServiceCountries)
                    .HasForeignKey(d => d.Country)
                    .HasConstraintName("FK_Service_Country_Cat_Country");

                entity.HasOne(d => d.ServiceNavigation)
                    .WithMany(p => p.ServiceCountries)
                    .HasForeignKey(d => d.Service)
                    .HasConstraintName("FK_Service_Country_Service");
            });

            modelBuilder.Entity<ServiceInvoice>(entity =>
            {
                entity.ToTable("Service_Invoice");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AmountToInvoice)
                    .HasColumnName("amount_to_invoice")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DueDate)
                    .HasColumnName("due_date")
                    .HasColumnType("date");

                entity.Property(e => e.HourInvoice)
                    .HasColumnName("hour_invoice")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Invoice).HasColumnName("invoice");

                entity.Property(e => e.Service).HasColumnName("service");

                entity.Property(e => e.ServiceLine).HasColumnName("service_line");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.ToInvoice).HasColumnName("to_invoice");

                entity.Property(e => e.TypeService).HasColumnName("type_service");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.WorkOrder).HasColumnName("work_order");

                entity.HasOne(d => d.InvoiceNavigation)
                    .WithMany(p => p.ServiceInvoices)
                    .HasForeignKey(d => d.Invoice)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Work_Order_Invoice_Invoice");

                entity.HasOne(d => d.StatusNavigation)
                    .WithMany(p => p.ServiceInvoices)
                    .HasForeignKey(d => d.Status)
                    .HasConstraintName("FK_Service_Invoice_Cat_StatusInvoice");

                entity.HasOne(d => d.WorkOrderNavigation)
                    .WithMany(p => p.ServiceInvoices)
                    .HasForeignKey(d => d.WorkOrder)
                    .HasConstraintName("FK_Service_Invoice_work_order");
            });

            modelBuilder.Entity<ServiceLocation>(entity =>
            {
                entity.ToTable("Service_Locations");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdClientPartnerProfile).HasColumnName("id_client_partner_profile");

                entity.Property(e => e.IdService).HasColumnName("id_service");

                entity.Property(e => e.IdServiceLine).HasColumnName("id_service_line");

                entity.Property(e => e.NickName)
                    .IsRequired()
                    .HasColumnName("nick_name")
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdClientPartnerProfileNavigation)
                    .WithMany(p => p.ServiceLocations)
                    .HasForeignKey(d => d.IdClientPartnerProfile)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Service_Locations_Client_Partner_Profile");

                entity.HasOne(d => d.IdServiceNavigation)
                    .WithMany(p => p.ServiceLocations)
                    .HasForeignKey(d => d.IdService)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Service_Locations_Cat_Service");

                entity.HasOne(d => d.IdServiceLineNavigation)
                    .WithMany(p => p.ServiceLocations)
                    .HasForeignKey(d => d.IdServiceLine)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Service_Locations_Cat_Service_Line");
            });

            modelBuilder.Entity<ServiceLocationCountry>(entity =>
            {
                entity.ToTable("Service_Location_Country");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdCountry).HasColumnName("id_country");

                entity.Property(e => e.IdServiceLocation).HasColumnName("id_service_location");

                entity.Property(e => e.ScopeDescription)
                    .IsRequired()
                    .HasColumnName("scope_description")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.StandarScopeDocuments).HasColumnName("standar_scope_documents");

                entity.HasOne(d => d.IdCountryNavigation)
                    .WithMany(p => p.ServiceLocationCountries)
                    .HasForeignKey(d => d.IdCountry)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Service_Location_Country_Cat_Country");

                entity.HasOne(d => d.IdServiceLocationNavigation)
                    .WithMany(p => p.ServiceLocationCountries)
                    .HasForeignKey(d => d.IdServiceLocation)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Service_Location_Country_Service_Locations");
            });

            modelBuilder.Entity<ServiceOrderServicesStatus>(entity =>
            {
                entity.ToTable("Service_Order_Services_Status");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ServiceRecord>(entity =>
            {
                entity.ToTable("Service_Record");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AuthorizedByImmigration).HasColumnName("authorized_by_immigration");

                entity.Property(e => e.AuthorizedByRelocation).HasColumnName("authorized_by_relocation");

                entity.Property(e => e.ClientFileNumber)
                    .IsRequired()
                    .HasColumnName("client_file_number")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClientId).HasColumnName("client_id");

                entity.Property(e => e.ClosedDate)
                    .HasColumnName("closed_date")
                    .HasColumnType("date");

                entity.Property(e => e.ConfidentialMove).HasColumnName("confidential_move");

                entity.Property(e => e.CopyOnEmailImmigration).HasColumnName("copy_on_email_immigration");

                entity.Property(e => e.CopyOnEmailRelocation).HasColumnName("copy_on_email_relocation");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ImmigrationClosed).HasColumnName("immigration_closed");

                entity.Property(e => e.ImmigrationCompleteReport).HasColumnName("immigration_complete_report");

                entity.Property(e => e.InithialAuthoAcceptance)
                    .HasColumnName("inithial_autho_acceptance")
                    .HasColumnType("date");

                entity.Property(e => e.InitialAutho)
                    .HasColumnName("initial_autho")
                    .HasColumnType("date");

                entity.Property(e => e.NumberServiceRecord)
                    .HasColumnName("number_service_record")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Office).HasColumnName("office");

                entity.Property(e => e.PartnerId).HasColumnName("partner_id");

                entity.Property(e => e.RelocationClosed).HasColumnName("relocation_closed");

                entity.Property(e => e.RelocationCompleteReport).HasColumnName("relocation_complete_report");

                entity.Property(e => e.SpecialIntructions)
                    .HasColumnName("special_intructions")
                    .HasMaxLength(100);

                entity.Property(e => e.SpocImmigration).HasColumnName("spoc_immigration");

                entity.Property(e => e.SpocRelocation).HasColumnName("spoc_relocation");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Urgent).HasColumnName("urgent");

                entity.Property(e => e.Vip).HasColumnName("vip");

                entity.HasOne(d => d.AuthorizedByImmigrationNavigation)
                    .WithMany(p => p.ServiceRecordAuthorizedByImmigrationNavigations)
                    .HasForeignKey(d => d.AuthorizedByImmigration)
                    .HasConstraintName("FK_Service_Record_Office_Contact");

                entity.HasOne(d => d.AuthorizedByRelocationNavigation)
                    .WithMany(p => p.ServiceRecordAuthorizedByRelocationNavigations)
                    .HasForeignKey(d => d.AuthorizedByRelocation)
                    .HasConstraintName("FK_Service_Record_Office_Contact1");

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ServiceRecordClients)
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Service_Record_Client_Partner_Profile1");

                entity.HasOne(d => d.OfficeNavigation)
                    .WithMany(p => p.ServiceRecords)
                    .HasForeignKey(d => d.Office)
                    .HasConstraintName("FK_Service_Record_Cat_Office");

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.ServiceRecordPartners)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Service_Record_Client_Partner_Profile");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.ServiceRecords)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_Service_Record_Cat_Status");
            });

            modelBuilder.Entity<ServiceReportDay>(entity =>
            {
                entity.ToTable("Service_Report_Day");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ReportDayId).HasColumnName("report_day_id");

                entity.Property(e => e.Service).HasColumnName("service");

                entity.Property(e => e.Time)
                    .HasColumnName("time")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.ReportDay)
                    .WithMany(p => p.ServiceReportDays)
                    .HasForeignKey(d => d.ReportDayId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Service_Report_Day_Report_Day");
            });

            modelBuilder.Entity<ServiceScoreAward>(entity =>
            {
                entity.ToTable("Service_Score_Awards");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .IsRequired()
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IdClientPartnerProfile).HasColumnName("id_client_partner_profile");

                entity.Property(e => e.IdServiceLine).HasColumnName("id_service_line");

                entity.Property(e => e.IdType).HasColumnName("id_type");

                entity.Property(e => e.Year)
                    .HasColumnName("year")
                    .HasColumnType("date");

                entity.HasOne(d => d.IdClientPartnerProfileNavigation)
                    .WithMany(p => p.ServiceScoreAwards)
                    .HasForeignKey(d => d.IdClientPartnerProfile)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Service_Score_Awards_Client_Partner_Profile");

                entity.HasOne(d => d.IdServiceLineNavigation)
                    .WithMany(p => p.ServiceScoreAwards)
                    .HasForeignKey(d => d.IdServiceLine)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Service_Score_Awards_Cat_Service_Line");

                entity.HasOne(d => d.IdTypeNavigation)
                    .WithMany(p => p.ServiceScoreAwards)
                    .HasForeignKey(d => d.IdType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Service_Score_Awards_cat_service_score_award");

                entity.HasOne(d => d.IdType1)
                    .WithMany(p => p.ServiceScoreAwards)
                    .HasForeignKey(d => d.IdType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Service_Score_Awards_Cat_Type");
            });

            modelBuilder.Entity<SettlingIn>(entity =>
            {
                entity.ToTable("Settling_In");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.BankAccount).HasColumnName("bank_account");

                entity.Property(e => e.BankCompleted)
                    .HasColumnName("bank_completed")
                    .HasColumnType("date");

                entity.Property(e => e.BankName)
                    .HasColumnName("bank_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CarCompleted)
                    .HasColumnName("car_completed")
                    .HasColumnType("date");

                entity.Property(e => e.CarPurchaseLease).HasColumnName("car_purchase_lease");

                entity.Property(e => e.ChildCare).HasColumnName("child_care");

                entity.Property(e => e.ChildCareCompleted)
                    .HasColumnName("child_care_completed")
                    .HasColumnType("date");

                entity.Property(e => e.ChildCareSupplier)
                    .HasColumnName("child_care_supplier")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ChildCareSupplierPartner).HasColumnName("child_care_supplier_partner");

                entity.Property(e => e.CleaningServices).HasColumnName("cleaning_services");

                entity.Property(e => e.CleaningServicesCompleted)
                    .HasColumnName("cleaning_services_completed")
                    .HasColumnType("date");

                entity.Property(e => e.CleaningServicesSupplier)
                    .HasColumnName("cleaning_services_supplier")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CleaningServicesSupplierPartner).HasColumnName("cleaning_services_supplier_partner");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Coordination).HasColumnName("coordination");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DriverLicense).HasColumnName("driver_license");

                entity.Property(e => e.DriverLicenseCompleted)
                    .HasColumnName("driver_license_completed")
                    .HasColumnType("date");

                entity.Property(e => e.HealthCare).HasColumnName("health_care");

                entity.Property(e => e.HealthCareCompleted)
                    .HasColumnName("health_care_completed")
                    .HasColumnType("date");

                entity.Property(e => e.LeisureClubMembership).HasColumnName("leisure_club_membership");

                entity.Property(e => e.LeisureClubMembershipCompleted)
                    .HasColumnName("leisure_club_membership_completed")
                    .HasColumnType("date");

                entity.Property(e => e.LocalRegistration).HasColumnName("local_registration");

                entity.Property(e => e.LocalRegistrationCompleted)
                    .HasColumnName("local_registration_completed")
                    .HasColumnType("date");

                entity.Property(e => e.RecreationalClub).HasColumnName("recreational_club");

                entity.Property(e => e.RecreationalClubCompleted)
                    .HasColumnName("recreational_club_completed")
                    .HasColumnType("date");

                entity.Property(e => e.ServiceCompletionDate)
                    .HasColumnName("service_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.SpousalAssistance).HasColumnName("spousal_assistance");

                entity.Property(e => e.SpousalAssistanceCompleted)
                    .HasColumnName("spousal_assistance_completed")
                    .HasColumnType("date");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.WorkOrderServicesId).HasColumnName("work_order_services_id");

                entity.HasOne(d => d.ChildCareSupplierPartnerNavigation)
                    .WithMany(p => p.SettlingInChildCareSupplierPartnerNavigations)
                    .HasForeignKey(d => d.ChildCareSupplierPartner)
                    .HasConstraintName("FK_Settling_In_Cat_SupplierCompany1");

                entity.HasOne(d => d.CleaningServicesSupplierPartnerNavigation)
                    .WithMany(p => p.SettlingInCleaningServicesSupplierPartnerNavigations)
                    .HasForeignKey(d => d.CleaningServicesSupplierPartner)
                    .HasConstraintName("FK_Settling_In_Cat_SupplierCompany");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.SettlingIns)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Settling_In_Cat_Status");

                entity.HasOne(d => d.WorkOrderServices)
                    .WithMany(p => p.SettlingIns)
                    .HasForeignKey(d => d.WorkOrderServicesId)
                    .HasConstraintName("FK_Settling_In_Service_Order_Services");
            });

            modelBuilder.Entity<SlidePhrase>(entity =>
            {
                entity.ToTable("Slide_Phrase");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasColumnName("image")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Phrase)
                    .IsRequired()
                    .HasColumnName("phrase")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");
            });

            modelBuilder.Entity<StandaloneServiceWorkOrder>(entity =>
            {
                entity.ToTable("Standalone_Service_Work_Order");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Acceptance)
                    .HasColumnName("acceptance")
                    .HasColumnType("date");

                entity.Property(e => e.Autho)
                    .HasColumnName("autho")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoTime).HasColumnName("autho_time");

                entity.Property(e => e.BillingHour)
                    .HasColumnName("billing_hour")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryId).HasColumnName("category_id");

                entity.Property(e => e.Coordination).HasColumnName("coordination");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DeliveredTo).HasColumnName("delivered_to");

                entity.Property(e => e.DeliveringIn).HasColumnName("delivering_in");

                entity.Property(e => e.InvoiceSupplier).HasColumnName("invoice_supplier");

                entity.Property(e => e.Location)
                    .HasColumnName("location")
                    .HasMaxLength(100);

                entity.Property(e => e.ProjectedFee)
                    .HasColumnName("projected_fee")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceId).HasColumnName("service_id");

                entity.Property(e => e.ServiceNumber)
                    .HasColumnName("service_number")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceTypeId).HasColumnName("service_type_id");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.WorkOrderId).HasColumnName("work_order_id");

                entity.Property(e => e.WorkOrderServiceId).HasColumnName("work_order_service_id");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.StandaloneServiceWorkOrders)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK_Standalone_Service_Work_Order_Cat_Category");

                entity.HasOne(d => d.DeliveredToNavigation)
                    .WithMany(p => p.StandaloneServiceWorkOrders)
                    .HasForeignKey(d => d.DeliveredTo)
                    .HasConstraintName("FK_Standalone_Service_Work_Order_dependent_information");

                entity.HasOne(d => d.DeliveringInNavigation)
                    .WithMany(p => p.StandaloneServiceWorkOrders)
                    .HasForeignKey(d => d.DeliveringIn)
                    .HasConstraintName("FK_Standalone_Service_Work_Order_Cat_Country");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.StandaloneServiceWorkOrders)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_Standalone_Service_Work_Order_Cat_Service");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.StandaloneServiceWorkOrders)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .HasConstraintName("FK_Standalone_Service_Work_Order_Cat_Type_Service");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.StandaloneServiceWorkOrders)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_Standalone_Service_Work_Order_Service_Order_Services_Status");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.StandaloneServiceWorkOrders)
                    .HasForeignKey(d => d.WorkOrderId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Standalone_Service_Work_Order_work_order");

                entity.HasOne(d => d.WorkOrderService)
                    .WithMany(p => p.StandaloneServiceWorkOrders)
                    .HasForeignKey(d => d.WorkOrderServiceId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Standalone_Service_Work_Order_Work_Order_Services");
            });

            modelBuilder.Entity<StatusClientPartnerProfile>(entity =>
            {
                entity.ToTable("status_client_partner_profile");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasColumnName("status")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StatusCountryDocument>(entity =>
            {
                entity.ToTable("status_country_document");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasColumnName("status")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StayExtensionRentalFurnitureCoordination>(entity =>
            {
                entity.ToTable("Stay_Extension_Rental_Furniture_Coordination");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FinalDate)
                    .HasColumnName("final_date")
                    .HasColumnType("date");

                entity.Property(e => e.InitialDate)
                    .HasColumnName("initial_date")
                    .HasColumnType("date");

                entity.Property(e => e.RentalFurnitureCoordinationId).HasColumnName("rental_furniture_coordination_id");

                entity.Property(e => e.TotalDays).HasColumnName("total_days");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.RentalFurnitureCoordination)
                    .WithMany(p => p.StayExtensionRentalFurnitureCoordinations)
                    .HasForeignKey(d => d.RentalFurnitureCoordinationId)
                    .HasConstraintName("FK_Stay_Extension_Rental_Furniture_Coordination_Rental_Furniture_Coordination");
            });

            modelBuilder.Entity<StayExtensionTemporaryHousing>(entity =>
            {
                entity.ToTable("Stay_Extension_Temporary_Housing");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ExtraDays).HasColumnName("extra_days");

                entity.Property(e => e.FinalDate)
                    .HasColumnName("final_date")
                    .HasColumnType("date");

                entity.Property(e => e.InitialDate)
                    .HasColumnName("initial_date")
                    .HasColumnType("date");

                entity.Property(e => e.TemporaryHousingCoordinationId).HasColumnName("temporary_housing_coordination_id");

                entity.Property(e => e.TotalDays).HasColumnName("total_days");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.TemporaryHousingCoordination)
                    .WithMany(p => p.StayExtensionTemporaryHousings)
                    .HasForeignKey(d => d.TemporaryHousingCoordinationId)
                    .HasConstraintName("FK_Stay_Extension_Temporary_Housing_Temporary_Housing_Coordinaton");
            });

            modelBuilder.Entity<SuccessProbability>(entity =>
            {
                entity.ToTable("Success_Probability");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.SuccessProbability1)
                    .IsRequired()
                    .HasColumnName("success_probability")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SupplierConsultantPhoto>(entity =>
            {
                entity.ToTable("Supplier_Consultant_Photo");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.PhotoName)
                    .HasColumnName("photo_name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PhotoPath)
                    .HasColumnName("photo_path")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReportAnEventId).HasColumnName("report_an_event_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.ReportAnEvent)
                    .WithMany(p => p.SupplierConsultantPhotos)
                    .HasForeignKey(d => d.ReportAnEventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Supplier_Consultant_Photo_Report_An_Event");
            });

            modelBuilder.Entity<SupplierPartnerDetail>(entity =>
            {
                entity.ToTable("Supplier_Partner_Details");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AirportShuttle).HasColumnName("airport_shuttle");

                entity.Property(e => e.ArmouredVehicles).HasColumnName("armoured_vehicles");

                entity.Property(e => e.CarSeatRental).HasColumnName("car_seat_rental");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.FaceFaceAssistance).HasColumnName("face_face_assistance");

                entity.Property(e => e.FleetSize).HasColumnName("fleet_size");

                entity.Property(e => e.InsuranceCoverage).HasColumnName("insurance_coverage");

                entity.Property(e => e.LicenceMlsNumber)
                    .HasColumnName("licence_MLS_number")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MealPlans).HasColumnName("meal_plans");

                entity.Property(e => e.MergencyKits).HasColumnName("mergency_kits");

                entity.Property(e => e.NumberDirvers).HasColumnName("number_dirvers");

                entity.Property(e => e.OnlineSolution).HasColumnName("online_solution");

                entity.Property(e => e.PetFriendly).HasColumnName("pet_friendly");

                entity.Property(e => e.SupplierPartnerProfileService).HasColumnName("supplier_partner_profile_service");

                entity.Property(e => e.TypeVehicles).HasColumnName("type_vehicles");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.SupplierPartnerProfileServiceNavigation)
                    .WithMany(p => p.SupplierPartnerDetails)
                    .HasForeignKey(d => d.SupplierPartnerProfileService)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Supplier_Partner_Details_Supplier_Partner_Profile_Service");
            });

            modelBuilder.Entity<SupplierPartnerProfileConsultant>(entity =>
            {
                entity.ToTable("Supplier_Partner_Profile_Consultant");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.About)
                    .HasColumnName("about")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.AmountPerHour)
                    .HasColumnName("amount_per_hour")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ComercialName)
                    .HasColumnName("comercial_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreditTerms).HasColumnName("credit_terms");

                entity.Property(e => e.Currency).HasColumnName("currency");

                entity.Property(e => e.Immigration).HasColumnName("immigration");

                entity.Property(e => e.LegalName)
                    .HasColumnName("legal_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.LuxuryVip).HasColumnName("luxury_vip");

                entity.Property(e => e.Photo)
                    .HasColumnName("photo")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Relocation).HasColumnName("relocation");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.SupplierSince)
                    .HasColumnName("supplier_since")
                    .HasColumnType("date");

                entity.Property(e => e.TaxesPercentage).HasColumnName("taxes_percentage");

                entity.Property(e => e.Type).HasColumnName("type");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.CreditTermsNavigation)
                    .WithMany(p => p.SupplierPartnerProfileConsultants)
                    .HasForeignKey(d => d.CreditTerms)
                    .HasConstraintName("FK_Supplier_Partner_Profile_Consultant_Cat_Credit_Terms");

                entity.HasOne(d => d.CurrencyNavigation)
                    .WithMany(p => p.SupplierPartnerProfileConsultants)
                    .HasForeignKey(d => d.Currency)
                    .HasConstraintName("FK_Supplier_Partner_Profile_Consultant_Cat_currency");

                entity.HasOne(d => d.StatusNavigation)
                    .WithMany(p => p.SupplierPartnerProfileConsultants)
                    .HasForeignKey(d => d.Status)
                    .HasConstraintName("FK_Supplier_Partner_Profile_Consultant_Cat_SupplierPartnerProfileStatus");

                entity.HasOne(d => d.TaxesPercentageNavigation)
                    .WithMany(p => p.SupplierPartnerProfileConsultants)
                    .HasForeignKey(d => d.TaxesPercentage)
                    .HasConstraintName("FK_Supplier_Partner_Profile_Consultant_Cat_Taxe_Percentage");

                entity.HasOne(d => d.TypeNavigation)
                    .WithMany(p => p.SupplierPartnerProfileConsultants)
                    .HasForeignKey(d => d.Type)
                    .HasConstraintName("FK_Supplier_Partner_Profile_Consultant_Cat_Supplier_Partner_Profile_Type");
            });

            modelBuilder.Entity<SupplierPartnerProfileService>(entity =>
            {
                entity.ToTable("Supplier_Partner_Profile_Service");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.About)
                    .HasColumnName("about")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.AmountPerHour)
                    .HasColumnName("amount_per_hour")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ComercialName)
                    .HasColumnName("comercial_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreditTerms).HasColumnName("credit_terms");

                entity.Property(e => e.Currency).HasColumnName("currency");

                entity.Property(e => e.Immigration).HasColumnName("immigration");

                entity.Property(e => e.LegalName)
                    .HasColumnName("legal_name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.LuxuryVip).HasColumnName("luxury_vip");

                entity.Property(e => e.Photo)
                    .HasColumnName("photo")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Relocation).HasColumnName("relocation");

                entity.Property(e => e.ServiceLine).HasColumnName("service_line");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.SupplierSince)
                    .HasColumnName("supplier_since")
                    .HasColumnType("date");

                entity.Property(e => e.SupplierType).HasColumnName("supplier_type");

                entity.Property(e => e.TaxeName)
                    .HasColumnName("taxe_name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TaxesPercentage).HasColumnName("taxes_percentage");

                entity.Property(e => e.Type).HasColumnName("type");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.CreditTermsNavigation)
                    .WithMany(p => p.SupplierPartnerProfileServices)
                    .HasForeignKey(d => d.CreditTerms)
                    .HasConstraintName("FK_Supplier_Partner_Profile_Service_Cat_Credit_Terms");

                entity.HasOne(d => d.CurrencyNavigation)
                    .WithMany(p => p.SupplierPartnerProfileServices)
                    .HasForeignKey(d => d.Currency)
                    .HasConstraintName("FK_Supplier_Partner_Profile_Service_Cat_currency");

                entity.HasOne(d => d.ServiceLineNavigation)
                    .WithMany(p => p.SupplierPartnerProfileServices)
                    .HasForeignKey(d => d.ServiceLine)
                    .HasConstraintName("FK_Supplier_Partner_Profile_Service_Cat_Service_Line");

                entity.HasOne(d => d.StatusNavigation)
                    .WithMany(p => p.SupplierPartnerProfileServices)
                    .HasForeignKey(d => d.Status)
                    .HasConstraintName("FK_Supplier_Partner_Profile_Service_Cat_SupplierPartnerProfileStatus");

                entity.HasOne(d => d.SupplierTypeNavigation)
                    .WithMany(p => p.SupplierPartnerProfileServices)
                    .HasForeignKey(d => d.SupplierType)
                    .HasConstraintName("FK_Supplier_Partner_Profile_Service_Cat_SupplierType");

                entity.HasOne(d => d.TaxesPercentageNavigation)
                    .WithMany(p => p.SupplierPartnerProfileServices)
                    .HasForeignKey(d => d.TaxesPercentage)
                    .HasConstraintName("FK_Supplier_Partner_Profile_Service_Cat_Taxe_Percentage");

                entity.HasOne(d => d.TypeNavigation)
                    .WithMany(p => p.SupplierPartnerProfileServices)
                    .HasForeignKey(d => d.Type)
                    .HasConstraintName("FK_Supplier_Partner_Profile_Service_Cat_Supplier_Partner_Profile_Type");
            });

            modelBuilder.Entity<Task>(entity =>
            {
                entity.ToTable("Task");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ActionTitle)
                    .HasColumnName("action_title")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ActionType).HasColumnName("action_type");

                entity.Property(e => e.AssignedDate)
                    .HasColumnName("assigned_date")
                    .HasColumnType("date");

                entity.Property(e => e.Comments)
                    .IsRequired()
                    .HasColumnName("comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CompletedDate)
                    .HasColumnName("completed_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Department).HasColumnName("department");

                entity.Property(e => e.DueDate)
                    .HasColumnName("due_date")
                    .HasColumnType("date");

                entity.Property(e => e.OverdueTask).HasColumnName("overdue_task");

                entity.Property(e => e.ServiceId).HasColumnName("service_id");

                entity.Property(e => e.ServiceLineId).HasColumnName("service_line_id");

                entity.Property(e => e.ServiceRecordId).HasColumnName("service_record_id");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.TaskDescription)
                    .HasColumnName("task_description")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TaskFrom).HasColumnName("task_from");

                entity.Property(e => e.TaskTo).HasColumnName("task_to");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.Urgent).HasColumnName("urgent");

                entity.Property(e => e.WorkOrderId).HasColumnName("work_order_id");

                entity.HasOne(d => d.ActionTypeNavigation)
                    .WithMany(p => p.Tasks)
                    .HasForeignKey(d => d.ActionType)
                    .HasConstraintName("FK_Task_Cat_ActionType");

                entity.HasOne(d => d.DepartmentNavigation)
                    .WithMany(p => p.Tasks)
                    .HasForeignKey(d => d.Department)
                    .HasConstraintName("FK_Task_Cat_Department");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.Tasks)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Task_Work_Order_Services");

                entity.HasOne(d => d.ServiceLine)
                    .WithMany(p => p.Tasks)
                    .HasForeignKey(d => d.ServiceLineId)
                    .HasConstraintName("FK_Task_Cat_Service_Line");

                entity.HasOne(d => d.ServiceRecord)
                    .WithMany(p => p.Tasks)
                    .HasForeignKey(d => d.ServiceRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Task_Service_Record");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Tasks)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Task_Task_Status");

                entity.HasOne(d => d.TaskFromNavigation)
                    .WithMany(p => p.TaskTaskFromNavigations)
                    .HasForeignKey(d => d.TaskFrom)
                    .HasConstraintName("FK_Task_Users");

                entity.HasOne(d => d.TaskToNavigation)
                    .WithMany(p => p.TaskTaskToNavigations)
                    .HasForeignKey(d => d.TaskTo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Task_Users1");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.Tasks)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Task_work_order");
            });

            modelBuilder.Entity<TaskDocument>(entity =>
            {
                entity.ToTable("Task_Document");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.FileRequest)
                    .IsRequired()
                    .HasColumnName("file_request")
                    .IsUnicode(false);

                entity.Property(e => e.NameFile)
                    .HasColumnName("name_file")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.TaskId).HasColumnName("task_id");

                entity.HasOne(d => d.Task)
                    .WithMany(p => p.TaskDocuments)
                    .HasForeignKey(d => d.TaskId)
                    .HasConstraintName("FK_Task_Document_Task");
            });

            modelBuilder.Entity<TaskReply>(entity =>
            {
                entity.ToTable("Task_Reply");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Reply)
                    .IsRequired()
                    .HasColumnName("reply")
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.TaskId).HasColumnName("task_id");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.TaskReplies)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_Task_Reply_Users");

                entity.HasOne(d => d.Task)
                    .WithMany(p => p.TaskReplies)
                    .HasForeignKey(d => d.TaskId)
                    .HasConstraintName("FK_Task_Reply_Task");
            });

            modelBuilder.Entity<TaskStatus>(entity =>
            {
                entity.ToTable("Task_Status");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasColumnName("status")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TemporaryHousingCoordinaton>(entity =>
            {
                entity.ToTable("Temporary_Housing_Coordinaton");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Apartment).HasColumnName("apartment");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.Bathrooms).HasColumnName("bathrooms");

                entity.Property(e => e.Bedrooms).HasColumnName("bedrooms");

                entity.Property(e => e.Budget)
                    .HasColumnName("budget")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.CheckIn)
                    .HasColumnName("check_in")
                    .HasColumnType("date");

                entity.Property(e => e.CheckOut)
                    .HasColumnName("check_out")
                    .HasColumnType("date");

                entity.Property(e => e.ClientSecurityInspectionRequired).HasColumnName("client_security_inspection_required");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Coordination).HasColumnName("coordination");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.CurencySecurityDeposit).HasColumnName("curency_security_deposit");

                entity.Property(e => e.Currency).HasColumnName("currency");

                entity.Property(e => e.CurrencyFinalReservationAmount).HasColumnName("currency_final_reservation_amount");

                entity.Property(e => e.Extension).HasColumnName("extension");

                entity.Property(e => e.FinalReservationAmount)
                    .HasColumnName("final_reservation_amount")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.House).HasColumnName("house");

                entity.Property(e => e.Neighborhood)
                    .HasColumnName("neighborhood")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentResponsibilty).HasColumnName("payment_responsibilty");

                entity.Property(e => e.PaymentsDue).HasColumnName("payments_due");

                entity.Property(e => e.PetFrindly).HasColumnName("pet_frindly");

                entity.Property(e => e.PropertyAddress)
                    .HasColumnName("property_address")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PropertyNo).HasColumnName("property_no");

                entity.Property(e => e.ReservationType).HasColumnName("reservation_type");

                entity.Property(e => e.SecurityDeposit)
                    .HasColumnName("security_deposit")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ServiceCompletionDate)
                    .HasColumnName("service_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.SupplierPartner).HasColumnName("supplier_partner");

                entity.Property(e => e.TotalAllotedDaysEnd)
                    .HasColumnName("total_alloted_days_end")
                    .HasColumnType("date");

                entity.Property(e => e.TotalAllotedDaysStart)
                    .HasColumnName("total_alloted_days_start")
                    .HasColumnType("date");

                entity.Property(e => e.TotalDays).HasColumnName("total_days");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.WorkOrderServicesId).HasColumnName("work_order_services_id");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.TemporaryHousingCoordinatons)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Temporary_Housing_Coordinaton_Cat_StatusWorkOrder");

                entity.HasOne(d => d.SupplierPartnerNavigation)
                    .WithMany(p => p.TemporaryHousingCoordinatons)
                    .HasForeignKey(d => d.SupplierPartner)
                    .HasConstraintName("FK_Temporary_Housing_Coordinaton_Profile_User");

                entity.HasOne(d => d.WorkOrderServices)
                    .WithMany(p => p.TemporaryHousingCoordinatons)
                    .HasForeignKey(d => d.WorkOrderServicesId)
                    .HasConstraintName("FK_Temporary_Housing_Coordinaton_Work_Order_Services");
            });

            modelBuilder.Entity<TenancyManagement>(entity =>
            {
                entity.ToTable("Tenancy_Management");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.Coordination).HasColumnName("coordination");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeliverTo).HasColumnName("deliver_to");

                entity.Property(e => e.MonthlyFollowUp)
                    .HasColumnName("monthly_follow_up")
                    .HasColumnType("date");

                entity.Property(e => e.PropertyId).HasColumnName("property_id");

                entity.Property(e => e.Recurrence)
                    .HasColumnName("recurrence")
                    .HasColumnType("date");

                entity.Property(e => e.ServiceCompletionDate)
                    .HasColumnName("service_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.WorkOrderServices).HasColumnName("work_order_services");

                entity.HasOne(d => d.DeliverToNavigation)
                    .WithMany(p => p.TenancyManagements)
                    .HasForeignKey(d => d.DeliverTo)
                    .HasConstraintName("FK_Tenancy_Management_dependent_information");

                entity.HasOne(d => d.Property)
                    .WithMany(p => p.TenancyManagements)
                    .HasForeignKey(d => d.PropertyId)
                    .HasConstraintName("FK_Tenancy_Management_Housing_List");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.TenancyManagements)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_Tenancy_Management_Cat_StatusWorkOrder");

                entity.HasOne(d => d.WorkOrderServicesNavigation)
                    .WithMany(p => p.TenancyManagements)
                    .HasForeignKey(d => d.WorkOrderServices)
                    .HasConstraintName("FK_Tenancy_Management_Work_Order_Services");
            });

            modelBuilder.Entity<TermsDeal>(entity =>
            {
                entity.ToTable("Terms_Deal");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.BussinesUnit)
                    .IsRequired()
                    .HasColumnName("bussines_unit")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Fixed)
                    .IsRequired()
                    .HasColumnName("fixed")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.IdClientPartnerProfile).HasColumnName("id_client_partner_profile");

                entity.Property(e => e.IdCurrency).HasColumnName("id_currency");

                entity.Property(e => e.IdPrice).HasColumnName("id_price");

                entity.Property(e => e.Sevices).HasColumnName("sevices");

                entity.Property(e => e.Volume)
                    .IsRequired()
                    .HasColumnName("volume")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdClientPartnerProfileNavigation)
                    .WithMany(p => p.TermsDeals)
                    .HasForeignKey(d => d.IdClientPartnerProfile)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Terms_Deal_Client_Partner_Profile");

                entity.HasOne(d => d.IdCurrencyNavigation)
                    .WithMany(p => p.TermsDeals)
                    .HasForeignKey(d => d.IdCurrency)
                    .HasConstraintName("FK_Terms_Deal_Cat_currency");

                entity.HasOne(d => d.IdPriceNavigation)
                    .WithMany(p => p.TermsDeals)
                    .HasForeignKey(d => d.IdPrice)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Terms_Deal_Cat_Price_Terms_Deal");
            });

            modelBuilder.Entity<Theme>(entity =>
            {
                entity.ToTable("Theme");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Content).HasColumnName("content");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Element).HasColumnName("element");

                entity.Property(e => e.Order).HasColumnName("order");

                entity.Property(e => e.Text)
                    .HasColumnName("text")
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.Url)
                    .HasColumnName("url")
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.HasOne(d => d.ContentNavigation)
                    .WithMany(p => p.Themes)
                    .HasForeignKey(d => d.Content)
                    .HasConstraintName("FK_Theme_Content");

                entity.HasOne(d => d.ElementNavigation)
                    .WithMany(p => p.Themes)
                    .HasForeignKey(d => d.Element)
                    .HasConstraintName("FK_Theme_Cat_Element1");
            });

            modelBuilder.Entity<Transportation>(entity =>
            {
                entity.ToTable("Transportation");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApplicantId).HasColumnName("applicant_id");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.Budget)
                    .HasColumnName("budget")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Coordination).HasColumnName("coordination");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DriverContact)
                    .HasColumnName("driver_contact")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DriverName)
                    .HasColumnName("driver_name")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DropOffLocation)
                    .HasColumnName("drop_off_location")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Pet).HasColumnName("pet");

                entity.Property(e => e.PickUpLocation)
                    .HasColumnName("pick_up_location")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PlateNumber)
                    .HasColumnName("plate_number")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectFee)
                    .HasColumnName("project_fee")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceCompletionDate)
                    .HasColumnName("service_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.ServiceDate)
                    .HasColumnName("service_date")
                    .HasColumnType("date");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.SupplierPartner).HasColumnName("supplier_partner");

                entity.Property(e => e.TimeServicesHour)
                    .HasColumnName("time_services_hour")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TimeServicesMinute)
                    .HasColumnName("time_services_minute")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalTimeAllowed).HasColumnName("total_time_allowed");

                entity.Property(e => e.TotalTimeAllowedId).HasColumnName("total_time_allowed_id");

                entity.Property(e => e.TransportType).HasColumnName("transport_type");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.Vehicle)
                    .HasColumnName("vehicle")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.VehicleColor)
                    .HasColumnName("vehicle_color")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.WorkOrderServicesId).HasColumnName("work_order_services_id");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.Transportations)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Transportation_Cat_Status");

                entity.HasOne(d => d.TotalTimeAllowedNavigation)
                    .WithMany(p => p.Transportations)
                    .HasForeignKey(d => d.TotalTimeAllowedId)
                    .HasConstraintName("FK_Transportation_Cat_Duration");

                entity.HasOne(d => d.WorkOrderServices)
                    .WithMany(p => p.Transportations)
                    .HasForeignKey(d => d.WorkOrderServicesId)
                    .HasConstraintName("FK_Transportation_Service_Order_Services");
            });

            modelBuilder.Entity<TypeOffice>(entity =>
            {
                entity.ToTable("Type_Office");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Type)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TypePartnerClientProfile>(entity =>
            {
                entity.ToTable("Type_Partner_Client_Profile");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasColumnName("type")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TypeVehiclesSupplierPartnerDetail>(entity =>
            {
                entity.HasKey(e => new { e.SupplairPartnerDetail, e.TypeVehicles });

                entity.ToTable("Type_Vehicles_Supplier_Partner_Details");

                entity.Property(e => e.SupplairPartnerDetail).HasColumnName("supplair_partner_detail");

                entity.Property(e => e.TypeVehicles).HasColumnName("type_vehicles");

                entity.HasOne(d => d.SupplairPartnerDetailNavigation)
                    .WithMany(p => p.TypeVehiclesSupplierPartnerDetails)
                    .HasForeignKey(d => d.SupplairPartnerDetail)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Type_Vehicles_Supplier_Partner_Details_Supplier_Partner_Details");

                entity.HasOne(d => d.TypeVehiclesNavigation)
                    .WithMany(p => p.TypeVehiclesSupplierPartnerDetails)
                    .HasForeignKey(d => d.TypeVehicles)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Type_Vehicles_Supplier_Partner_Details_Cat_VehicleType");
            });

            modelBuilder.Entity<UnavailableDay>(entity =>
            {
                entity.ToTable("Unavailable_Day");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .ValueGeneratedNever();

                entity.Property(e => e.ConsultantContactsConsultant).HasColumnName("consultant_contacts_consultant");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.UnavaibleDay)
                    .HasColumnName("unavaible_day")
                    .HasColumnType("date");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.ConsultantContactsConsultantNavigation)
                    .WithMany(p => p.UnavailableDays)
                    .HasForeignKey(d => d.ConsultantContactsConsultant)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Unavailable_Day_Consultant_Contacts_Consultant");
            });

            modelBuilder.Entity<UpcomingEvent>(entity =>
            {
                entity.ToTable("Upcoming_Event");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.City).HasColumnName("city");

                entity.Property(e => e.Country).HasColumnName("country");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.EventDate)
                    .HasColumnName("event_date")
                    .HasColumnType("date");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.Title)
                    .HasColumnName("title")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.CityNavigation)
                    .WithMany(p => p.UpcomingEvents)
                    .HasForeignKey(d => d.City)
                    .HasConstraintName("FK_Upcoming_Event_Cat_City");

                entity.HasOne(d => d.CountryNavigation)
                    .WithMany(p => p.UpcomingEvents)
                    .HasForeignKey(d => d.Country)
                    .HasConstraintName("FK_Upcoming_Event_Cat_Country");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Avatar)
                    .HasColumnName("avatar")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("email")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FcmToken).HasColumnName("fcm_token");

                entity.Property(e => e.LastName)
                    .HasColumnName("last_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MobilePhone)
                    .HasColumnName("mobile_phone")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MotherLastName)
                    .HasColumnName("mother_last_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasColumnName("password")
                    .HasMaxLength(700)
                    .IsUnicode(false);

                entity.Property(e => e.Reset).HasColumnName("reset");

                entity.Property(e => e.RoleId).HasColumnName("role_id");

                entity.Property(e => e.Send).HasColumnName("send");

                entity.Property(e => e.ServiceLineId).HasColumnName("service_line_id");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserTypeId).HasColumnName("user_type_id");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Users_Cat_Roles");

                entity.HasOne(d => d.ServiceLine)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.ServiceLineId)
                    .HasConstraintName("FK_Users_Cat_Service_Line");

                entity.HasOne(d => d.UserType)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.UserTypeId)
                    .HasConstraintName("FK_Users_Cat_User_Type");
            });

            modelBuilder.Entity<UserGroup>(entity =>
            {
                entity.HasKey(e => new { e.Conversation, e.UserReciver });

                entity.ToTable("User_Group");

                entity.Property(e => e.Conversation).HasColumnName("conversation");

                entity.Property(e => e.UserReciver).HasColumnName("user_reciver");

                entity.HasOne(d => d.ConversationNavigation)
                    .WithMany(p => p.UserGroups)
                    .HasForeignKey(d => d.Conversation)
                    .HasConstraintName("FK_User_Group_Conversation1");

                entity.HasOne(d => d.UserReciverNavigation)
                    .WithMany(p => p.UserGroups)
                    .HasForeignKey(d => d.UserReciver)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_Group_Users");
            });

            modelBuilder.Entity<VehicleConsultant>(entity =>
            {
                entity.ToTable("Vehicle_Consultant");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AirConditioner).HasColumnName("air_conditioner");

                entity.Property(e => e.Capacity).HasColumnName("capacity");

                entity.Property(e => e.Color)
                    .HasColumnName("color")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConsultantContactsConsultant).HasColumnName("consultant_contacts_consultant");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.NumberDoor).HasColumnName("number_door");

                entity.Property(e => e.PlateNumber)
                    .HasColumnName("plate_number")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.VehicleMake)
                    .HasColumnName("vehicle_make")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.VehicleModel)
                    .HasColumnName("vehicle_model")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.VehicleType).HasColumnName("vehicle_type");

                entity.Property(e => e.Year).HasColumnName("year");

                entity.HasOne(d => d.ConsultantContactsConsultantNavigation)
                    .WithMany(p => p.VehicleConsultants)
                    .HasForeignKey(d => d.ConsultantContactsConsultant)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Vehicle_Consultant_Consultant_Contacts_Consultant");

                entity.HasOne(d => d.VehicleTypeNavigation)
                    .WithMany(p => p.VehicleConsultants)
                    .HasForeignKey(d => d.VehicleType)
                    .HasConstraintName("FK_Vehicle_Consultant_Cat_VehicleType");
            });

            modelBuilder.Entity<VehicleService>(entity =>
            {
                entity.ToTable("Vehicle_Service");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AirConditioner).HasColumnName("air_conditioner");

                entity.Property(e => e.Capacity).HasColumnName("capacity");

                entity.Property(e => e.Color)
                    .HasColumnName("color")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConsultantContactsService).HasColumnName("consultant_contacts_service");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.NumberDoor).HasColumnName("number_door");

                entity.Property(e => e.PlateNumber)
                    .HasColumnName("plate_number")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.VehicleMake)
                    .HasColumnName("vehicle_make")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.VehicleModel)
                    .HasColumnName("vehicle_model")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.VehicleType).HasColumnName("vehicle_type");

                entity.Property(e => e.Year).HasColumnName("year");

                entity.HasOne(d => d.ConsultantContactsServiceNavigation)
                    .WithMany(p => p.VehicleServices)
                    .HasForeignKey(d => d.ConsultantContactsService)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Vehicle_Service_Consultant_Contacts_Service");

                entity.HasOne(d => d.VehicleTypeNavigation)
                    .WithMany(p => p.VehicleServices)
                    .HasForeignKey(d => d.VehicleType)
                    .HasConstraintName("FK_Vehicle_Service_Cat_VehicleType");
            });

            modelBuilder.Entity<VisaDeregistration>(entity =>
            {
                entity.ToTable("Visa_Deregistration");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApplicantId).HasColumnName("applicant_id");

                entity.Property(e => e.ApplicationApprovalDate)
                    .HasColumnName("application_approval_date")
                    .HasColumnType("date");

                entity.Property(e => e.ApplicationSubmissionDate)
                    .HasColumnName("application_submission_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.City)
                    .HasColumnName("city")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ConsularServiceId).HasColumnName("consular_service_id");

                entity.Property(e => e.CountryDepertureDate)
                    .HasColumnName("country_deperture_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentCollectionCompletionDate)
                    .HasColumnName("document_collection_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentCollectionStartDate)
                    .HasColumnName("document_collection_start_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentDeliveryDate)
                    .HasColumnName("document_delivery_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentExpirationDate)
                    .HasColumnName("document_expiration_Date")
                    .HasColumnType("date");

                entity.Property(e => e.EmploymentLastDay)
                    .HasColumnName("employment_last_day")
                    .HasColumnType("date");

                entity.Property(e => e.HostCityId).HasColumnName("host_city_id");

                entity.Property(e => e.HostCountryId).HasColumnName("host_country_id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceCompletionDate)
                    .HasColumnName("service_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.VisaTypeId)
                    .HasColumnName("visa_type_id")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WorkOrderServicesId).HasColumnName("work_order_services_id");

                entity.HasOne(d => d.HostCountry)
                    .WithMany(p => p.VisaDeregistrations)
                    .HasForeignKey(d => d.HostCountryId)
                    .HasConstraintName("FK_Visa_Deregistration_Cat_Country");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.VisaDeregistrations)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_Visa_Deregistration_Cat_Status");

                entity.HasOne(d => d.WorkOrderServices)
                    .WithMany(p => p.VisaDeregistrations)
                    .HasForeignKey(d => d.WorkOrderServicesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Visa_Deregistration_Service_Order_Services");
            });

            modelBuilder.Entity<VisitHomeSale>(entity =>
            {
                entity.ToTable("Visit_Home_Sale");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Date)
                    .HasColumnName("date")
                    .HasColumnType("date");

                entity.Property(e => e.HomeSale).HasColumnName("home_sale");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.HomeSaleNavigation)
                    .WithMany(p => p.VisitHomeSales)
                    .HasForeignKey(d => d.HomeSale)
                    .HasConstraintName("FK_Visit_Home_Sale_Home_Sale");
            });

            modelBuilder.Entity<VisitReportPropertyManagement>(entity =>
            {
                entity.ToTable("Visit_Report_Property_Management");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.PropertyManagement).HasColumnName("property_management");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.VisitReport)
                    .HasColumnName("visit_report")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.HasOne(d => d.PropertyManagementNavigation)
                    .WithMany(p => p.VisitReportPropertyManagements)
                    .HasForeignKey(d => d.PropertyManagement)
                    .HasConstraintName("FK_Visit_Report_Property_Management_Property_Management");
            });

            modelBuilder.Entity<WireTransferConsultant>(entity =>
            {
                entity.ToTable("Wire_Transfer_Consultant");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountHoldersName)
                    .HasColumnName("account_holders_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNumber).HasColumnName("account_number");

                entity.Property(e => e.AccountType).HasColumnName("account_type");

                entity.Property(e => e.BankAddress)
                    .HasColumnName("bank_address")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.BankName)
                    .HasColumnName("bank_name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Currency).HasColumnName("currency");

                entity.Property(e => e.InternationalPaymentAcceptance).HasColumnName("international_payment_acceptance");

                entity.Property(e => e.PaymentInformationConsultant).HasColumnName("payment_information_consultant");

                entity.Property(e => e.RoutingNumber).HasColumnName("routing_number");

                entity.Property(e => e.SwiftBicCode)
                    .HasColumnName("SWIFT_BIC_code")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.WireFeeApprox).HasColumnName("wire_fee_approx");

                entity.HasOne(d => d.AccountTypeNavigation)
                    .WithMany(p => p.WireTransferConsultants)
                    .HasForeignKey(d => d.AccountType)
                    .HasConstraintName("FK_Wire_Transfer_Consultant_Cat_BankAccountType");

                entity.HasOne(d => d.CurrencyNavigation)
                    .WithMany(p => p.WireTransferConsultants)
                    .HasForeignKey(d => d.Currency)
                    .HasConstraintName("FK_Wire_Transfer_Consultant_Cat_currency");

                entity.HasOne(d => d.PaymentInformationConsultantNavigation)
                    .WithMany(p => p.WireTransferConsultants)
                    .HasForeignKey(d => d.PaymentInformationConsultant)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Wire_Transfer_Consultant_Payment_Information_Consultant");
            });

            modelBuilder.Entity<WireTransferPaymentConcept>(entity =>
            {
                entity.ToTable("Wire_Transfer_Payment_Concept");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountHoldersName)
                    .HasColumnName("account_holders_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNumber).HasColumnName("account_number");

                entity.Property(e => e.AccountType).HasColumnName("account_type");

                entity.Property(e => e.BankAddress)
                    .HasColumnName("bank_address")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.BankName)
                    .HasColumnName("bank_name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Currency).HasColumnName("currency");

                entity.Property(e => e.InternationalPaymentAcceptance).HasColumnName("international_payment_acceptance");

                entity.Property(e => e.PaymentConcept).HasColumnName("payment_concept");

                entity.Property(e => e.RoutingNumber).HasColumnName("routing_number");

                entity.Property(e => e.SwiftBicCode)
                    .HasColumnName("SWIFT_BIC_code")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.WireFeeApprox).HasColumnName("wire_fee_approx");

                entity.HasOne(d => d.AccountTypeNavigation)
                    .WithMany(p => p.WireTransferPaymentConcepts)
                    .HasForeignKey(d => d.AccountType)
                    .HasConstraintName("FK_Wire_Transfer_Payment_Concept_Cat_BankAccountType");

                entity.HasOne(d => d.CurrencyNavigation)
                    .WithMany(p => p.WireTransferPaymentConcepts)
                    .HasForeignKey(d => d.Currency)
                    .HasConstraintName("FK_Wire_Transfer_Payment_Concept_Cat_currency");

                entity.HasOne(d => d.PaymentConceptNavigation)
                    .WithMany(p => p.WireTransferPaymentConcepts)
                    .HasForeignKey(d => d.PaymentConcept)
                    .HasConstraintName("FK_Wire_Transfer_Payment_Concept_Payment_Concept");
            });

            modelBuilder.Entity<WireTransferPaymentInformationOffice>(entity =>
            {
                entity.ToTable("Wire_Transfer_Payment_Information_Office");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountHoldersName)
                    .HasColumnName("account_holders_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNumber).HasColumnName("account_number");

                entity.Property(e => e.AccountType).HasColumnName("account_type");

                entity.Property(e => e.BankAddress)
                    .HasColumnName("bank_address")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.BankName)
                    .HasColumnName("bank_name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Currency).HasColumnName("currency");

                entity.Property(e => e.IdPaymentInformationOffice).HasColumnName("id_payment_information_office");

                entity.Property(e => e.InternationalPaymentAcceptance).HasColumnName("international_payment_acceptance");

                entity.Property(e => e.RoutingNumber).HasColumnName("routing_number");

                entity.Property(e => e.SwiftBicCode)
                    .HasColumnName("SWIFT_BIC_code")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.WireFeeApprox).HasColumnName("wire_fee_approx");

                entity.HasOne(d => d.IdPaymentInformationOfficeNavigation)
                    .WithMany(p => p.WireTransferPaymentInformationOffices)
                    .HasForeignKey(d => d.IdPaymentInformationOffice)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Wire_Transfer_Payment_Information_Office_Payment_Information_Office");
            });

            modelBuilder.Entity<WireTransferService>(entity =>
            {
                entity.ToTable("Wire_Transfer_Service");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AccountHoldersName)
                    .HasColumnName("account_holders_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNumber).HasColumnName("account_number");

                entity.Property(e => e.AccountType).HasColumnName("account_type");

                entity.Property(e => e.BankAddress)
                    .HasColumnName("bank_address")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.BankName)
                    .HasColumnName("bank_name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasColumnName("comments")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.Currency).HasColumnName("currency");

                entity.Property(e => e.InternationalPaymentAcceptance).HasColumnName("international_payment_acceptance");

                entity.Property(e => e.PaymentInformationService).HasColumnName("payment_information_service");

                entity.Property(e => e.RoutingNumber).HasColumnName("routing_number");

                entity.Property(e => e.SwiftBicCode)
                    .HasColumnName("SWIFT_BIC_code")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.WireFeeApprox).HasColumnName("wire_fee_approx");

                entity.HasOne(d => d.AccountTypeNavigation)
                    .WithMany(p => p.WireTransferServices)
                    .HasForeignKey(d => d.AccountType)
                    .HasConstraintName("FK_Wire_Transfer_Service_Cat_BankAccountType");

                entity.HasOne(d => d.CurrencyNavigation)
                    .WithMany(p => p.WireTransferServices)
                    .HasForeignKey(d => d.Currency)
                    .HasConstraintName("FK_Wire_Transfer_Service_Cat_currency");

                entity.HasOne(d => d.PaymentInformationServiceNavigation)
                    .WithMany(p => p.WireTransferServices)
                    .HasForeignKey(d => d.PaymentInformationService)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Wire_Transfer_Service_Payment_Information_Service");
            });

            modelBuilder.Entity<WireTransferServicePaymentConcept>(entity =>
            {
                entity.HasKey(e => new { e.PaymentConcept, e.WireTransferService });

                entity.ToTable("Wire_Transfer_Service_Payment_Concept");

                entity.Property(e => e.PaymentConcept).HasColumnName("payment_concept");

                entity.Property(e => e.WireTransferService).HasColumnName("wire_transfer_service");

                entity.HasOne(d => d.PaymentConceptNavigation)
                    .WithMany(p => p.WireTransferServicePaymentConcepts)
                    .HasForeignKey(d => d.PaymentConcept)
                    .HasConstraintName("FK_Wire_Transfer_Service_Payment_Concept_Payment_Concept");

                entity.HasOne(d => d.WireTransferServiceNavigation)
                    .WithMany(p => p.WireTransferServicePaymentConcepts)
                    .HasForeignKey(d => d.WireTransferService)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Wire_Transfer_Service_Payment_Concept_Wire_Transfer_Service");
            });

            modelBuilder.Entity<WorkOrder>(entity =>
            {
                entity.ToTable("work_order");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("date");

                entity.Property(e => e.NumberWorkOrder)
                    .HasColumnName("number_work_order")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceLineId).HasColumnName("service_line_id");

                entity.Property(e => e.ServiceRecordId).HasColumnName("service_record_id");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.ServiceLine)
                    .WithMany(p => p.WorkOrders)
                    .HasForeignKey(d => d.ServiceLineId)
                    .HasConstraintName("FK_service_order_Cat_Service_Line");

                entity.HasOne(d => d.ServiceRecord)
                    .WithMany(p => p.WorkOrders)
                    .HasForeignKey(d => d.ServiceRecordId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_service_order_Service_Record");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.WorkOrders)
                    .HasForeignKey(d => d.StatusId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_work_order_Service_Order_Services_Status");
            });

            modelBuilder.Entity<WorkOrderService>(entity =>
            {
                entity.ToTable("Work_Order_Services");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpdateBy).HasColumnName("update_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<WorkPermit>(entity =>
            {
                entity.ToTable("Work_Permit");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ApplicantId).HasColumnName("applicant_id");

                entity.Property(e => e.ApplicationApprovalDate)
                    .HasColumnName("application_approval_date")
                    .HasColumnType("date");

                entity.Property(e => e.ApplicationSubmissionDate)
                    .HasColumnName("application_submission_date")
                    .HasColumnType("date");

                entity.Property(e => e.AppointmentDate)
                    .HasColumnName("appointment_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoAcceptanceDate)
                    .HasColumnName("autho_acceptance_date")
                    .HasColumnType("date");

                entity.Property(e => e.AuthoDate)
                    .HasColumnName("autho_date")
                    .HasColumnType("date");

                entity.Property(e => e.City)
                    .HasColumnName("city")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ConsularServiceId).HasColumnName("consular_service_id");

                entity.Property(e => e.CreatedBy).HasColumnName("created_by");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("created_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentCollectionCompletionDate)
                    .HasColumnName("document_collection_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentCollectionStartDate)
                    .HasColumnName("document_collection_start_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentDeliveryDate)
                    .HasColumnName("document_delivery_date")
                    .HasColumnType("date");

                entity.Property(e => e.DocumentExpirationDate)
                    .HasColumnName("document_expiration_Date")
                    .HasColumnType("date");

                entity.Property(e => e.HostCityId).HasColumnName("host_city_id");

                entity.Property(e => e.HostCountryId).HasColumnName("host_country_id");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceCompletionDate)
                    .HasColumnName("service_completion_date")
                    .HasColumnType("date");

                entity.Property(e => e.StatusId).HasColumnName("status_id");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.Property(e => e.VisaTypeId)
                    .HasColumnName("visa_type_id")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WorkOrderServicesId).HasColumnName("work_order_services_id");

                entity.HasOne(d => d.ConsularService)
                    .WithMany(p => p.WorkPermits)
                    .HasForeignKey(d => d.ConsularServiceId)
                    .HasConstraintName("FK_Work_Permit_Cat_Consular_Service");

                entity.HasOne(d => d.HostCountry)
                    .WithMany(p => p.WorkPermits)
                    .HasForeignKey(d => d.HostCountryId)
                    .HasConstraintName("FK_Work_Permit_Cat_Country");

                entity.HasOne(d => d.Status)
                    .WithMany(p => p.WorkPermits)
                    .HasForeignKey(d => d.StatusId)
                    .HasConstraintName("FK_Work_Permit_Cat_Status");

                entity.HasOne(d => d.WorkOrderServices)
                    .WithMany(p => p.WorkPermits)
                    .HasForeignKey(d => d.WorkOrderServicesId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Work_Permit_Service_Order_Services");
            });

            modelBuilder.Entity<training>(entity =>
            {
                entity.ToTable("Training");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreationBy).HasColumnName("creation_by");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasColumnType("date");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Groups).HasColumnName("groups");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Photo)
                    .IsRequired()
                    .HasColumnName("photo")
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TrainingGroup).HasColumnName("training_group");

                entity.Property(e => e.Type).HasColumnName("type");

                entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("updated_date")
                    .HasColumnType("date");

                entity.HasOne(d => d.TrainingGroupNavigation)
                    .WithMany(p => p.training)
                    .HasForeignKey(d => d.TrainingGroup)
                    .HasConstraintName("FK_Training_Cat_Training_Group");

                entity.HasOne(d => d.TypeNavigation)
                    .WithMany(p => p.training)
                    .HasForeignKey(d => d.Type)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Training_Cat_Training_Type");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}